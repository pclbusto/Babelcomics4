{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Babelcomics4 - Gestor de Colecci\u00f3n de Comics","text":"<p>Babelcomics4 es un gestor completo de colecciones de comics desarrollado en Python con GTK4 y libadwaita. Permite organizar, catalogar y gestionar tu colecci\u00f3n de comics digitales con integraci\u00f3n directa a ComicVine API.</p>"},{"location":"#caracteristicas-principales","title":"\ud83d\ude80 Caracter\u00edsticas Principales","text":""},{"location":"#gestion-completa","title":"\ud83d\udcda Gesti\u00f3n Completa","text":"<ul> <li>Comics Digitales: Soporte para archivos CBZ, CBR y formatos de imagen</li> <li>Metadatos: Informaci\u00f3n detallada de cada comic con integraci\u00f3n ComicVine</li> <li>Thumbnails: Generaci\u00f3n autom\u00e1tica de miniaturas con efectos visuales</li> <li>B\u00fasqueda Avanzada: Filtros potentes por clasificaci\u00f3n, calidad, a\u00f1o, etc.</li> </ul>"},{"location":"#interfaz-moderna","title":"\ud83c\udfa8 Interfaz Moderna","text":"<ul> <li>GTK4 + libadwaita: Interfaz nativa y moderna</li> <li>Navegaci\u00f3n Fluida: NavigationView con p\u00e1ginas de detalle</li> <li>Modo Oscuro: Soporte completo para temas claros y oscuros</li> <li>Responsive: Adaptable a diferentes tama\u00f1os de pantalla</li> </ul>"},{"location":"#integracion-comicvine","title":"\ud83d\udd17 Integraci\u00f3n ComicVine","text":"<ul> <li>API Oficial: Conexi\u00f3n directa con la base de datos ComicVine</li> <li>Actualizaci\u00f3n Autom\u00e1tica: Descarga de metadatos e im\u00e1genes en segundo plano</li> <li>Threading: Descargas concurrentes sin bloquear la interfaz</li> <li>Cache Inteligente: Sistema de cache para optimizar rendimiento</li> </ul>"},{"location":"#base-de-datos-robusta","title":"\ud83d\uddc3\ufe0f Base de Datos Robusta","text":"<ul> <li>SQLAlchemy ORM: Gesti\u00f3n avanzada de datos relacionales</li> <li>Modelos Estructurados: Comics, Vol\u00famenes, Editoriales y m\u00e1s</li> <li>Migraci\u00f3n Autom\u00e1tica: Actualizaciones de esquema sin p\u00e9rdida de datos</li> <li>Backup Autom\u00e1tico: Protecci\u00f3n de tu colecci\u00f3n</li> </ul>"},{"location":"#funcionalidades-destacadas","title":"\ud83c\udfaf Funcionalidades Destacadas","text":""},{"location":"#catalogacion-inteligente","title":"Catalogaci\u00f3n Inteligente","text":"<ul> <li>Escaneo autom\u00e1tico de directorios</li> <li>Detecci\u00f3n de metadatos por nombre de archivo</li> <li>Asociaci\u00f3n autom\u00e1tica con vol\u00famenes ComicVine</li> <li>Generaci\u00f3n de thumbnails en tiempo real</li> </ul>"},{"location":"#filtros-avanzados","title":"Filtros Avanzados","text":"<ul> <li>Clasificaci\u00f3n: Distingue entre comics catalogados y sin catalogar</li> <li>Visual: Thumbnails en escala de grises para issues sin f\u00edsicos</li> <li>Calidad: Sistema de puntuaci\u00f3n por estrellas</li> <li>Estado: Exclusi\u00f3n de elementos en papelera</li> </ul>"},{"location":"#gestion-de-volumenes","title":"Gesti\u00f3n de Vol\u00famenes","text":"<ul> <li>Vista detallada con lista de issues</li> <li>Bot\u00f3n de actualizaci\u00f3n ComicVine</li> <li>Informaci\u00f3n de completitud de colecci\u00f3n</li> <li>Navegaci\u00f3n fluida entre vol\u00famenes e issues</li> </ul>"},{"location":"#estadisticas-del-proyecto","title":"\ud83d\udcca Estad\u00edsticas del Proyecto","text":"<pre><code>\ud83d\udcc1 Estructura del Proyecto\n\u251c\u2500\u2500 \ud83d\udc0d Python Backend (SQLAlchemy + ComicVine API)\n\u251c\u2500\u2500 \ud83d\udda5\ufe0f GTK4/libadwaita Frontend\n\u251c\u2500\u2500 \ud83d\uddc4\ufe0f Sistema de Repositorios\n\u251c\u2500\u2500 \ud83d\uddbc\ufe0f Generador de Thumbnails\n\u251c\u2500\u2500 \ud83d\udd0d Motor de B\u00fasqueda\n\u2514\u2500\u2500 \ud83d\udcda Documentaci\u00f3n MkDocs\n</code></pre>"},{"location":"#tecnologias-utilizadas","title":"\ud83d\udee0\ufe0f Tecnolog\u00edas Utilizadas","text":"<ul> <li>Python 3.13: Lenguaje principal</li> <li>GTK4: Toolkit de interfaz gr\u00e1fica</li> <li>libadwaita: Componentes modernos de GNOME</li> <li>SQLAlchemy: ORM para base de datos</li> <li>Pillow: Procesamiento de im\u00e1genes</li> <li>Requests: Cliente HTTP para ComicVine API</li> <li>Threading: Concurrencia y paralelismo</li> </ul>"},{"location":"#guia-rapida","title":"\ud83d\udcd6 Gu\u00eda R\u00e1pida","text":"<ol> <li>Instalaci\u00f3n: Configura tu entorno de desarrollo</li> <li>Primeros Pasos: Aprende lo b\u00e1sico</li> <li>Gesti\u00f3n de Comics: Organiza tu colecci\u00f3n</li> <li>ComicVine: Conecta con la API</li> <li>Filtros: Encuentra comics espec\u00edficos</li> </ol>"},{"location":"#capturas-de-pantalla","title":"\ud83c\udfa8 Capturas de Pantalla","text":""},{"location":"#vista-principal","title":"Vista Principal","text":"<p>La interfaz principal muestra tu colecci\u00f3n con thumbnails generados autom\u00e1ticamente:</p> <ul> <li>Vista de grid responsiva</li> <li>Informaci\u00f3n b\u00e1sica de cada comic</li> <li>Estado visual (clasificado/sin clasificar)</li> <li>B\u00fasqueda en tiempo real</li> </ul>"},{"location":"#detalle-de-volumen","title":"Detalle de Volumen","text":"<p>Navegaci\u00f3n completa por vol\u00famenes con:</p> <ul> <li>Lista de todos los issues</li> <li>Bot\u00f3n de actualizaci\u00f3n ComicVine</li> <li>Informaci\u00f3n de metadatos</li> <li>Estad\u00edsticas de colecci\u00f3n</li> </ul>"},{"location":"#filtros-avanzados_1","title":"Filtros Avanzados","text":"<p>Sistema de filtrado potente:</p> <ul> <li>Clasificaci\u00f3n (catalogados/sin catalogar)</li> <li>Rango de calidad (1-5 estrellas)</li> <li>Exclusi\u00f3n de papelera</li> <li>M\u00faltiples criterios combinables</li> </ul>"},{"location":"#contribuir","title":"\ud83e\udd1d Contribuir","text":"<p>Este proyecto est\u00e1 en desarrollo activo. Las contribuciones son bienvenidas:</p> <ol> <li>Fork del repositorio</li> <li>Crear rama de feature</li> <li>Implementar mejoras</li> <li>Tests y documentaci\u00f3n</li> <li>Pull request</li> </ol>"},{"location":"#licencia","title":"\ud83d\udcdd Licencia","text":"<p>Proyecto desarrollado para gesti\u00f3n personal de colecciones de comics digitales.</p> <p>\u00bfListo para empezar? \ud83d\udc49 Instalaci\u00f3n</p>"},{"location":"desarrollo/api-comicvine/","title":"API ComicVine","text":"<p>Babelcomics4 integra con la API oficial de ComicVine para obtener metadatos completos de comics, vol\u00famenes, editoriales y personajes, proporcionando catalogaci\u00f3n autom\u00e1tica y enriquecimiento de informaci\u00f3n.</p>"},{"location":"desarrollo/api-comicvine/#integracion-con-comicvine","title":"\ud83c\udf10 Integraci\u00f3n con ComicVine","text":""},{"location":"desarrollo/api-comicvine/#cliente-api-principal","title":"Cliente API Principal","text":""},{"location":"desarrollo/api-comicvine/#comicvineclient","title":"ComicVineClient","text":"<pre><code>import requests\nimport time\nimport json\nfrom typing import Dict, List, Optional, Any\nfrom urllib.parse import urljoin, urlencode\nfrom dataclasses import dataclass\nimport logging\n\n@dataclass\nclass ComicVineConfig:\n    \"\"\"Configuraci\u00f3n del cliente ComicVine\"\"\"\n    api_key: str\n    base_url: str = \"https://comicvine.gamespot.com/api/\"\n    user_agent: str = \"Babelcomics4/1.0\"\n    requests_per_hour: int = 200\n    request_delay: float = 0.5\n    timeout: int = 30\n    retries: int = 3\n    cache_enabled: bool = True\n    cache_ttl: int = 3600  # 1 hora\n\nclass ComicVineClient:\n    \"\"\"Cliente para la API de ComicVine\"\"\"\n\n    def __init__(self, config: ComicVineConfig):\n        self.config = config\n        self.session = requests.Session()\n        self.session.headers.update({\n            'User-Agent': config.user_agent,\n            'Accept': 'application/json'\n        })\n\n        # Control de rate limiting\n        self.request_timestamps = []\n        self.last_request_time = 0\n\n        # Cache simple en memoria\n        self.cache = {}\n\n        # Logger\n        self.logger = logging.getLogger(__name__)\n\n    def _wait_for_rate_limit(self):\n        \"\"\"Esperar para respetar rate limiting\"\"\"\n        current_time = time.time()\n\n        # Limpiar timestamps antiguos (m\u00e1s de 1 hora)\n        hour_ago = current_time - 3600\n        self.request_timestamps = [\n            ts for ts in self.request_timestamps if ts &gt; hour_ago\n        ]\n\n        # Verificar si hemos excedido el l\u00edmite\n        if len(self.request_timestamps) &gt;= self.config.requests_per_hour:\n            sleep_time = 3600 - (current_time - self.request_timestamps[0])\n            if sleep_time &gt; 0:\n                self.logger.info(f\"Rate limit reached, sleeping for {sleep_time:.1f} seconds\")\n                time.sleep(sleep_time)\n\n        # Esperar delay m\u00ednimo entre requests\n        time_since_last = current_time - self.last_request_time\n        if time_since_last &lt; self.config.request_delay:\n            time.sleep(self.config.request_delay - time_since_last)\n\n    def _make_request(\n        self,\n        endpoint: str,\n        params: Dict[str, Any] = None,\n        use_cache: bool = True\n    ) -&gt; Optional[Dict[str, Any]]:\n        \"\"\"Realizar petici\u00f3n a la API con rate limiting y cache\"\"\"\n\n        # Preparar par\u00e1metros\n        params = params or {}\n        params.update({\n            'api_key': self.config.api_key,\n            'format': 'json'\n        })\n\n        # Generar clave de cache\n        cache_key = f\"{endpoint}:{urlencode(sorted(params.items()))}\"\n\n        # Verificar cache\n        if use_cache and self.config.cache_enabled and cache_key in self.cache:\n            cached_data, timestamp = self.cache[cache_key]\n            if time.time() - timestamp &lt; self.config.cache_ttl:\n                return cached_data\n\n        # Rate limiting\n        self._wait_for_rate_limit()\n\n        # Construir URL\n        url = urljoin(self.config.base_url, endpoint)\n\n        # Realizar petici\u00f3n con reintentos\n        for attempt in range(self.config.retries):\n            try:\n                current_time = time.time()\n                self.request_timestamps.append(current_time)\n                self.last_request_time = current_time\n\n                response = self.session.get(\n                    url,\n                    params=params,\n                    timeout=self.config.timeout\n                )\n\n                response.raise_for_status()\n                data = response.json()\n\n                # Verificar respuesta de ComicVine\n                if data.get('status_code') != 1:\n                    error_msg = data.get('error', 'Unknown ComicVine API error')\n                    self.logger.error(f\"ComicVine API error: {error_msg}\")\n                    return None\n\n                # Guardar en cache\n                if self.config.cache_enabled:\n                    self.cache[cache_key] = (data, current_time)\n\n                return data\n\n            except requests.exceptions.RequestException as e:\n                self.logger.warning(f\"Request attempt {attempt + 1} failed: {e}\")\n                if attempt &lt; self.config.retries - 1:\n                    time.sleep(2 ** attempt)  # Backoff exponencial\n                else:\n                    self.logger.error(f\"All {self.config.retries} attempts failed for {url}\")\n                    return None\n\n        return None\n\n    def search_volumes(\n        self,\n        query: str,\n        limit: int = 10,\n        offset: int = 0\n    ) -&gt; List[Dict[str, Any]]:\n        \"\"\"Buscar vol\u00famenes por nombre\"\"\"\n\n        params = {\n            'query': query,\n            'resources': 'volume',\n            'limit': limit,\n            'offset': offset,\n            'field_list': 'id,name,start_year,publisher,count_of_issues,image,description'\n        }\n\n        response = self._make_request('search/', params)\n        if response and 'results' in response:\n            return response['results']\n\n        return []\n\n    def get_volume_details(self, volume_id: int) -&gt; Optional[Dict[str, Any]]:\n        \"\"\"Obtener detalles completos de un volumen\"\"\"\n\n        params = {\n            'field_list': 'id,name,start_year,description,count_of_issues,publisher,image,site_detail_url'\n        }\n\n        response = self._make_request(f'volume/4000-{volume_id}/', params)\n        if response and 'results' in response:\n            return response['results']\n\n        return None\n\n    def get_volume_issues(\n        self,\n        volume_id: int,\n        limit: int = 100,\n        offset: int = 0\n    ) -&gt; List[Dict[str, Any]]:\n        \"\"\"Obtener issues de un volumen\"\"\"\n\n        params = {\n            'filter': f'volume:{volume_id}',\n            'limit': limit,\n            'offset': offset,\n            'sort': 'issue_number:asc',\n            'field_list': 'id,name,issue_number,cover_date,store_date,description,image,site_detail_url'\n        }\n\n        response = self._make_request('issues/', params)\n        if response and 'results' in response:\n            return response['results']\n\n        return []\n\n    def get_issue_details(self, issue_id: int) -&gt; Optional[Dict[str, Any]]:\n        \"\"\"Obtener detalles completos de un issue\"\"\"\n\n        params = {\n            'field_list': 'id,name,issue_number,cover_date,store_date,description,volume,character_credits,person_credits,image,site_detail_url'\n        }\n\n        response = self._make_request(f'issue/4000-{issue_id}/', params)\n        if response and 'results' in response:\n            return response['results']\n\n        return None\n\n    def search_issues(\n        self,\n        query: str,\n        limit: int = 10,\n        offset: int = 0,\n        volume_id: int = None\n    ) -&gt; List[Dict[str, Any]]:\n        \"\"\"Buscar issues espec\u00edficos\"\"\"\n\n        params = {\n            'query': query,\n            'resources': 'issue',\n            'limit': limit,\n            'offset': offset,\n            'field_list': 'id,name,issue_number,cover_date,volume,image,description'\n        }\n\n        if volume_id:\n            params['filter'] = f'volume:{volume_id}'\n\n        response = self._make_request('search/', params)\n        if response and 'results' in response:\n            return response['results']\n\n        return []\n\n    def get_publisher_details(self, publisher_id: int) -&gt; Optional[Dict[str, Any]]:\n        \"\"\"Obtener detalles de una editorial\"\"\"\n\n        params = {\n            'field_list': 'id,name,description,location_address,location_city,location_state'\n        }\n\n        response = self._make_request(f'publisher/4010-{publisher_id}/', params)\n        if response and 'results' in response:\n            return response['results']\n\n        return None\n\n    def search_publishers(\n        self,\n        query: str,\n        limit: int = 10\n    ) -&gt; List[Dict[str, Any]]:\n        \"\"\"Buscar editoriales\"\"\"\n\n        params = {\n            'query': query,\n            'resources': 'publisher',\n            'limit': limit,\n            'field_list': 'id,name,description'\n        }\n\n        response = self._make_request('search/', params)\n        if response and 'results' in response:\n            return response['results']\n\n        return []\n\n    def get_character_details(self, character_id: int) -&gt; Optional[Dict[str, Any]]:\n        \"\"\"Obtener detalles de un personaje\"\"\"\n\n        params = {\n            'field_list': 'id,name,description,real_name,aliases,birth,gender,origin,powers,image'\n        }\n\n        response = self._make_request(f'character/4005-{character_id}/', params)\n        if response and 'results' in response:\n            return response['results']\n\n        return None\n\n    def get_person_details(self, person_id: int) -&gt; Optional[Dict[str, Any]]:\n        \"\"\"Obtener detalles de una persona (creador)\"\"\"\n\n        params = {\n            'field_list': 'id,name,description,birth,death,hometown,image'\n        }\n\n        response = self._make_request(f'person/4040-{person_id}/', params)\n        if response and 'results' in response:\n            return response['results']\n\n        return None\n\n    def clear_cache(self):\n        \"\"\"Limpiar cache\"\"\"\n        self.cache.clear()\n\n    def get_cache_stats(self) -&gt; Dict[str, Any]:\n        \"\"\"Obtener estad\u00edsticas del cache\"\"\"\n        current_time = time.time()\n        valid_entries = 0\n        expired_entries = 0\n\n        for cache_key, (data, timestamp) in self.cache.items():\n            if current_time - timestamp &lt; self.config.cache_ttl:\n                valid_entries += 1\n            else:\n                expired_entries += 1\n\n        return {\n            'total_entries': len(self.cache),\n            'valid_entries': valid_entries,\n            'expired_entries': expired_entries,\n            'hit_ratio': getattr(self, '_cache_hits', 0) / getattr(self, '_cache_requests', 1)\n        }\n</code></pre>"},{"location":"desarrollo/api-comicvine/#servicios-de-catalogacion","title":"Servicios de Catalogaci\u00f3n","text":""},{"location":"desarrollo/api-comicvine/#comicvinecatalogservice","title":"ComicVineCatalogService","text":"<pre><code>from models import Comicbook, ComicbookInfo, Volume, Publisher, Person, Character\nfrom repositories import ComicRepository, VolumeRepository, PublisherRepository\nfrom sqlalchemy.orm import Session\nimport re\nfrom datetime import datetime\nfrom typing import Dict, List, Optional, Tuple\n\nclass ComicVineCatalogService:\n    \"\"\"Servicio de catalogaci\u00f3n usando ComicVine\"\"\"\n\n    def __init__(\n        self,\n        session: Session,\n        comicvine_client: ComicVineClient,\n        comic_repo: ComicRepository,\n        volume_repo: VolumeRepository,\n        publisher_repo: PublisherRepository\n    ):\n        self.session = session\n        self.cv_client = comicvine_client\n        self.comic_repo = comic_repo\n        self.volume_repo = volume_repo\n        self.publisher_repo = publisher_repo\n        self.logger = logging.getLogger(__name__)\n\n    def catalog_comic_from_filename(\n        self,\n        comic: Comicbook,\n        confidence_threshold: float = 0.7\n    ) -&gt; Optional[ComicbookInfo]:\n        \"\"\"Catalogar comic bas\u00e1ndose en el nombre del archivo\"\"\"\n\n        # Extraer metadatos del filename\n        metadata = self._extract_metadata_from_filename(comic.filename)\n        if not metadata.get('series') or not metadata.get('issue_number'):\n            return None\n\n        # Buscar vol\u00famenes candidatos\n        volume_candidates = self._find_volume_candidates(metadata)\n        if not volume_candidates:\n            return None\n\n        # Buscar issue espec\u00edfico en cada volumen candidato\n        best_match = None\n        best_confidence = 0\n\n        for volume in volume_candidates:\n            match_result = self._find_issue_in_volume(volume, metadata)\n            if match_result and match_result['confidence'] &gt; best_confidence:\n                best_match = match_result\n                best_confidence = match_result['confidence']\n\n        # Verificar confianza m\u00ednima\n        if best_confidence &lt; confidence_threshold:\n            self.logger.info(\n                f\"No se encontr\u00f3 coincidencia suficiente para {comic.filename} \"\n                f\"(mejor confianza: {best_confidence:.2f})\"\n            )\n            return None\n\n        # Crear ComicbookInfo\n        comic_info = self._create_comicbook_info_from_match(best_match)\n        if comic_info:\n            # Asociar con el comic f\u00edsico\n            comic.id_comicbook_info = comic_info.id_comicbook_info\n            comic_info.owned_comics.append(comic)\n\n            self.session.add(comic_info)\n            self.session.flush()\n\n        return comic_info\n\n    def _extract_metadata_from_filename(self, filename: str) -&gt; Dict[str, Any]:\n        \"\"\"Extraer metadatos del nombre de archivo usando regex\"\"\"\n\n        # Patrones de regex para diferentes formatos de nombre\n        patterns = [\n            # Pattern: \"Series Name #123 (2018).cbz\"\n            r'^(?P&lt;series&gt;.+?)\\s*#(?P&lt;issue_number&gt;\\d+(?:\\.\\d+)?)\\s*\\((?P&lt;year&gt;\\d{4})\\)',\n\n            # Pattern: \"Series Name - Issue 123 - Title.cbz\"\n            r'^(?P&lt;series&gt;.+?)\\s*-\\s*Issue\\s*(?P&lt;issue_number&gt;\\d+(?:\\.\\d+)?)\\s*-\\s*(?P&lt;title&gt;.+)',\n\n            # Pattern: \"Series_Name_123_Title.cbz\"\n            r'^(?P&lt;series&gt;.+?)_(?P&lt;issue_number&gt;\\d+(?:\\.\\d+)?)_(?P&lt;title&gt;.+)',\n\n            # Pattern: \"SeriesName123.cbz\"\n            r'^(?P&lt;series&gt;[A-Za-z\\s]+?)(?P&lt;issue_number&gt;\\d+(?:\\.\\d+)?)$',\n\n            # Pattern: \"Series Name v2 #123.cbz\"\n            r'^(?P&lt;series&gt;.+?)\\s*v(?P&lt;volume&gt;\\d+)\\s*#(?P&lt;issue_number&gt;\\d+(?:\\.\\d+)?)',\n\n            # Pattern: \"Series Name 123 (Publisher, Year).cbz\"\n            r'^(?P&lt;series&gt;.+?)\\s*(?P&lt;issue_number&gt;\\d+(?:\\.\\d+)?)\\s*\\((?P&lt;publisher&gt;.+?),\\s*(?P&lt;year&gt;\\d{4})\\)'\n        ]\n\n        # Remover extensi\u00f3n\n        basename = re.sub(r'\\.[^.]+$', '', filename)\n\n        metadata = {\n            'series': None,\n            'issue_number': None,\n            'year': None,\n            'title': None,\n            'volume': None,\n            'publisher': None\n        }\n\n        # Intentar cada patr\u00f3n\n        for pattern in patterns:\n            match = re.match(pattern, basename, re.IGNORECASE)\n            if match:\n                groups = match.groupdict()\n\n                # Limpiar y procesar los grupos capturados\n                if 'series' in groups and groups['series']:\n                    metadata['series'] = self._clean_series_name(groups['series'])\n\n                if 'issue_number' in groups and groups['issue_number']:\n                    metadata['issue_number'] = groups['issue_number']\n\n                if 'year' in groups and groups['year']:\n                    metadata['year'] = int(groups['year'])\n\n                if 'title' in groups and groups['title']:\n                    metadata['title'] = self._clean_title(groups['title'])\n\n                if 'volume' in groups and groups['volume']:\n                    metadata['volume'] = int(groups['volume'])\n\n                if 'publisher' in groups and groups['publisher']:\n                    metadata['publisher'] = groups['publisher'].strip()\n\n                break\n\n        return metadata\n\n    def _clean_series_name(self, series: str) -&gt; str:\n        \"\"\"Limpiar nombre de serie\"\"\"\n        # Reemplazar guiones bajos y puntos con espacios\n        cleaned = re.sub(r'[_.]', ' ', series)\n\n        # Remover caracteres especiales extras\n        cleaned = re.sub(r'[^\\w\\s\\-&amp;]', '', cleaned)\n\n        # Normalizar espacios\n        cleaned = re.sub(r'\\s+', ' ', cleaned).strip()\n\n        # Capitalizar apropiadamente\n        words = cleaned.split()\n        capitalized_words = []\n\n        for word in words:\n            # No capitalizar art\u00edculos y preposiciones comunes (excepto si es la primera palabra)\n            if word.lower() in ['the', 'a', 'an', 'and', 'or', 'of', 'in', 'on', 'at', 'to', 'for'] and len(capitalized_words) &gt; 0:\n                capitalized_words.append(word.lower())\n            else:\n                capitalized_words.append(word.capitalize())\n\n        return ' '.join(capitalized_words)\n\n    def _clean_title(self, title: str) -&gt; str:\n        \"\"\"Limpiar t\u00edtulo del issue\"\"\"\n        # Similar al series name pero m\u00e1s permisivo\n        cleaned = re.sub(r'[_.]', ' ', title)\n        cleaned = re.sub(r'\\s+', ' ', cleaned).strip()\n        return cleaned\n\n    def _find_volume_candidates(\n        self,\n        metadata: Dict[str, Any],\n        max_candidates: int = 5\n    ) -&gt; List[Dict[str, Any]]:\n        \"\"\"Encontrar vol\u00famenes candidatos en ComicVine\"\"\"\n\n        series_name = metadata.get('series')\n        if not series_name:\n            return []\n\n        # Buscar en ComicVine\n        search_results = self.cv_client.search_volumes(\n            query=series_name,\n            limit=max_candidates * 2  # Buscar m\u00e1s para filtrar despu\u00e9s\n        )\n\n        candidates = []\n\n        for result in search_results:\n            # Calcular similitud de nombre\n            name_similarity = self._calculate_string_similarity(\n                series_name.lower(),\n                result.get('name', '').lower()\n            )\n\n            # Filtrar por similitud m\u00ednima\n            if name_similarity &lt; 0.5:\n                continue\n\n            # Calcular score del candidato\n            score = name_similarity\n\n            # Bonus por a\u00f1o coincidente\n            if metadata.get('year') and result.get('start_year'):\n                year_diff = abs(metadata['year'] - result['start_year'])\n                if year_diff &lt;= 2:  # Tolerancia de 2 a\u00f1os\n                    score += 0.2 * (1 - year_diff / 2)\n\n            # Bonus por editorial conocida\n            publisher = result.get('publisher', {})\n            if publisher and publisher.get('name'):\n                publisher_name = publisher['name'].lower()\n                if any(major in publisher_name for major in ['dc', 'marvel', 'image', 'dark horse']):\n                    score += 0.1\n\n            candidates.append({\n                'volume_data': result,\n                'name_similarity': name_similarity,\n                'score': score\n            })\n\n        # Ordenar por score y devolver top candidatos\n        candidates.sort(key=lambda x: x['score'], reverse=True)\n        return candidates[:max_candidates]\n\n    def _find_issue_in_volume(\n        self,\n        volume_candidate: Dict[str, Any],\n        metadata: Dict[str, Any]\n    ) -&gt; Optional[Dict[str, Any]]:\n        \"\"\"Buscar issue espec\u00edfico en un volumen\"\"\"\n\n        volume_data = volume_candidate['volume_data']\n        volume_id = volume_data.get('id')\n\n        if not volume_id:\n            return None\n\n        # Obtener issues del volumen\n        issues = self.cv_client.get_volume_issues(volume_id, limit=200)\n\n        target_issue_number = metadata.get('issue_number')\n        if not target_issue_number:\n            return None\n\n        # Buscar issue coincidente\n        for issue in issues:\n            issue_number = issue.get('issue_number')\n            if not issue_number:\n                continue\n\n            # Comparar n\u00fameros de issue\n            if self._compare_issue_numbers(target_issue_number, issue_number):\n                # Calcular confianza total\n                confidence = volume_candidate['score']\n\n                # Bonus por coincidencia exacta de n\u00famero\n                if target_issue_number == issue_number:\n                    confidence += 0.2\n\n                # Bonus por fecha cercana si disponible\n                if metadata.get('year') and issue.get('cover_date'):\n                    issue_year = self._extract_year_from_date(issue['cover_date'])\n                    if issue_year and abs(metadata['year'] - issue_year) &lt;= 1:\n                        confidence += 0.1\n\n                return {\n                    'volume_data': volume_data,\n                    'issue_data': issue,\n                    'confidence': min(confidence, 1.0),\n                    'metadata': metadata\n                }\n\n        return None\n\n    def _compare_issue_numbers(self, target: str, candidate: str) -&gt; bool:\n        \"\"\"Comparar n\u00fameros de issue con tolerancia\"\"\"\n        try:\n            target_num = float(target)\n            candidate_num = float(candidate)\n            return abs(target_num - candidate_num) &lt; 0.1\n        except (ValueError, TypeError):\n            # Fallback a comparaci\u00f3n de string\n            return target.lower() == candidate.lower()\n\n    def _extract_year_from_date(self, date_str: str) -&gt; Optional[int]:\n        \"\"\"Extraer a\u00f1o de string de fecha\"\"\"\n        if not date_str:\n            return None\n\n        try:\n            # Formato t\u00edpico: \"2018-06-15\"\n            return int(date_str[:4])\n        except (ValueError, IndexError):\n            return None\n\n    def _calculate_string_similarity(self, str1: str, str2: str) -&gt; float:\n        \"\"\"Calcular similitud entre strings usando Levenshtein\"\"\"\n        import difflib\n        return difflib.SequenceMatcher(None, str1, str2).ratio()\n\n    def _create_comicbook_info_from_match(\n        self,\n        match_result: Dict[str, Any]\n    ) -&gt; Optional[ComicbookInfo]:\n        \"\"\"Crear ComicbookInfo desde resultado de coincidencia\"\"\"\n\n        volume_data = match_result['volume_data']\n        issue_data = match_result['issue_data']\n\n        try:\n            # Crear o obtener el volumen\n            volume = self._create_or_update_volume(volume_data)\n\n            # Crear ComicbookInfo\n            comic_info = ComicbookInfo(\n                titulo=issue_data.get('name', ''),\n                numero=str(issue_data.get('issue_number', '')),\n                fecha_tapa=self._parse_cover_date(issue_data.get('cover_date')),\n                resumen=self._clean_description(issue_data.get('description', '')),\n                url_api_detalle=issue_data.get('api_detail_url', ''),\n                url_sitio_web=issue_data.get('site_detail_url', ''),\n                id_comicvine=issue_data.get('id'),\n                id_volume=volume.id_volume,\n                ultima_sync_comicvine=datetime.utcnow()\n            )\n\n            # A\u00f1adir imagen de portada si est\u00e1 disponible\n            if issue_data.get('image') and issue_data['image'].get('original_url'):\n                comic_info.add_cover_image(\n                    url=issue_data['image']['original_url'],\n                    is_primary=True\n                )\n\n            return comic_info\n\n        except Exception as e:\n            self.logger.error(f\"Error creando ComicbookInfo: {e}\")\n            return None\n\n    def _create_or_update_volume(self, volume_data: Dict[str, Any]) -&gt; Volume:\n        \"\"\"Crear o actualizar volumen desde datos de ComicVine\"\"\"\n\n        comicvine_id = volume_data.get('id')\n\n        # Buscar volumen existente\n        volume = None\n        if comicvine_id:\n            volume = self.volume_repo.get_by_comicvine_id(comicvine_id)\n\n        if not volume:\n            # Crear nuevo volumen\n            publisher = self._create_or_update_publisher(\n                volume_data.get('publisher', {})\n            )\n\n            volume = Volume(\n                nombre=volume_data.get('name', ''),\n                anio_inicio=volume_data.get('start_year'),\n                resumen=self._clean_description(volume_data.get('description', '')),\n                cantidad_numeros=volume_data.get('count_of_issues', 0),\n                url_api_detalle=volume_data.get('api_detail_url', ''),\n                url_sitio_web=volume_data.get('site_detail_url', ''),\n                id_comicvine=comicvine_id,\n                id_publisher=publisher.id_publisher if publisher else None,\n                ultima_sync_comicvine=datetime.utcnow()\n            )\n\n            self.session.add(volume)\n            self.session.flush()\n\n        else:\n            # Actualizar volumen existente si es necesario\n            volume.update_from_comicvine(volume_data)\n\n        return volume\n\n    def _create_or_update_publisher(\n        self,\n        publisher_data: Dict[str, Any]\n    ) -&gt; Optional[Publisher]:\n        \"\"\"Crear o actualizar editorial desde datos de ComicVine\"\"\"\n\n        if not publisher_data or not publisher_data.get('name'):\n            return None\n\n        publisher_name = publisher_data['name']\n        comicvine_id = publisher_data.get('id')\n\n        # Usar repositorio para obtener o crear\n        publisher = self.publisher_repo.get_or_create_publisher(\n            name=publisher_name,\n            comicvine_id=comicvine_id\n        )\n\n        return publisher\n\n    def _parse_cover_date(self, date_str: str) -&gt; Optional[datetime.date]:\n        \"\"\"Parsear fecha de portada\"\"\"\n        if not date_str:\n            return None\n\n        try:\n            # Formato t\u00edpico: \"2018-06-15\"\n            return datetime.strptime(date_str, '%Y-%m-%d').date()\n        except ValueError:\n            try:\n                # Formato alternativo: \"2018-06\"\n                return datetime.strptime(date_str, '%Y-%m').date()\n            except ValueError:\n                return None\n\n    def _clean_description(self, description: str) -&gt; str:\n        \"\"\"Limpiar descripci\u00f3n removiendo HTML y normalizando\"\"\"\n        if not description:\n            return ''\n\n        # Remover tags HTML b\u00e1sicos\n        import re\n        clean_desc = re.sub(r'&lt;[^&gt;]+&gt;', '', description)\n\n        # Decodificar entidades HTML comunes\n        html_entities = {\n            '&amp;amp;': '&amp;',\n            '&amp;lt;': '&lt;',\n            '&amp;gt;': '&gt;',\n            '&amp;quot;': '\"',\n            '&amp;#39;': \"'\"\n        }\n\n        for entity, char in html_entities.items():\n            clean_desc = clean_desc.replace(entity, char)\n\n        # Normalizar espacios\n        clean_desc = re.sub(r'\\s+', ' ', clean_desc).strip()\n\n        return clean_desc\n\n    def update_volume_from_comicvine(\n        self,\n        volume: Volume,\n        update_issues: bool = True\n    ) -&gt; bool:\n        \"\"\"Actualizar volumen completo desde ComicVine\"\"\"\n\n        if not volume.id_comicvine:\n            return False\n\n        try:\n            # Obtener datos actualizados del volumen\n            volume_data = self.cv_client.get_volume_details(volume.id_comicvine)\n            if not volume_data:\n                return False\n\n            # Actualizar volumen\n            volume.update_from_comicvine(volume_data)\n\n            # Actualizar issues si se solicita\n            if update_issues:\n                self._sync_volume_issues(volume)\n\n            self.session.commit()\n            return True\n\n        except Exception as e:\n            self.logger.error(f\"Error actualizando volumen {volume.id_volume}: {e}\")\n            self.session.rollback()\n            return False\n\n    def _sync_volume_issues(self, volume: Volume):\n        \"\"\"Sincronizar issues del volumen con ComicVine\"\"\"\n\n        # Obtener todos los issues del volumen desde ComicVine\n        all_issues = []\n        offset = 0\n        limit = 100\n\n        while True:\n            issues_batch = self.cv_client.get_volume_issues(\n                volume.id_comicvine,\n                limit=limit,\n                offset=offset\n            )\n\n            if not issues_batch:\n                break\n\n            all_issues.extend(issues_batch)\n\n            if len(issues_batch) &lt; limit:\n                break\n\n            offset += limit\n\n        # Actualizar cantidad de issues en el volumen\n        volume.cantidad_numeros = len(all_issues)\n\n        # Para cada issue, verificar si existe ComicbookInfo\n        for issue_data in all_issues:\n            issue_comicvine_id = issue_data.get('id')\n            if not issue_comicvine_id:\n                continue\n\n            # Buscar ComicbookInfo existente\n            existing_info = self.session.query(ComicbookInfo).filter(\n                ComicbookInfo.id_comicvine == issue_comicvine_id\n            ).first()\n\n            if existing_info:\n                # Actualizar informaci\u00f3n existente\n                existing_info.update_from_comicvine(issue_data)\n            else:\n                # Crear nueva entrada solo si hay comics f\u00edsicos correspondientes\n                # (esto evita crear entradas hu\u00e9rfanas)\n                # La creaci\u00f3n se har\u00e1 cuando se catalogue un comic f\u00edsico\n                pass\n\n    def batch_catalog_uncataloged_comics(\n        self,\n        batch_size: int = 50,\n        confidence_threshold: float = 0.7,\n        progress_callback=None\n    ) -&gt; Dict[str, int]:\n        \"\"\"Catalogar lote de comics sin catalogar\"\"\"\n\n        uncataloged_comics = self.comic_repo.get_uncataloged_comics()\n        total_comics = len(uncataloged_comics)\n\n        results = {\n            'processed': 0,\n            'cataloged': 0,\n            'failed': 0,\n            'skipped': 0\n        }\n\n        for i, comic in enumerate(uncataloged_comics):\n            try:\n                if progress_callback:\n                    progress_callback(i + 1, total_comics, comic.filename)\n\n                # Intentar catalogar\n                comic_info = self.catalog_comic_from_filename(\n                    comic,\n                    confidence_threshold\n                )\n\n                if comic_info:\n                    results['cataloged'] += 1\n                else:\n                    results['skipped'] += 1\n\n                results['processed'] += 1\n\n                # Commit cada lote\n                if results['processed'] % batch_size == 0:\n                    self.session.commit()\n\n                # Rate limiting\n                time.sleep(0.5)\n\n            except Exception as e:\n                self.logger.error(f\"Error catalogando {comic.filename}: {e}\")\n                results['failed'] += 1\n                self.session.rollback()\n\n        # Commit final\n        try:\n            self.session.commit()\n        except Exception as e:\n            self.logger.error(f\"Error en commit final: {e}\")\n            self.session.rollback()\n\n        return results\n</code></pre> <p>\u00bfQuieres conocer m\u00e1s sobre la configuraci\u00f3n? \ud83d\udc49 Configuraci\u00f3n</p>"},{"location":"desarrollo/arquitectura/","title":"Arquitectura del Sistema","text":"<p>Babelcomics4 est\u00e1 dise\u00f1ado con una arquitectura modular y escalable que separa claramente la l\u00f3gica de negocio, el acceso a datos y la presentaci\u00f3n.</p>"},{"location":"desarrollo/arquitectura/#arquitectura-general","title":"\ud83c\udfd7\ufe0f Arquitectura General","text":""},{"location":"desarrollo/arquitectura/#diagrama-de-capas","title":"Diagrama de Capas","text":"<pre><code>graph TB\n    subgraph \"Presentaci\u00f3n\"\n        A[GTK4/libadwaita UI]\n        B[Navegaci\u00f3n y Vistas]\n        C[Componentes Reutilizables]\n    end\n\n    subgraph \"L\u00f3gica de Negocio\"\n        D[Gestores de Aplicaci\u00f3n]\n        E[Servicios ComicVine]\n        F[Procesadores de Im\u00e1genes]\n    end\n\n    subgraph \"Acceso a Datos\"\n        G[Repositorios]\n        H[Modelos SQLAlchemy]\n        I[Migraciones Alembic]\n    end\n\n    subgraph \"Persistencia\"\n        J[SQLite Database]\n        K[Sistema de Archivos]\n        L[Cache de Thumbnails]\n    end\n\n    A --&gt; D\n    B --&gt; D\n    C --&gt; D\n    D --&gt; G\n    E --&gt; G\n    F --&gt; K\n    G --&gt; H\n    H --&gt; J\n    G --&gt; I\n    I --&gt; J\n    F --&gt; L\n</code></pre>"},{"location":"desarrollo/arquitectura/#principios-de-diseno","title":"Principios de Dise\u00f1o","text":""},{"location":"desarrollo/arquitectura/#1-separacion-de-responsabilidades","title":"1. Separaci\u00f3n de Responsabilidades","text":"<ul> <li>UI: Solo manejo de interfaz y eventos</li> <li>L\u00f3gica: Procesamiento y reglas de negocio</li> <li>Datos: Acceso y persistencia</li> </ul>"},{"location":"desarrollo/arquitectura/#2-inversion-de-dependencias","title":"2. Inversi\u00f3n de Dependencias","text":"<ul> <li>Las capas superiores dependen de abstracciones</li> <li>Uso de patrones Repository y Service</li> </ul>"},{"location":"desarrollo/arquitectura/#3-modularidad","title":"3. Modularidad","text":"<ul> <li>Componentes independientes y reutilizables</li> <li>Bajo acoplamiento entre m\u00f3dulos</li> </ul>"},{"location":"desarrollo/arquitectura/#4-escalabilidad","title":"4. Escalabilidad","text":"<ul> <li>Threading para operaciones pesadas</li> <li>Cache eficiente de recursos</li> <li>Paginaci\u00f3n de datos</li> </ul>"},{"location":"desarrollo/arquitectura/#estructura-del-proyecto","title":"\ud83d\udcc1 Estructura del Proyecto","text":""},{"location":"desarrollo/arquitectura/#organizacion-de-directorios","title":"Organizaci\u00f3n de Directorios","text":"<pre><code>Babelcomics4/\n\u251c\u2500\u2500 \ud83d\udcc4 Babelcomic4.py                 # Aplicaci\u00f3n principal y UI\n\u251c\u2500\u2500 \ud83d\udcc1 entidades/                     # Modelos de dominio\n\u2502   \u251c\u2500\u2500 __init__.py                   # Configuraci\u00f3n SQLAlchemy\n\u2502   \u251c\u2500\u2500 comicbook_model.py            # Modelo Comic\n\u2502   \u251c\u2500\u2500 comicbook_info_model.py       # Modelo Issue/Metadata\n\u2502   \u251c\u2500\u2500 comicbook_info_cover_model.py # Modelo Cover\n\u2502   \u251c\u2500\u2500 volume_model.py               # Modelo Volume\n\u2502   \u2514\u2500\u2500 publisher_model.py            # Modelo Publisher\n\u251c\u2500\u2500 \ud83d\udcc1 repositories/                  # Capa de acceso a datos\n\u2502   \u251c\u2500\u2500 base_repository_gtk4.py       # Repositorio base\n\u2502   \u251c\u2500\u2500 comicbook_repository_gtk4.py  # Repositorio Comics\n\u2502   \u251c\u2500\u2500 volume_repository.py          # Repositorio Volumes\n\u2502   \u2514\u2500\u2500 publisher_repository.py       # Repositorio Publishers\n\u251c\u2500\u2500 \ud83d\udcc1 helpers/                       # Servicios y utilidades\n\u2502   \u251c\u2500\u2500 comicvine_client.py          # Cliente API ComicVine\n\u2502   \u2514\u2500\u2500 comicvine_helpers.py         # Utilidades ComicVine\n\u251c\u2500\u2500 \ud83d\udcc4 db_manager.py                 # Gestor de base de datos\n\u251c\u2500\u2500 \ud83d\udcc4 thumbnail_generator.py        # Generador de thumbnails\n\u251c\u2500\u2500 \ud83d\udcc4 comic_cards.py               # Componentes UI Cards\n\u251c\u2500\u2500 \ud83d\udcc4 filter_dialog.py             # Di\u00e1logos de filtro\n\u251c\u2500\u2500 \ud83d\udcc4 volume_detail_page.py        # P\u00e1gina detalle volumen\n\u251c\u2500\u2500 \ud83d\udcc4 selectable_card.py           # Componente selecci\u00f3n\n\u251c\u2500\u2500 \ud83d\udcc1 data/                        # Datos y cache\n\u2502   \u251c\u2500\u2500 babelcomics.db              # Base de datos SQLite\n\u2502   \u2514\u2500\u2500 thumbnails/                 # Cache de im\u00e1genes\n\u2514\u2500\u2500 \ud83d\udcc1 images/                      # Recursos est\u00e1ticos\n</code></pre>"},{"location":"desarrollo/arquitectura/#responsabilidades-por-modulo","title":"Responsabilidades por M\u00f3dulo","text":""},{"location":"desarrollo/arquitectura/#capa-de-presentacion","title":"\ud83c\udfa8 Capa de Presentaci\u00f3n","text":"<pre><code># Babelcomic4.py - Aplicaci\u00f3n principal\nclass ComicManagerApp(Adw.Application):\n    \"\"\"Aplicaci\u00f3n principal GTK4/libadwaita\"\"\"\n    - Gesti\u00f3n de ventanas y navegaci\u00f3n\n    - Manejo de eventos de usuario\n    - Coordinaci\u00f3n entre componentes UI\n\n# comic_cards.py - Componentes UI\nclass ComicCard, VolumeCard, PublisherCard:\n    \"\"\"Cards reutilizables para diferentes entidades\"\"\"\n    - Presentaci\u00f3n visual de datos\n    - Interacciones b\u00e1sicas (click, hover)\n    - Carga de thumbnails\n\n# filter_dialog.py - Di\u00e1logos especializados\nclass AdvancedFilterDialog:\n    \"\"\"Interfaz de filtros avanzados\"\"\"\n    - Configuraci\u00f3n de criterios de filtrado\n    - Validaci\u00f3n de entrada\n    - Comunicaci\u00f3n con l\u00f3gica de negocio\n</code></pre>"},{"location":"desarrollo/arquitectura/#capa-de-logica-de-negocio","title":"\ud83e\udde0 Capa de L\u00f3gica de Negocio","text":"<pre><code># db_manager.py - Gesti\u00f3n de datos\nclass DatabaseManager:\n    \"\"\"Coordinador de operaciones de datos\"\"\"\n    - Inicializaci\u00f3n de base de datos\n    - Transacciones complejas\n    - Migraciones de esquema\n\n# thumbnail_generator.py - Procesamiento de im\u00e1genes\nclass ThumbnailGenerator:\n    \"\"\"Generaci\u00f3n y cache de thumbnails\"\"\"\n    - Extracci\u00f3n de im\u00e1genes de comics\n    - Redimensionado y optimizaci\u00f3n\n    - Cache inteligente\n\n# helpers/comicvine_client.py - Integraci\u00f3n externa\nclass ComicVineClient:\n    \"\"\"Cliente para API ComicVine\"\"\"\n    - Autenticaci\u00f3n y rate limiting\n    - B\u00fasqueda y descarga de metadata\n    - Manejo de errores y reintentos\n</code></pre>"},{"location":"desarrollo/arquitectura/#capa-de-acceso-a-datos","title":"\ud83d\udcbe Capa de Acceso a Datos","text":"<pre><code># repositories/base_repository_gtk4.py\nclass BaseRepository:\n    \"\"\"Repositorio base con funcionalidad com\u00fan\"\"\"\n    - Operaciones CRUD b\u00e1sicas\n    - Sistema de filtrado\n    - Paginaci\u00f3n y ordenamiento\n\n# repositories/comicbook_repository_gtk4.py\nclass ComicbookRepository(BaseRepository):\n    \"\"\"Repositorio espec\u00edfico para comics\"\"\"\n    - Consultas complejas de comics\n    - Filtros especializados (clasificaci\u00f3n, calidad)\n    - Joins con entidades relacionadas\n</code></pre>"},{"location":"desarrollo/arquitectura/#modelos-de-datos","title":"\ud83d\uddc3\ufe0f Modelos de Datos","text":""},{"location":"desarrollo/arquitectura/#arquitectura-de-entidades","title":"Arquitectura de Entidades","text":"<p>El sistema utiliza SQLAlchemy ORM con un dise\u00f1o h\u00edbrido que combina datos locales y externos:</p>"},{"location":"desarrollo/arquitectura/#entidades-principales","title":"\ud83d\udcca Entidades Principales","text":"<pre><code># entidades/volume_model.py\nclass Volume(Base):\n    \"\"\"Volumen: Serie o colecci\u00f3n de comics\"\"\"\n    __tablename__ = 'volumens'\n\n    id_volume = Column(Integer, primary_key=True)           # ID interno\n    nombre = Column(String, nullable=False)                 # Nombre de la serie\n    anio_inicio = Column(Integer)                          # A\u00f1o de inicio\n    cantidad_numeros = Column(Integer, default=0)          # N\u00fameros totales\n    id_comicvine = Column(Integer, nullable=True)          # ID externo ComicVine\n\n    # Relaciones\n    comicbookinfos = relationship(\"ComicbookInfo\", back_populates=\"volume\")\n    publisher = relationship(\"Publisher\", back_populates=\"volumes\")\n</code></pre> <pre><code># entidades/comicbook_info_model.py\nclass ComicbookInfo(Base):\n    \"\"\"Issue: N\u00famero individual de una serie\"\"\"\n    __tablename__ = 'comicbooks_info'\n\n    id_comicbook_info = Column(Integer, primary_key=True)   # ID interno\n    id_volume = Column(Integer, ForeignKey('volumens.id_volume'))  # Relaci\u00f3n con volumen\n    numero = Column(String, nullable=False)                 # N\u00famero del issue\n    titulo = Column(String, default='')                    # T\u00edtulo del issue\n    fecha_tapa = Column(Integer)                           # A\u00f1o de publicaci\u00f3n\n    resumen = Column(Text, default='')                     # Descripci\u00f3n\n\n    # NOTA: NO tiene id_comicvine - se identifica por n\u00famero dentro del volumen\n\n    # Relaciones\n    volume = relationship(\"Volume\", back_populates=\"comicbookinfos\")\n    portadas = relationship(\"ComicbookInfoCover\", back_populates=\"comic_info\")\n    owned_comics = relationship(\"Comicbook\", back_populates=\"comicbook_info\")\n</code></pre>"},{"location":"desarrollo/arquitectura/#estrategia-de-integracion-comicvine","title":"\ud83d\udd17 Estrategia de Integraci\u00f3n ComicVine","text":"<p>Filosof\u00eda del Sistema: - \u2705 Vol\u00famenes locales: <code>id_comicvine = NULL</code> \u2192 Creados manualmente, control total del usuario - \u2705 Vol\u00famenes de ComicVine: <code>id_comicvine != NULL</code> \u2192 Sincronizables con API externa</p> <p>Flujo de Relaciones: <pre><code>graph LR\n    A[ComicbookInfo] --&gt;|id_volume| B[Volume]\n    B --&gt;|id_comicvine| C[ComicVine API]\n    C --&gt;|sync data| B\n\n    B1[Volume Local&lt;br/&gt;id_comicvine=NULL] --&gt; D[Control Manual]\n    B2[Volume ComicVine&lt;br/&gt;id_comicvine=12345] --&gt; E[Auto-sync]\n</code></pre></p>"},{"location":"desarrollo/arquitectura/#tipos-de-volumenes","title":"\ud83d\udccb Tipos de Vol\u00famenes","text":"<p>1. Vol\u00famenes de ComicVine <pre><code>-- Ejemplo: Serie oficial catalogada\nINSERT INTO volumens (nombre, id_comicvine, anio_inicio)\nVALUES ('Batman (2016)', 91988, 2016);\n\n-- Issues se sincronizan autom\u00e1ticamente por n\u00famero\nINSERT INTO comicbooks_info (id_volume, numero, titulo)\nVALUES (1, '1', 'I Am Gotham, Part One');\n</code></pre></p> <p>2. Vol\u00famenes Locales <pre><code>-- Ejemplo: Comic indie no catalogado\nINSERT INTO volumens (nombre, id_comicvine, anio_inicio)\nVALUES ('Mi Webcomic Favorito', NULL, 2024);\n\n-- Issues creados manualmente\nINSERT INTO comicbooks_info (id_volume, numero, titulo)\nVALUES (2, '1', 'Primer Episodio');\n</code></pre></p>"},{"location":"desarrollo/arquitectura/#ventajas-de-la-arquitectura","title":"\ud83c\udfaf Ventajas de la Arquitectura","text":"<p>Para Desarrolladores: - \u2705 Relaciones simples y predecibles - \u2705 Queries eficientes (JOIN por id_volume) - \u2705 Extensibilidad sin romper compatibilidad</p> <p>Para Usuarios: - \u2705 Comics oficiales con metadata autom\u00e1tica - \u2705 Comics personales con control total - \u2705 Coexistencia sin conflictos - \u2705 Migraci\u00f3n gradual posible</p>"},{"location":"desarrollo/arquitectura/#operaciones-de-sincronizacion","title":"\ud83d\udd04 Operaciones de Sincronizaci\u00f3n","text":"<pre><code>def sync_volume_from_comicvine(volume):\n    \"\"\"Sincronizar volumen que tiene id_comicvine\"\"\"\n    if not volume.id_comicvine:\n        return  # Solo sincronizar vol\u00famenes de ComicVine\n\n    # 1. Obtener datos actualizados del volumen\n    volume_data = client.get_volume_details(volume.id_comicvine)\n\n    # 2. Obtener lista de issues desde ComicVine\n    cv_issues = client.get_volume_issues(volume.id_comicvine)\n\n    # 3. Crear issues faltantes (match por n\u00famero)\n    for cv_issue in cv_issues:\n        issue_number = str(cv_issue.get('issue_number', ''))\n\n        existing = session.query(ComicbookInfo).filter_by(\n            id_volume=volume.id_volume,\n            numero=issue_number\n        ).first()\n\n        if not existing:\n            create_issue_from_comicvine(volume, cv_issue)\n\ndef find_issue_cover(volume, issue):\n    \"\"\"Encontrar portada de issue usando ComicVine\"\"\"\n    if not volume.id_comicvine:\n        return None  # Volumen local, sin sincronizaci\u00f3n\n\n    # Obtener issues de ComicVine y hacer match por n\u00famero\n    cv_issues = client.get_volume_issues(volume.id_comicvine)\n\n    for cv_issue in cv_issues:\n        if str(cv_issue.get('issue_number', '')) == issue.numero:\n            return cv_issue.get('image', {}).get('original_url')\n\n    return None\n</code></pre>"},{"location":"desarrollo/arquitectura/#flujos-de-datos","title":"\ud83d\udd04 Flujos de Datos","text":""},{"location":"desarrollo/arquitectura/#flujo-de-visualizacion","title":"Flujo de Visualizaci\u00f3n","text":"<pre><code>sequenceDiagram\n    participant UI as UI Components\n    participant App as ComicManagerApp\n    participant Repo as Repository\n    participant DB as Database\n\n    UI-&gt;&gt;App: User requests data\n    App-&gt;&gt;Repo: get_filtered_comics()\n    Repo-&gt;&gt;DB: SELECT with filters\n    DB--&gt;&gt;Repo: Raw data\n    Repo--&gt;&gt;App: Entity objects\n    App-&gt;&gt;UI: Update views\n    UI-&gt;&gt;UI: Render cards\n</code></pre>"},{"location":"desarrollo/arquitectura/#flujo-de-comicvine","title":"Flujo de ComicVine","text":"<pre><code>sequenceDiagram\n    participant UI as Volume Detail\n    participant App as ComicManagerApp\n    participant CV as ComicVine Client\n    participant TG as Thumbnail Generator\n    participant DB as Database\n\n    UI-&gt;&gt;App: Update from ComicVine\n    App-&gt;&gt;CV: get_volume_issues()\n    CV--&gt;&gt;App: Issue metadata\n    App-&gt;&gt;DB: Create new issues\n    App-&gt;&gt;TG: Download covers\n    TG-&gt;&gt;TG: Process images\n    TG--&gt;&gt;App: Thumbnails ready\n    App-&gt;&gt;UI: Refresh view\n</code></pre>"},{"location":"desarrollo/arquitectura/#flujo-de-threading","title":"Flujo de Threading","text":"<pre><code>graph LR\n    A[UI Thread] --&gt; B[Request Operation]\n    B --&gt; C[Background Thread]\n    C --&gt; D[Heavy Processing]\n    D --&gt; E[GLib.idle_add]\n    E --&gt; F[UI Update]\n    F --&gt; A\n</code></pre>"},{"location":"desarrollo/arquitectura/#patrones-de-diseno","title":"\ud83c\udfaf Patrones de Dise\u00f1o","text":""},{"location":"desarrollo/arquitectura/#1-repository-pattern","title":"1. Repository Pattern","text":""},{"location":"desarrollo/arquitectura/#abstraccion-de-datos","title":"Abstracci\u00f3n de Datos","text":"<pre><code>class BaseRepository:\n    \"\"\"Patr\u00f3n Repository para abstracci\u00f3n de datos\"\"\"\n\n    def obtener_pagina(self, modelo, pagina, tamanio, orden, direccion):\n        \"\"\"Paginaci\u00f3n gen\u00e9rica\"\"\"\n        query = self.session.query(modelo)\n        query = self._apply_filters(query, modelo)\n        query = self._apply_sorting(query, modelo, orden, direccion)\n\n        offset = pagina * tamanio\n        return query.offset(offset).limit(tamanio).all()\n\n    def filtrar(self, **kwargs):\n        \"\"\"Sistema de filtrado flexible\"\"\"\n        self.filtros.update(kwargs)\n</code></pre>"},{"location":"desarrollo/arquitectura/#ventajas","title":"Ventajas","text":"<ul> <li>\u2705 Separaci\u00f3n clara entre l\u00f3gica y datos</li> <li>\u2705 Facilita testing con mocks</li> <li>\u2705 Reutilizaci\u00f3n de consultas comunes</li> <li>\u2705 Abstracci\u00f3n del ORM subyacente</li> </ul>"},{"location":"desarrollo/arquitectura/#2-model-view-controller-mvc","title":"2. Model-View-Controller (MVC)","text":""},{"location":"desarrollo/arquitectura/#separacion-de-responsabilidades","title":"Separaci\u00f3n de Responsabilidades","text":"<pre><code># Model (entidades/)\nclass Comicbook(Base):\n    \"\"\"Modelo de datos puro\"\"\"\n    # Solo definici\u00f3n de estructura y relaciones\n\n# View (UI Components)\nclass ComicCard(Gtk.Widget):\n    \"\"\"Vista pura, solo presentaci\u00f3n\"\"\"\n    # Solo l\u00f3gica de rendering y eventos b\u00e1sicos\n\n# Controller (ComicManagerApp)\nclass ComicManagerApp:\n    \"\"\"Controlador, coordina Model y View\"\"\"\n    # L\u00f3gica de aplicaci\u00f3n, coordina operaciones\n</code></pre>"},{"location":"desarrollo/arquitectura/#3-observer-pattern","title":"3. Observer Pattern","text":""},{"location":"desarrollo/arquitectura/#actualizacion-reactiva","title":"Actualizaci\u00f3n Reactiva","text":"<pre><code>class ThumbnailGenerator:\n    \"\"\"Observable para eventos de thumbnails\"\"\"\n\n    def request_thumbnail(self, path, item_id, item_type, callback):\n        \"\"\"Patr\u00f3n callback para notificaci\u00f3n as\u00edncrona\"\"\"\n        # Procesar en background\n        # Notificar via callback cuando est\u00e9 listo\n\nclass ComicCard:\n    \"\"\"Observer de eventos de thumbnails\"\"\"\n\n    def on_thumbnail_ready(self, thumbnail_path):\n        \"\"\"Callback cuando thumbnail est\u00e1 listo\"\"\"\n        GLib.idle_add(self.update_image, thumbnail_path)\n</code></pre>"},{"location":"desarrollo/arquitectura/#4-factory-pattern","title":"4. Factory Pattern","text":""},{"location":"desarrollo/arquitectura/#creacion-de-cards","title":"Creaci\u00f3n de Cards","text":"<pre><code>class CardFactory:\n    \"\"\"Factory para crear cards seg\u00fan tipo de entidad\"\"\"\n\n    @staticmethod\n    def create_card(item, item_type, thumbnail_generator):\n        if item_type == \"comics\":\n            return ComicCard(item, thumbnail_generator)\n        elif item_type == \"volumes\":\n            return VolumeCard(item, thumbnail_generator)\n        elif item_type == \"publishers\":\n            return PublisherCard(item, thumbnail_generator)\n        else:\n            raise ValueError(f\"Unknown item type: {item_type}\")\n</code></pre>"},{"location":"desarrollo/arquitectura/#gestion-de-concurrencia","title":"\ud83e\uddf5 Gesti\u00f3n de Concurrencia","text":""},{"location":"desarrollo/arquitectura/#threading-model","title":"Threading Model","text":""},{"location":"desarrollo/arquitectura/#hilos-de-la-aplicacion","title":"Hilos de la Aplicaci\u00f3n","text":"<pre><code># 1. Main UI Thread (GTK)\n# - Manejo de eventos UI\n# - Renderizado de componentes\n# - Coordinaci\u00f3n general\n\n# 2. Thumbnail Generation Thread\n# - Procesamiento de im\u00e1genes\n# - Extracci\u00f3n de p\u00e1ginas de comics\n# - Cache de thumbnails\n\n# 3. ComicVine API Threads (Pool)\n# - Requests HTTP concurrentes\n# - Descarga de metadata\n# - Descarga de im\u00e1genes\n</code></pre>"},{"location":"desarrollo/arquitectura/#sincronizacion","title":"Sincronizaci\u00f3n","text":"<pre><code># Comunicaci\u00f3n Thread-Safe\nimport queue\nfrom threading import ThreadPoolExecutor\n\nclass ThumbnailGenerator:\n    def __init__(self):\n        self.thumbnail_queue = queue.Queue()\n        self.executor = ThreadPoolExecutor(max_workers=3)\n\n    def request_thumbnail(self, path, callback):\n        future = self.executor.submit(self._generate_thumbnail, path)\n        future.add_done_callback(\n            lambda f: GLib.idle_add(callback, f.result())\n        )\n</code></pre>"},{"location":"desarrollo/arquitectura/#gestion-de-estado","title":"Gesti\u00f3n de Estado","text":""},{"location":"desarrollo/arquitectura/#estado-de-la-aplicacion","title":"Estado de la Aplicaci\u00f3n","text":"<pre><code>class ApplicationState:\n    \"\"\"Estado centralizado de la aplicaci\u00f3n\"\"\"\n\n    def __init__(self):\n        self.current_view = \"comics\"          # Vista activa\n        self.current_filters = {}             # Filtros aplicados\n        self.search_text = \"\"                 # Texto de b\u00fasqueda\n        self.items_data = []                  # Datos cargados\n        self.loaded_items = 0                 # Paginaci\u00f3n\n        self.selection_mode = False           # Modo selecci\u00f3n\n\n    def clear_filters(self):\n        \"\"\"Limpiar filtros manteniendo vista\"\"\"\n        self.current_filters = {}\n        self.search_text = \"\"\n</code></pre>"},{"location":"desarrollo/arquitectura/#extensibilidad","title":"\ud83d\udd0c Extensibilidad","text":""},{"location":"desarrollo/arquitectura/#puntos-de-extension","title":"Puntos de Extensi\u00f3n","text":""},{"location":"desarrollo/arquitectura/#1-nuevos-tipos-de-cards","title":"1. Nuevos Tipos de Cards","text":"<pre><code>class NewEntityCard(SelectableCard):\n    \"\"\"Nueva card para tipo de entidad personalizada\"\"\"\n\n    def __init__(self, item, thumbnail_generator):\n        super().__init__()\n        self.setup_ui()\n\n    def request_thumbnail(self):\n        \"\"\"Implementar l\u00f3gica espec\u00edfica de thumbnails\"\"\"\n        pass\n</code></pre>"},{"location":"desarrollo/arquitectura/#2-nuevos-repositorios","title":"2. Nuevos Repositorios","text":"<pre><code>class CustomRepository(BaseRepository):\n    \"\"\"Repositorio para nueva entidad\"\"\"\n\n    def __init__(self, session):\n        super().__init__(session)\n\n    def custom_query(self, **kwargs):\n        \"\"\"Consultas espec\u00edficas del dominio\"\"\"\n        pass\n</code></pre>"},{"location":"desarrollo/arquitectura/#3-nuevos-servicios-externos","title":"3. Nuevos Servicios Externos","text":"<pre><code>class AlternativeAPIClient:\n    \"\"\"Cliente para API alternativa a ComicVine\"\"\"\n\n    def search_volumes(self, query):\n        \"\"\"Implementar b\u00fasqueda en API alternativa\"\"\"\n        pass\n</code></pre>"},{"location":"desarrollo/arquitectura/#configurabilidad","title":"Configurabilidad","text":"<pre><code># config.py - Configuraci\u00f3n centralizada\nclass Config:\n    DATABASE_URL = \"sqlite:///data/babelcomics.db\"\n    THUMBNAIL_SIZE = (200, 300)\n    COMICVINE_API_URL = \"https://comicvine.gamespot.com/api\"\n    CACHE_EXPIRY_DAYS = 30\n    MAX_CONCURRENT_DOWNLOADS = 5\n</code></pre>"},{"location":"desarrollo/arquitectura/#metricas-y-monitoreo","title":"\ud83d\udcca M\u00e9tricas y Monitoreo","text":""},{"location":"desarrollo/arquitectura/#logging","title":"Logging","text":"<pre><code>import logging\n\n# Configuraci\u00f3n de logging por m\u00f3dulo\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n)\n\n# Loggers espec\u00edficos\ndb_logger = logging.getLogger('database')\napi_logger = logging.getLogger('comicvine')\nui_logger = logging.getLogger('ui')\n</code></pre>"},{"location":"desarrollo/arquitectura/#metricas-de-performance","title":"M\u00e9tricas de Performance","text":"<pre><code>import time\nimport functools\n\ndef monitor_performance(func):\n    \"\"\"Decorator para monitorear performance\"\"\"\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        start_time = time.time()\n        result = func(*args, **kwargs)\n        execution_time = time.time() - start_time\n\n        logger.info(f\"{func.__name__} executed in {execution_time:.2f}s\")\n        return result\n    return wrapper\n</code></pre>"},{"location":"desarrollo/arquitectura/#manejo-de-errores","title":"\ud83d\udee1\ufe0f Manejo de Errores","text":""},{"location":"desarrollo/arquitectura/#estrategia-de-errores","title":"Estrategia de Errores","text":"<pre><code># Jerarqu\u00eda de excepciones\nclass BabelcomicsError(Exception):\n    \"\"\"Base exception para errores de la aplicaci\u00f3n\"\"\"\n    pass\n\nclass DatabaseError(BabelcomicsError):\n    \"\"\"Errores relacionados con base de datos\"\"\"\n    pass\n\nclass ComicVineError(BabelcomicsError):\n    \"\"\"Errores de integraci\u00f3n ComicVine\"\"\"\n    pass\n\nclass ThumbnailError(BabelcomicsError):\n    \"\"\"Errores de generaci\u00f3n de thumbnails\"\"\"\n    pass\n</code></pre>"},{"location":"desarrollo/arquitectura/#recuperacion-graceful","title":"Recuperaci\u00f3n Graceful","text":"<pre><code>def safe_operation(func, fallback=None, log_error=True):\n    \"\"\"Wrapper para operaciones que pueden fallar\"\"\"\n    try:\n        return func()\n    except Exception as e:\n        if log_error:\n            logger.error(f\"Error in {func.__name__}: {e}\")\n        return fallback\n</code></pre> <p>\u00bfQuieres profundizar en los modelos de datos? \ud83d\udc49 Modelos de Datos</p>"},{"location":"desarrollo/modelos/","title":"Modelos de Datos","text":"<p>Los modelos de datos de Babelcomics4 est\u00e1n dise\u00f1ados usando SQLAlchemy ORM, proporcionando una estructura robusta y escalable para gestionar comics, vol\u00famenes, editoriales y metadatos relacionados con una arquitectura orientada a objetos.</p>"},{"location":"desarrollo/modelos/#arquitectura-de-modelos","title":"\ud83c\udfd7\ufe0f Arquitectura de Modelos","text":""},{"location":"desarrollo/modelos/#jerarquia-de-entidades","title":"Jerarqu\u00eda de Entidades","text":"<pre><code>graph TB\n    A[Base] --&gt; B[Comicbook]\n    A --&gt; C[ComicbookInfo]\n    A --&gt; D[Volume]\n    A --&gt; E[Publisher]\n    A --&gt; F[Person]\n    A --&gt; G[Character]\n\n    B --&gt; H[ComicbookInfoCover]\n    C --&gt; H\n    C --&gt; I[PersonComicbookInfo]\n    F --&gt; I\n    C --&gt; J[CharacterComicbookInfo]\n    G --&gt; J\n\n    D --&gt; K[VolumeCharacter]\n    G --&gt; K\n\n    E --&gt; D\n    D --&gt; C\n    C --&gt; B\n</code></pre>"},{"location":"desarrollo/modelos/#base-de-modelos","title":"Base de Modelos","text":""},{"location":"desarrollo/modelos/#clase-base-abstracta","title":"Clase Base Abstracta","text":"<pre><code>from sqlalchemy import Column, String, DateTime, Boolean, Integer, Float, Text, Date, ForeignKey\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import relationship, Session\nfrom sqlalchemy.sql import func\nimport uuid\nfrom datetime import datetime\nfrom typing import Optional, List, Dict, Any\n\nBase = declarative_base()\n\nclass BaseModel(Base):\n    \"\"\"Clase base abstracta para todos los modelos\"\"\"\n\n    __abstract__ = True\n\n    # Metadatos comunes\n    created_at = Column(DateTime, default=datetime.utcnow, nullable=False)\n    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow, nullable=False)\n\n    @classmethod\n    def generate_uuid(cls) -&gt; str:\n        \"\"\"Generar UUID \u00fanico para claves primarias\"\"\"\n        return str(uuid.uuid4())\n\n    def to_dict(self, include_relationships: bool = False) -&gt; Dict[str, Any]:\n        \"\"\"Convertir modelo a diccionario\"\"\"\n        result = {}\n\n        # Atributos b\u00e1sicos\n        for column in self.__table__.columns:\n            value = getattr(self, column.name)\n            if isinstance(value, datetime):\n                value = value.isoformat()\n            elif isinstance(value, date):\n                value = value.isoformat()\n            result[column.name] = value\n\n        # Relaciones si se solicitan\n        if include_relationships:\n            for relationship_name in self.__mapper__.relationships.keys():\n                relationship_value = getattr(self, relationship_name)\n                if relationship_value is not None:\n                    if isinstance(relationship_value, list):\n                        result[relationship_name] = [\n                            item.to_dict(include_relationships=False)\n                            for item in relationship_value\n                        ]\n                    else:\n                        result[relationship_name] = relationship_value.to_dict(\n                            include_relationships=False\n                        )\n\n        return result\n\n    def update_from_dict(self, data: Dict[str, Any], exclude_fields: List[str] = None):\n        \"\"\"Actualizar modelo desde diccionario\"\"\"\n        exclude_fields = exclude_fields or ['id', 'created_at', 'updated_at']\n\n        for key, value in data.items():\n            if key not in exclude_fields and hasattr(self, key):\n                setattr(self, key, value)\n\n        self.updated_at = datetime.utcnow()\n\n    def __repr__(self):\n        \"\"\"Representaci\u00f3n string del modelo\"\"\"\n        attrs = []\n        for key in ['id', 'name', 'title', 'filename']:\n            if hasattr(self, key):\n                value = getattr(self, key)\n                if value is not None:\n                    attrs.append(f\"{key}='{value}'\")\n                    break\n\n        return f\"&lt;{self.__class__.__name__}({', '.join(attrs)})&gt;\"\n</code></pre>"},{"location":"desarrollo/modelos/#modelos-principales","title":"\ud83d\udcda Modelos Principales","text":""},{"location":"desarrollo/modelos/#modelo-comicbook","title":"Modelo Comicbook","text":""},{"location":"desarrollo/modelos/#entidad-principal-de-comics","title":"Entidad Principal de Comics","text":"<pre><code>class Comicbook(BaseModel):\n    \"\"\"Modelo principal para archivos de comics f\u00edsicos\"\"\"\n\n    __tablename__ = 'comicbooks'\n\n    # Clave primaria\n    id_comicbook = Column(String, primary_key=True, default=BaseModel.generate_uuid)\n\n    # Informaci\u00f3n del archivo f\u00edsico\n    path = Column(String, nullable=False, unique=True, index=True)\n    filename = Column(String, nullable=False, index=True)\n    tama\u00f1o = Column(Integer, nullable=True)  # Tama\u00f1o en bytes\n    checksum = Column(String, nullable=True)  # Hash MD5 del archivo\n\n    # Estado del comic\n    en_papelera = Column(Boolean, default=False, nullable=False, index=True)\n    calidad = Column(Integer, default=0, nullable=False, index=True)  # 0-5 estrellas\n    cantidad_adquirida = Column(Integer, default=1, nullable=False)  # Copias f\u00edsicas\n\n    # Metadatos de procesamiento\n    fecha_agregado = Column(DateTime, default=datetime.utcnow, nullable=False, index=True)\n    fecha_ultimo_acceso = Column(DateTime, nullable=True)\n    contador_lecturas = Column(Integer, default=0, nullable=False)\n\n    # Relaci\u00f3n con informaci\u00f3n catalogada (opcional)\n    id_comicbook_info = Column(\n        String,\n        ForeignKey('comicbooks_info.id_comicbook_info', ondelete='SET NULL'),\n        nullable=True,\n        index=True\n    )\n\n    # Relaciones\n    comic_info = relationship(\n        \"ComicbookInfo\",\n        back_populates=\"owned_comics\",\n        lazy='select'\n    )\n\n    # Propiedades calculadas\n    @property\n    def is_cataloged(self) -&gt; bool:\n        \"\"\"Verificar si el comic est\u00e1 catalogado con ComicVine\"\"\"\n        return (\n            self.id_comicbook_info is not None and\n            self.id_comicbook_info != '' and\n            self.comic_info is not None\n        )\n\n    @property\n    def file_exists(self) -&gt; bool:\n        \"\"\"Verificar si el archivo f\u00edsico existe en el disco\"\"\"\n        import os\n        return os.path.exists(self.path) if self.path else False\n\n    @property\n    def file_size_mb(self) -&gt; float:\n        \"\"\"Tama\u00f1o del archivo en megabytes\"\"\"\n        return round(self.tama\u00f1o / (1024 * 1024), 2) if self.tama\u00f1o else 0.0\n\n    @property\n    def file_extension(self) -&gt; str:\n        \"\"\"Extensi\u00f3n del archivo\"\"\"\n        import os\n        return os.path.splitext(self.filename)[1].lower() if self.filename else ''\n\n    @property\n    def display_title(self) -&gt; str:\n        \"\"\"T\u00edtulo para mostrar en la interfaz\"\"\"\n        if self.is_cataloged and self.comic_info:\n            return self.comic_info.display_title\n        return os.path.splitext(self.filename)[0] if self.filename else 'Unknown Comic'\n\n    @property\n    def has_physical_copies(self) -&gt; bool:\n        \"\"\"Verificar si hay copias f\u00edsicas del comic\"\"\"\n        return self.cantidad_adquirida &gt; 0\n\n    @property\n    def quality_stars(self) -&gt; str:\n        \"\"\"Representaci\u00f3n visual de la calidad en estrellas\"\"\"\n        filled_stars = '\u2605' * self.calidad\n        empty_stars = '\u2606' * (5 - self.calidad)\n        return filled_stars + empty_stars\n\n    # M\u00e9todos de negocio\n    def mark_as_read(self):\n        \"\"\"Marcar comic como le\u00eddo\"\"\"\n        self.fecha_ultimo_acceso = datetime.utcnow()\n        self.contador_lecturas += 1\n\n    def move_to_trash(self):\n        \"\"\"Mover comic a papelera\"\"\"\n        self.en_papelera = True\n        self.updated_at = datetime.utcnow()\n\n    def restore_from_trash(self):\n        \"\"\"Restaurar comic de papelera\"\"\"\n        self.en_papelera = False\n        self.updated_at = datetime.utcnow()\n\n    def set_quality(self, quality: int):\n        \"\"\"Establecer calidad del comic (0-5)\"\"\"\n        if 0 &lt;= quality &lt;= 5:\n            self.calidad = quality\n            self.updated_at = datetime.utcnow()\n        else:\n            raise ValueError(\"Quality must be between 0 and 5\")\n\n    def calculate_checksum(self) -&gt; str:\n        \"\"\"Calcular checksum MD5 del archivo\"\"\"\n        import hashlib\n\n        if not self.file_exists:\n            return None\n\n        hash_md5 = hashlib.md5()\n        try:\n            with open(self.path, \"rb\") as f:\n                for chunk in iter(lambda: f.read(4096), b\"\"):\n                    hash_md5.update(chunk)\n\n            self.checksum = hash_md5.hexdigest()\n            return self.checksum\n        except Exception as e:\n            print(f\"Error calculating checksum for {self.path}: {e}\")\n            return None\n\n    def validate_file(self) -&gt; Dict[str, bool]:\n        \"\"\"Validar integridad del archivo\"\"\"\n        validation = {\n            'exists': self.file_exists,\n            'readable': False,\n            'valid_format': False,\n            'checksum_valid': False\n        }\n\n        if validation['exists']:\n            try:\n                # Verificar legibilidad\n                with open(self.path, 'rb') as f:\n                    f.read(1)\n                validation['readable'] = True\n\n                # Verificar formato\n                valid_extensions = ['.cbz', '.cbr', '.pdf', '.zip', '.rar']\n                validation['valid_format'] = self.file_extension in valid_extensions\n\n                # Verificar checksum si existe\n                if self.checksum:\n                    current_checksum = self.calculate_checksum()\n                    validation['checksum_valid'] = current_checksum == self.checksum\n                else:\n                    validation['checksum_valid'] = True  # No checksum to validate\n\n            except Exception as e:\n                print(f\"Error validating file {self.path}: {e}\")\n\n        return validation\n\n    @classmethod\n    def create_from_file(cls, file_path: str, session: Session) -&gt; 'Comicbook':\n        \"\"\"Crear nuevo comic desde archivo\"\"\"\n        import os\n\n        if not os.path.exists(file_path):\n            raise FileNotFoundError(f\"File not found: {file_path}\")\n\n        # Verificar si ya existe\n        existing = session.query(cls).filter_by(path=file_path).first()\n        if existing:\n            return existing\n\n        # Crear nuevo comic\n        comic = cls(\n            path=file_path,\n            filename=os.path.basename(file_path),\n            tama\u00f1o=os.path.getsize(file_path)\n        )\n\n        # Calcular checksum\n        comic.calculate_checksum()\n\n        return comic\n</code></pre>"},{"location":"desarrollo/modelos/#modelo-comicbookinfo","title":"Modelo ComicbookInfo","text":""},{"location":"desarrollo/modelos/#informacion-catalogada-de-comicvine","title":"Informaci\u00f3n Catalogada de ComicVine","text":"<pre><code>class ComicbookInfo(BaseModel):\n    \"\"\"Informaci\u00f3n detallada del comic desde ComicVine\"\"\"\n\n    __tablename__ = 'comicbooks_info'\n\n    # Clave primaria\n    id_comicbook_info = Column(String, primary_key=True, default=BaseModel.generate_uuid)\n\n    # Informaci\u00f3n b\u00e1sica del issue\n    titulo = Column(String, nullable=False, index=True)\n    numero = Column(String, nullable=True, index=True)  # \"1\", \"1.1\", \"Annual 1\"\n    fecha_tapa = Column(Date, nullable=True, index=True)\n    fecha_venta = Column(Date, nullable=True)\n\n    # Contenido\n    resumen = Column(Text, nullable=True)\n    sinopsis = Column(Text, nullable=True)\n    paginas = Column(Integer, nullable=True)\n\n    # URLs y referencias externas\n    url_api_detalle = Column(String, nullable=True)\n    url_sitio_web = Column(String, nullable=True)\n    url_wiki = Column(String, nullable=True)\n\n    # M\u00e9tricas y valoraciones\n    calificacion = Column(Float, default=0.0, nullable=False)  # ComicVine rating\n    puntuacion_usuarios = Column(Float, nullable=True)\n    numero_votos = Column(Integer, default=0, nullable=False)\n\n    # Referencias a ComicVine (MEJORADO)\n    comicvine_id = Column(Integer, nullable=False, default=0)  # Actualizado para guardar siempre\n    ultima_sync_comicvine = Column(DateTime, nullable=True)\n\n    # Relaci\u00f3n con volumen\n    id_volume = Column(\n        String,\n        ForeignKey('volumens.id_volume', ondelete='CASCADE'),\n        nullable=True,\n        index=True\n    )\n\n    # Relaciones\n    volume = relationship(\"Volume\", back_populates=\"issues\", lazy='select')\n    owned_comics = relationship(\"Comicbook\", back_populates=\"comic_info\", lazy='select')\n    portadas = relationship(\n        \"ComicbookInfoCover\",\n        back_populates=\"comic_info\",\n        cascade=\"all, delete-orphan\",\n        lazy='select'\n    )\n    equipo_creativo = relationship(\n        \"PersonComicbookInfo\",\n        back_populates=\"comic_info\",\n        cascade=\"all, delete-orphan\",\n        lazy='select'\n    )\n    personajes = relationship(\n        \"CharacterComicbookInfo\",\n        back_populates=\"comic_info\",\n        cascade=\"all, delete-orphan\",\n        lazy='select'\n    )\n\n    # Propiedades calculadas\n    @property\n    def display_title(self) -&gt; str:\n        \"\"\"T\u00edtulo completo para mostrar\"\"\"\n        if self.numero:\n            return f\"{self.titulo} #{self.numero}\"\n        return self.titulo\n\n    @property\n    def year(self) -&gt; Optional[int]:\n        \"\"\"A\u00f1o de la fecha de tapa\"\"\"\n        return self.fecha_tapa.year if self.fecha_tapa else None\n\n    @property\n    def month_year(self) -&gt; Optional[str]:\n        \"\"\"Mes y a\u00f1o formateado\"\"\"\n        if self.fecha_tapa:\n            return self.fecha_tapa.strftime(\"%m/%Y\")\n        return None\n\n    @property\n    def has_cover_image(self) -&gt; bool:\n        \"\"\"Verificar si tiene imagen de portada\"\"\"\n        return len(self.portadas) &gt; 0\n\n    @property\n    def primary_cover_url(self) -&gt; Optional[str]:\n        \"\"\"URL de la portada principal\"\"\"\n        if self.portadas:\n            # Buscar portada principal o tomar la primera\n            primary = next((cover for cover in self.portadas if cover.es_principal), None)\n            if primary:\n                return primary.url_imagen\n            elif self.portadas:\n                return self.portadas[0].url_imagen\n        return None\n\n    @property\n    def publisher_name(self) -&gt; str:\n        \"\"\"Nombre de la editorial\"\"\"\n        if self.volume and self.volume.publisher:\n            return self.volume.publisher.nombre\n        return \"Unknown Publisher\"\n\n    @property\n    def volume_name(self) -&gt; str:\n        \"\"\"Nombre del volumen\"\"\"\n        if self.volume:\n            return self.volume.display_name\n        return \"Unknown Volume\"\n\n    @property\n    def creative_team_summary(self) -&gt; Dict[str, List[str]]:\n        \"\"\"Resumen del equipo creativo\"\"\"\n        team = {}\n        for person_comic in self.equipo_creativo:\n            role = person_comic.rol\n            if role not in team:\n                team[role] = []\n            team[role].append(person_comic.person.nombre)\n        return team\n\n    @property\n    def main_characters(self) -&gt; List[str]:\n        \"\"\"Lista de personajes principales\"\"\"\n        return [\n            char_comic.character.nombre\n            for char_comic in self.personajes\n            if char_comic.es_principal\n        ]\n\n    @property\n    def is_owned(self) -&gt; bool:\n        \"\"\"Verificar si se posee f\u00edsicamente\"\"\"\n        return len(self.owned_comics) &gt; 0\n\n    @property\n    def owned_copies_count(self) -&gt; int:\n        \"\"\"N\u00famero de copias f\u00edsicas pose\u00eddas\"\"\"\n        return sum(comic.cantidad_adquirida for comic in self.owned_comics)\n\n    # M\u00e9todos de negocio\n    def add_cover_image(self, url: str, is_primary: bool = False):\n        \"\"\"A\u00f1adir imagen de portada\"\"\"\n        if is_primary:\n            # Marcar otras portadas como no principales\n            for cover in self.portadas:\n                cover.es_principal = False\n\n        cover = ComicbookInfoCover(\n            url_imagen=url,\n            es_principal=is_primary,\n            comic_info=self\n        )\n        self.portadas.append(cover)\n\n    def add_creative_team_member(self, person: 'Person', role: str):\n        \"\"\"A\u00f1adir miembro del equipo creativo\"\"\"\n        person_comic = PersonComicbookInfo(\n            person=person,\n            comic_info=self,\n            rol=role\n        )\n        self.equipo_creativo.append(person_comic)\n\n    def add_character(self, character: 'Character', is_main: bool = False):\n        \"\"\"A\u00f1adir personaje que aparece en el comic\"\"\"\n        char_comic = CharacterComicbookInfo(\n            character=character,\n            comic_info=self,\n            es_principal=is_main\n        )\n        self.personajes.append(char_comic)\n\n    def update_from_comicvine(self, comicvine_data: Dict[str, Any]):\n        \"\"\"Actualizar informaci\u00f3n desde datos de ComicVine\"\"\"\n        # Mapeo de campos\n        field_mapping = {\n            'name': 'titulo',\n            'issue_number': 'numero',\n            'cover_date': 'fecha_tapa',\n            'store_date': 'fecha_venta',\n            'description': 'resumen',\n            'api_detail_url': 'url_api_detalle',\n            'site_detail_url': 'url_sitio_web',\n            'id': 'id_comicvine'\n        }\n\n        for comicvine_field, model_field in field_mapping.items():\n            if comicvine_field in comicvine_data:\n                value = comicvine_data[comicvine_field]\n\n                # Procesamiento especial para fechas\n                if model_field in ['fecha_tapa', 'fecha_venta'] and value:\n                    from datetime import datetime\n                    if isinstance(value, str):\n                        try:\n                            value = datetime.strptime(value, '%Y-%m-%d').date()\n                        except ValueError:\n                            value = None\n\n                setattr(self, model_field, value)\n\n        self.ultima_sync_comicvine = datetime.utcnow()\n\n    def needs_comicvine_update(self, days_threshold: int = 30) -&gt; bool:\n        \"\"\"Verificar si necesita actualizaci\u00f3n desde ComicVine\"\"\"\n        if not self.ultima_sync_comicvine:\n            return True\n\n        from datetime import timedelta\n        threshold_date = datetime.utcnow() - timedelta(days=days_threshold)\n        return self.ultima_sync_comicvine &lt; threshold_date\n</code></pre>"},{"location":"desarrollo/modelos/#modelo-volume","title":"Modelo Volume","text":""},{"location":"desarrollo/modelos/#volumenesseries-de-comics","title":"Vol\u00famenes/Series de Comics","text":"<pre><code>class Volume(BaseModel):\n    \"\"\"Modelo para vol\u00famenes de comics (series)\"\"\"\n\n    __tablename__ = 'volumens'\n\n    # Clave primaria\n    id_volume = Column(String, primary_key=True, default=BaseModel.generate_uuid)\n\n    # Informaci\u00f3n b\u00e1sica\n    nombre = Column(String, nullable=False, index=True)\n    anio_inicio = Column(Integer, nullable=True, index=True)\n    anio_fin = Column(Integer, nullable=True, index=True)\n    resumen = Column(Text, nullable=True)\n\n    # Metadatos de publicaci\u00f3n\n    cantidad_numeros = Column(Integer, default=0, nullable=False)\n    estado = Column(String, default='unknown', nullable=False)  # ongoing, completed, cancelled\n    tipo = Column(String, default='regular', nullable=False)    # regular, mini-series, one-shot\n\n    # URLs y referencias\n    url_api_detalle = Column(String, nullable=True)\n    url_sitio_web = Column(String, nullable=True)\n    imagen_portada = Column(String, nullable=True)\n\n    # ComicVine\n    id_comicvine = Column(Integer, nullable=True, unique=True, index=True)\n    ultima_sync_comicvine = Column(DateTime, nullable=True)\n\n    # Relaci\u00f3n con editorial\n    id_publisher = Column(\n        String,\n        ForeignKey('publishers.id_publisher', ondelete='SET NULL'),\n        nullable=True,\n        index=True\n    )\n\n    # Relaciones\n    publisher = relationship(\"Publisher\", back_populates=\"volumes\", lazy='select')\n    issues = relationship(\n        \"ComicbookInfo\",\n        back_populates=\"volume\",\n        cascade=\"all, delete-orphan\",\n        order_by=\"ComicbookInfo.numero\",\n        lazy='select'\n    )\n    personajes = relationship(\n        \"VolumeCharacter\",\n        back_populates=\"volume\",\n        cascade=\"all, delete-orphan\",\n        lazy='select'\n    )\n\n    # Propiedades calculadas\n    @property\n    def display_name(self) -&gt; str:\n        \"\"\"Nombre para mostrar con a\u00f1os\"\"\"\n        if self.anio_inicio:\n            if self.anio_fin and self.anio_fin != self.anio_inicio:\n                return f\"{self.nombre} ({self.anio_inicio}-{self.anio_fin})\"\n            else:\n                return f\"{self.nombre} ({self.anio_inicio})\"\n        return self.nombre\n\n    @property\n    def issues_in_collection(self) -&gt; int:\n        \"\"\"N\u00famero de issues que se poseen f\u00edsicamente\"\"\"\n        return len([issue for issue in self.issues if issue.owned_comics])\n\n    @property\n    def total_owned_copies(self) -&gt; int:\n        \"\"\"Total de copias f\u00edsicas de todos los issues\"\"\"\n        return sum(\n            issue.owned_copies_count for issue in self.issues\n        )\n\n    @property\n    def completion_percentage(self) -&gt; float:\n        \"\"\"Porcentaje de completitud de la colecci\u00f3n\"\"\"\n        if self.cantidad_numeros == 0:\n            return 0.0\n        return round((self.issues_in_collection / self.cantidad_numeros) * 100, 1)\n\n    @property\n    def is_complete(self) -&gt; bool:\n        \"\"\"Verificar si la colecci\u00f3n est\u00e1 completa\"\"\"\n        return self.completion_percentage &gt;= 100.0\n\n    @property\n    def is_ongoing(self) -&gt; bool:\n        \"\"\"Verificar si la serie est\u00e1 en curso\"\"\"\n        return self.estado.lower() == 'ongoing'\n\n    @property\n    def duration_years(self) -&gt; Optional[int]:\n        \"\"\"Duraci\u00f3n de la serie en a\u00f1os\"\"\"\n        if self.anio_inicio:\n            end_year = self.anio_fin or datetime.now().year\n            return end_year - self.anio_inicio + 1\n        return None\n\n    @property\n    def missing_issues(self) -&gt; List[str]:\n        \"\"\"Lista de n\u00fameros de issues faltantes\"\"\"\n        if not self.issues:\n            return []\n\n        owned_numbers = set()\n        for issue in self.issues:\n            if issue.owned_comics:\n                try:\n                    # Intentar convertir n\u00famero a entero para comparaci\u00f3n\n                    num = int(float(issue.numero))\n                    owned_numbers.add(num)\n                except (ValueError, TypeError):\n                    pass\n\n        if not owned_numbers:\n            return []\n\n        # Generar lista de n\u00fameros faltantes\n        min_num = min(owned_numbers)\n        max_num = max(owned_numbers)\n        missing = []\n\n        for num in range(min_num, max_num + 1):\n            if num not in owned_numbers:\n                missing.append(str(num))\n\n        return missing\n\n    @property\n    def average_quality(self) -&gt; float:\n        \"\"\"Calidad promedio de los comics en la colecci\u00f3n\"\"\"\n        owned_comics = [\n            comic for issue in self.issues\n            for comic in issue.owned_comics\n        ]\n\n        if not owned_comics:\n            return 0.0\n\n        total_quality = sum(comic.calidad for comic in owned_comics)\n        return round(total_quality / len(owned_comics), 2)\n\n    # M\u00e9todos de negocio\n    def add_issue(self, issue_info: ComicbookInfo):\n        \"\"\"A\u00f1adir issue al volumen\"\"\"\n        issue_info.id_volume = self.id_volume\n        self.issues.append(issue_info)\n        self.update_issue_count()\n\n    def update_issue_count(self):\n        \"\"\"Actualizar contador de issues\"\"\"\n        self.cantidad_numeros = len(self.issues)\n        self.updated_at = datetime.utcnow()\n\n    def get_issues_by_number_range(self, start: int, end: int) -&gt; List[ComicbookInfo]:\n        \"\"\"Obtener issues en un rango de n\u00fameros\"\"\"\n        return [\n            issue for issue in self.issues\n            if issue.numero and issue.numero.isdigit() and\n            start &lt;= int(issue.numero) &lt;= end\n        ]\n\n    def find_gaps_in_collection(self) -&gt; List[Dict[str, Any]]:\n        \"\"\"Encontrar gaps en la colecci\u00f3n\"\"\"\n        gaps = []\n\n        # Obtener n\u00fameros de issues pose\u00eddos ordenados\n        owned_numbers = []\n        for issue in self.issues:\n            if issue.owned_comics and issue.numero:\n                try:\n                    num = int(float(issue.numero))\n                    owned_numbers.append(num)\n                except (ValueError, TypeError):\n                    continue\n\n        owned_numbers.sort()\n\n        if len(owned_numbers) &lt; 2:\n            return gaps\n\n        # Encontrar gaps\n        for i in range(len(owned_numbers) - 1):\n            current = owned_numbers[i]\n            next_num = owned_numbers[i + 1]\n\n            if next_num - current &gt; 1:\n                gap_start = current + 1\n                gap_end = next_num - 1\n                gap_size = gap_end - gap_start + 1\n\n                gaps.append({\n                    'start': gap_start,\n                    'end': gap_end,\n                    'size': gap_size,\n                    'issues': list(range(gap_start, gap_end + 1))\n                })\n\n        return gaps\n\n    def update_from_comicvine(self, comicvine_data: Dict[str, Any]):\n        \"\"\"Actualizar desde datos de ComicVine\"\"\"\n        field_mapping = {\n            'name': 'nombre',\n            'start_year': 'anio_inicio',\n            'description': 'resumen',\n            'count_of_issues': 'cantidad_numeros',\n            'api_detail_url': 'url_api_detalle',\n            'site_detail_url': 'url_sitio_web',\n            'id': 'id_comicvine'\n        }\n\n        for cv_field, model_field in field_mapping.items():\n            if cv_field in comicvine_data:\n                setattr(self, model_field, comicvine_data[cv_field])\n\n        # Procesar imagen de portada\n        if 'image' in comicvine_data and comicvine_data['image']:\n            self.imagen_portada = comicvine_data['image'].get('original_url')\n\n        self.ultima_sync_comicvine = datetime.utcnow()\n</code></pre>"},{"location":"desarrollo/modelos/#modelos-de-relaciones","title":"\ud83d\udd17 Modelos de Relaciones","text":""},{"location":"desarrollo/modelos/#tablas-de-union","title":"Tablas de Uni\u00f3n","text":""},{"location":"desarrollo/modelos/#personcomicbookinfo-equipo-creativo","title":"PersonComicbookInfo - Equipo Creativo","text":"<pre><code>class PersonComicbookInfo(BaseModel):\n    \"\"\"Relaci\u00f3n entre personas y comics (equipo creativo)\"\"\"\n\n    __tablename__ = 'people_comicbooks_info'\n\n    # Clave primaria compuesta\n    id_person = Column(\n        String,\n        ForeignKey('people.id_person', ondelete='CASCADE'),\n        primary_key=True\n    )\n    id_comicbook_info = Column(\n        String,\n        ForeignKey('comicbooks_info.id_comicbook_info', ondelete='CASCADE'),\n        primary_key=True\n    )\n\n    # Informaci\u00f3n espec\u00edfica de la relaci\u00f3n\n    rol = Column(String, nullable=False, index=True)  # writer, artist, colorist, etc.\n    es_principal = Column(Boolean, default=False, nullable=False)\n    orden = Column(Integer, default=0, nullable=False)  # Para ordenar cr\u00e9ditos\n\n    # Relaciones\n    person = relationship(\"Person\", lazy='select')\n    comic_info = relationship(\"ComicbookInfo\", back_populates=\"equipo_creativo\", lazy='select')\n\n    @property\n    def role_display(self) -&gt; str:\n        \"\"\"Nombre del rol para mostrar\"\"\"\n        role_names = {\n            'writer': 'Guionista',\n            'artist': 'Dibujante',\n            'penciller': 'L\u00e1piz',\n            'inker': 'Tinta',\n            'colorist': 'Color',\n            'letterer': 'Rotulador',\n            'cover': 'Portada',\n            'editor': 'Editor'\n        }\n        return role_names.get(self.rol.lower(), self.rol.title())\n</code></pre>"},{"location":"desarrollo/modelos/#charactercomicbookinfo-personajes","title":"CharacterComicbookInfo - Personajes","text":"<pre><code>class CharacterComicbookInfo(BaseModel):\n    \"\"\"Relaci\u00f3n entre personajes y comics\"\"\"\n\n    __tablename__ = 'characters_comicbooks_info'\n\n    # Clave primaria compuesta\n    id_character = Column(\n        String,\n        ForeignKey('characters.id_character', ondelete='CASCADE'),\n        primary_key=True\n    )\n    id_comicbook_info = Column(\n        String,\n        ForeignKey('comicbooks_info.id_comicbook_info', ondelete='CASCADE'),\n        primary_key=True\n    )\n\n    # Metadatos de aparici\u00f3n\n    es_principal = Column(Boolean, default=False, nullable=False)\n    tipo_aparicion = Column(String, default='normal', nullable=False)  # normal, cameo, flashback\n    descripcion_aparicion = Column(Text, nullable=True)\n\n    # Relaciones\n    character = relationship(\"Character\", lazy='select')\n    comic_info = relationship(\"ComicbookInfo\", back_populates=\"personajes\", lazy='select')\n</code></pre>"},{"location":"desarrollo/modelos/#volumecharacter-personajes-por-volumen","title":"VolumeCharacter - Personajes por Volumen","text":"<pre><code>class VolumeCharacter(BaseModel):\n    \"\"\"Relaci\u00f3n entre vol\u00famenes y personajes principales\"\"\"\n\n    __tablename__ = 'volume_characters'\n\n    # Clave primaria compuesta\n    id_volume = Column(\n        String,\n        ForeignKey('volumens.id_volume', ondelete='CASCADE'),\n        primary_key=True\n    )\n    id_character = Column(\n        String,\n        ForeignKey('characters.id_character', ondelete='CASCADE'),\n        primary_key=True\n    )\n\n    # Metadatos\n    es_protagonista = Column(Boolean, default=False, nullable=False)\n    primera_aparicion = Column(String, nullable=True)  # N\u00famero del issue\n    descripcion = Column(Text, nullable=True)\n\n    # Relaciones\n    volume = relationship(\"Volume\", back_populates=\"personajes\", lazy='select')\n    character = relationship(\"Character\", lazy='select')\n</code></pre>"},{"location":"desarrollo/modelos/#modelos-de-medios","title":"\ud83d\uddbc\ufe0f Modelos de Medios","text":""},{"location":"desarrollo/modelos/#comicbookinfocover-portadas","title":"ComicbookInfoCover - Portadas","text":"<pre><code>class ComicbookInfoCover(BaseModel):\n    \"\"\"Portadas de comics\"\"\"\n\n    __tablename__ = 'comicbooks_info_covers'\n\n    # Clave primaria\n    id_cover = Column(String, primary_key=True, default=BaseModel.generate_uuid)\n\n    # Informaci\u00f3n de la imagen\n    url_imagen = Column(String, nullable=False)\n    url_thumbnail = Column(String, nullable=True)\n    ancho = Column(Integer, nullable=True)\n    alto = Column(Integer, nullable=True)\n\n    # Metadatos\n    es_principal = Column(Boolean, default=True, nullable=False)\n    tipo_portada = Column(String, default='front', nullable=False)  # front, back, variant\n    descripcion = Column(String, nullable=True)\n\n    # Informaci\u00f3n de descarga\n    archivo_local = Column(String, nullable=True)  # Ruta local si se descarg\u00f3\n    fecha_descarga = Column(DateTime, nullable=True)\n    tama\u00f1o_archivo = Column(Integer, nullable=True)\n\n    # Relaci\u00f3n con comic\n    id_comicbook_info = Column(\n        String,\n        ForeignKey('comicbooks_info.id_comicbook_info', ondelete='CASCADE'),\n        nullable=False,\n        index=True\n    )\n\n    # Relaciones\n    comic_info = relationship(\"ComicbookInfo\", back_populates=\"portadas\", lazy='select')\n\n    @property\n    def is_downloaded(self) -&gt; bool:\n        \"\"\"Verificar si la imagen est\u00e1 descargada localmente\"\"\"\n        import os\n        return (\n            self.archivo_local is not None and\n            os.path.exists(self.archivo_local)\n        )\n\n    @property\n    def aspect_ratio(self) -&gt; Optional[float]:\n        \"\"\"Proporci\u00f3n de aspecto de la imagen\"\"\"\n        if self.ancho and self.alto:\n            return self.ancho / self.alto\n        return None\n\n    @property\n    def file_size_mb(self) -&gt; float:\n        \"\"\"Tama\u00f1o del archivo en MB\"\"\"\n        return round(self.tama\u00f1o_archivo / (1024 * 1024), 2) if self.tama\u00f1o_archivo else 0.0\n\n    def download_image(self, download_directory: str) -&gt; bool:\n        \"\"\"Descargar imagen localmente\"\"\"\n        import requests\n        import os\n        from urllib.parse import urlparse\n\n        try:\n            response = requests.get(self.url_imagen, timeout=30)\n            response.raise_for_status()\n\n            # Generar nombre de archivo\n            parsed_url = urlparse(self.url_imagen)\n            extension = os.path.splitext(parsed_url.path)[1] or '.jpg'\n            filename = f\"cover_{self.id_cover}{extension}\"\n            filepath = os.path.join(download_directory, filename)\n\n            # Crear directorio si no existe\n            os.makedirs(download_directory, exist_ok=True)\n\n            # Guardar archivo\n            with open(filepath, 'wb') as f:\n                f.write(response.content)\n\n            # Actualizar modelo\n            self.archivo_local = filepath\n            self.fecha_descarga = datetime.utcnow()\n            self.tama\u00f1o_archivo = len(response.content)\n\n            # Obtener dimensiones si es posible\n            try:\n                from PIL import Image\n                with Image.open(filepath) as img:\n                    self.ancho, self.alto = img.size\n            except ImportError:\n                pass\n\n            return True\n\n        except Exception as e:\n            print(f\"Error downloading cover image: {e}\")\n            return False\n</code></pre> <p>\u00bfQuieres conocer m\u00e1s sobre los repositorios? \ud83d\udc49 Repositorios</p>"},{"location":"desarrollo/repositorios/","title":"Repositorios de Datos","text":"<p>Los repositorios en Babelcomics4 implementan el patr\u00f3n Repository para abstraer el acceso a datos, proporcionando una interfaz limpia y consistente entre la l\u00f3gica de negocio y la capa de persistencia.</p>"},{"location":"desarrollo/repositorios/#arquitectura-de-repositorios","title":"\ud83c\udfd7\ufe0f Arquitectura de Repositorios","text":""},{"location":"desarrollo/repositorios/#patron-repository","title":"Patr\u00f3n Repository","text":""},{"location":"desarrollo/repositorios/#clase-base-abstractrepository","title":"Clase Base AbstractRepository","text":"<pre><code>from abc import ABC, abstractmethod\nfrom typing import List, Optional, Dict, Any, TypeVar, Generic\nfrom sqlalchemy.orm import Session\nfrom sqlalchemy import and_, or_, func\n\nT = TypeVar('T')\n\nclass AbstractRepository(Generic[T], ABC):\n    \"\"\"Repositorio base abstracto\"\"\"\n\n    def __init__(self, session: Session, model_class: type):\n        self.session = session\n        self.model_class = model_class\n\n    @abstractmethod\n    def get_by_id(self, entity_id: str) -&gt; Optional[T]:\n        \"\"\"Obtener entidad por ID\"\"\"\n        pass\n\n    @abstractmethod\n    def get_all(self, **filters) -&gt; List[T]:\n        \"\"\"Obtener todas las entidades\"\"\"\n        pass\n\n    @abstractmethod\n    def create(self, entity_data: Dict[str, Any]) -&gt; T:\n        \"\"\"Crear nueva entidad\"\"\"\n        pass\n\n    @abstractmethod\n    def update(self, entity_id: str, updates: Dict[str, Any]) -&gt; Optional[T]:\n        \"\"\"Actualizar entidad existente\"\"\"\n        pass\n\n    @abstractmethod\n    def delete(self, entity_id: str) -&gt; bool:\n        \"\"\"Eliminar entidad\"\"\"\n        pass\n\n    def save(self, entity: T) -&gt; T:\n        \"\"\"Guardar entidad en la sesi\u00f3n\"\"\"\n        self.session.add(entity)\n        return entity\n\n    def flush(self):\n        \"\"\"Flush de la sesi\u00f3n\"\"\"\n        self.session.flush()\n\n    def commit(self):\n        \"\"\"Commit de la sesi\u00f3n\"\"\"\n        self.session.commit()\n\n    def rollback(self):\n        \"\"\"Rollback de la sesi\u00f3n\"\"\"\n        self.session.rollback()\n\n    def refresh(self, entity: T) -&gt; T:\n        \"\"\"Refrescar entidad desde la base de datos\"\"\"\n        self.session.refresh(entity)\n        return entity\n\nclass BaseRepository(AbstractRepository[T]):\n    \"\"\"Implementaci\u00f3n base del repositorio con funcionalidad com\u00fan\"\"\"\n\n    def get_by_id(self, entity_id: str) -&gt; Optional[T]:\n        \"\"\"Obtener entidad por ID\"\"\"\n        return self.session.query(self.model_class).filter(\n            self.model_class.id == entity_id\n        ).first()\n\n    def get_all(self, **filters) -&gt; List[T]:\n        \"\"\"Obtener todas las entidades con filtros opcionales\"\"\"\n        query = self.session.query(self.model_class)\n\n        for field, value in filters.items():\n            if hasattr(self.model_class, field):\n                query = query.filter(getattr(self.model_class, field) == value)\n\n        return query.all()\n\n    def create(self, entity_data: Dict[str, Any]) -&gt; T:\n        \"\"\"Crear nueva entidad\"\"\"\n        entity = self.model_class(**entity_data)\n        return self.save(entity)\n\n    def update(self, entity_id: str, updates: Dict[str, Any]) -&gt; Optional[T]:\n        \"\"\"Actualizar entidad existente\"\"\"\n        entity = self.get_by_id(entity_id)\n        if entity:\n            for key, value in updates.items():\n                if hasattr(entity, key):\n                    setattr(entity, key, value)\n            return entity\n        return None\n\n    def delete(self, entity_id: str) -&gt; bool:\n        \"\"\"Eliminar entidad\"\"\"\n        entity = self.get_by_id(entity_id)\n        if entity:\n            self.session.delete(entity)\n            return True\n        return False\n\n    def exists(self, entity_id: str) -&gt; bool:\n        \"\"\"Verificar si existe una entidad\"\"\"\n        return self.session.query(\n            self.session.query(self.model_class).filter(\n                self.model_class.id == entity_id\n            ).exists()\n        ).scalar()\n\n    def count(self, **filters) -&gt; int:\n        \"\"\"Contar entidades con filtros opcionales\"\"\"\n        query = self.session.query(func.count(self.model_class.id))\n\n        for field, value in filters.items():\n            if hasattr(self.model_class, field):\n                query = query.filter(getattr(self.model_class, field) == value)\n\n        return query.scalar()\n\n    def paginate(self, page: int = 1, per_page: int = 50, **filters) -&gt; Dict[str, Any]:\n        \"\"\"Paginaci\u00f3n de resultados\"\"\"\n        query = self.session.query(self.model_class)\n\n        # Aplicar filtros\n        for field, value in filters.items():\n            if hasattr(self.model_class, field):\n                query = query.filter(getattr(self.model_class, field) == value)\n\n        # Calcular offset\n        offset = (page - 1) * per_page\n\n        # Obtener resultados paginados\n        items = query.offset(offset).limit(per_page).all()\n        total = query.count()\n\n        return {\n            'items': items,\n            'total': total,\n            'page': page,\n            'per_page': per_page,\n            'pages': (total + per_page - 1) // per_page,\n            'has_prev': page &gt; 1,\n            'has_next': page * per_page &lt; total\n        }\n</code></pre>"},{"location":"desarrollo/repositorios/#comicrepository","title":"\ud83d\udcda ComicRepository","text":""},{"location":"desarrollo/repositorios/#repositorio-principal-de-comics","title":"Repositorio Principal de Comics","text":"<pre><code>from models import Comicbook, ComicbookInfo, Volume, Publisher\nfrom sqlalchemy import func, and_, or_, desc, asc\nfrom typing import List, Optional, Dict, Any\nimport os\n\nclass ComicRepository(BaseRepository[Comicbook]):\n    \"\"\"Repositorio para gesti\u00f3n de comics\"\"\"\n\n    def __init__(self, session: Session):\n        super().__init__(session, Comicbook)\n\n    def get_by_id(self, comic_id: str) -&gt; Optional[Comicbook]:\n        \"\"\"Obtener comic por ID con relaciones cargadas\"\"\"\n        return self.session.query(Comicbook).filter(\n            Comicbook.id_comicbook == comic_id\n        ).first()\n\n    def get_by_path(self, path: str) -&gt; Optional[Comicbook]:\n        \"\"\"Obtener comic por ruta de archivo\"\"\"\n        return self.session.query(Comicbook).filter(\n            Comicbook.path == path\n        ).first()\n\n    def get_by_filename(self, filename: str) -&gt; List[Comicbook]:\n        \"\"\"Obtener comics por nombre de archivo\"\"\"\n        return self.session.query(Comicbook).filter(\n            Comicbook.filename.ilike(f'%{filename}%')\n        ).all()\n\n    def search_comics(\n        self,\n        search_term: str = None,\n        filters: Dict[str, Any] = None,\n        sort_by: str = 'filename',\n        sort_order: str = 'asc',\n        page: int = 1,\n        per_page: int = 50\n    ) -&gt; Dict[str, Any]:\n        \"\"\"B\u00fasqueda avanzada de comics con filtros y paginaci\u00f3n\"\"\"\n\n        query = self.session.query(Comicbook).outerjoin(ComicbookInfo).outerjoin(Volume).outerjoin(Publisher)\n\n        # Aplicar b\u00fasqueda por texto\n        if search_term:\n            search_filters = []\n\n            # B\u00fasqueda en campos del comic\n            search_filters.extend([\n                Comicbook.filename.ilike(f'%{search_term}%'),\n                Comicbook.path.ilike(f'%{search_term}%')\n            ])\n\n            # B\u00fasqueda en informaci\u00f3n catalogada\n            search_filters.extend([\n                ComicbookInfo.titulo.ilike(f'%{search_term}%'),\n                Volume.nombre.ilike(f'%{search_term}%'),\n                Publisher.nombre.ilike(f'%{search_term}%')\n            ])\n\n            query = query.filter(or_(*search_filters))\n\n        # Aplicar filtros espec\u00edficos\n        if filters:\n            query = self._apply_filters(query, filters)\n\n        # Aplicar ordenamiento\n        query = self._apply_sorting(query, sort_by, sort_order)\n\n        # Calcular paginaci\u00f3n\n        total = query.count()\n        offset = (page - 1) * per_page\n        items = query.offset(offset).limit(per_page).all()\n\n        return {\n            'items': items,\n            'total': total,\n            'page': page,\n            'per_page': per_page,\n            'pages': (total + per_page - 1) // per_page,\n            'has_prev': page &gt; 1,\n            'has_next': page * per_page &lt; total\n        }\n\n    def _apply_filters(self, query, filters: Dict[str, Any]):\n        \"\"\"Aplicar filtros espec\u00edficos a la consulta\"\"\"\n\n        # Filtro de clasificaci\u00f3n\n        if 'classification' in filters:\n            if filters['classification'] == 'cataloged':\n                query = query.filter(\n                    and_(\n                        Comicbook.id_comicbook_info.isnot(None),\n                        Comicbook.id_comicbook_info != ''\n                    )\n                )\n            elif filters['classification'] == 'uncataloged':\n                query = query.filter(\n                    or_(\n                        Comicbook.id_comicbook_info.is_(None),\n                        Comicbook.id_comicbook_info == ''\n                    )\n                )\n\n        # Filtro de calidad\n        if 'quality_range' in filters:\n            min_quality, max_quality = filters['quality_range']\n            query = query.filter(\n                and_(\n                    Comicbook.calidad &gt;= min_quality,\n                    Comicbook.calidad &lt;= max_quality\n                )\n            )\n\n        # Filtro de papelera\n        if 'include_trash' not in filters or not filters['include_trash']:\n            query = query.filter(Comicbook.en_papelera == False)\n\n        # Filtro de tama\u00f1o de archivo\n        if 'size_range' in filters:\n            min_size_mb, max_size_mb = filters['size_range']\n            min_bytes = min_size_mb * 1024 * 1024\n            max_bytes = max_size_mb * 1024 * 1024\n            query = query.filter(\n                and_(\n                    Comicbook.tama\u00f1o &gt;= min_bytes,\n                    Comicbook.tama\u00f1o &lt;= max_bytes\n                )\n            )\n\n        # Filtro por editorial\n        if 'publishers' in filters and filters['publishers']:\n            query = query.filter(Publisher.nombre.in_(filters['publishers']))\n\n        # Filtro por a\u00f1o\n        if 'year_range' in filters:\n            start_year, end_year = filters['year_range']\n            query = query.filter(\n                and_(\n                    ComicbookInfo.fecha_tapa &gt;= f'{start_year}-01-01',\n                    ComicbookInfo.fecha_tapa &lt;= f'{end_year}-12-31'\n                )\n            )\n\n        # Filtro por formato de archivo\n        if 'file_formats' in filters and filters['file_formats']:\n            format_filters = []\n            for fmt in filters['file_formats']:\n                format_filters.append(Comicbook.filename.ilike(f'%.{fmt}'))\n            query = query.filter(or_(*format_filters))\n\n        # Filtro por copias f\u00edsicas\n        if 'has_physical_copies' in filters:\n            if filters['has_physical_copies']:\n                query = query.filter(Comicbook.cantidad_adquirida &gt; 0)\n            else:\n                query = query.filter(Comicbook.cantidad_adquirida == 0)\n\n        return query\n\n    def _apply_sorting(self, query, sort_by: str, sort_order: str):\n        \"\"\"Aplicar ordenamiento a la consulta\"\"\"\n\n        sort_column = None\n\n        # Mapeo de campos de ordenamiento\n        if sort_by == 'filename':\n            sort_column = Comicbook.filename\n        elif sort_by == 'size':\n            sort_column = Comicbook.tama\u00f1o\n        elif sort_by == 'quality':\n            sort_column = Comicbook.calidad\n        elif sort_by == 'date_added':\n            sort_column = Comicbook.fecha_agregado\n        elif sort_by == 'title':\n            sort_column = ComicbookInfo.titulo\n        elif sort_by == 'cover_date':\n            sort_column = ComicbookInfo.fecha_tapa\n        elif sort_by == 'publisher':\n            sort_column = Publisher.nombre\n        elif sort_by == 'volume':\n            sort_column = Volume.nombre\n\n        if sort_column is not None:\n            if sort_order.lower() == 'desc':\n                query = query.order_by(desc(sort_column))\n            else:\n                query = query.order_by(asc(sort_column))\n\n        return query\n\n    def get_uncataloged_comics(self) -&gt; List[Comicbook]:\n        \"\"\"Obtener comics sin catalogar\"\"\"\n        return self.session.query(Comicbook).filter(\n            or_(\n                Comicbook.id_comicbook_info.is_(None),\n                Comicbook.id_comicbook_info == ''\n            ),\n            Comicbook.en_papelera == False\n        ).all()\n\n    def get_comics_by_volume(self, volume_id: str) -&gt; List[Comicbook]:\n        \"\"\"Obtener comics de un volumen espec\u00edfico\"\"\"\n        return self.session.query(Comicbook).join(ComicbookInfo).filter(\n            ComicbookInfo.id_volume == volume_id\n        ).all()\n\n    def get_comics_by_publisher(self, publisher_id: str) -&gt; List[Comicbook]:\n        \"\"\"Obtener comics de una editorial espec\u00edfica\"\"\"\n        return self.session.query(Comicbook).join(ComicbookInfo).join(Volume).filter(\n            Volume.id_publisher == publisher_id\n        ).all()\n\n    def get_recently_added(self, days: int = 7, limit: int = 50) -&gt; List[Comicbook]:\n        \"\"\"Obtener comics agregados recientemente\"\"\"\n        from datetime import datetime, timedelta\n\n        cutoff_date = datetime.utcnow() - timedelta(days=days)\n\n        return self.session.query(Comicbook).filter(\n            Comicbook.fecha_agregado &gt;= cutoff_date,\n            Comicbook.en_papelera == False\n        ).order_by(desc(Comicbook.fecha_agregado)).limit(limit).all()\n\n    def get_high_quality_comics(self, min_quality: int = 4) -&gt; List[Comicbook]:\n        \"\"\"Obtener comics de alta calidad\"\"\"\n        return self.session.query(Comicbook).filter(\n            Comicbook.calidad &gt;= min_quality,\n            Comicbook.en_papelera == False\n        ).order_by(desc(Comicbook.calidad)).all()\n\n    def get_collection_statistics(self) -&gt; Dict[str, Any]:\n        \"\"\"Obtener estad\u00edsticas completas de la colecci\u00f3n\"\"\"\n\n        # Conteos b\u00e1sicos\n        total_comics = self.session.query(func.count(Comicbook.id_comicbook)).scalar()\n\n        cataloged_comics = self.session.query(func.count(Comicbook.id_comicbook)).filter(\n            and_(\n                Comicbook.id_comicbook_info.isnot(None),\n                Comicbook.id_comicbook_info != ''\n            )\n        ).scalar()\n\n        trash_comics = self.session.query(func.count(Comicbook.id_comicbook)).filter(\n            Comicbook.en_papelera == True\n        ).scalar()\n\n        # Distribuci\u00f3n por calidad\n        quality_distribution = dict(\n            self.session.query(\n                Comicbook.calidad,\n                func.count(Comicbook.id_comicbook)\n            ).group_by(Comicbook.calidad).all()\n        )\n\n        # Distribuci\u00f3n por formato\n        format_distribution = dict(\n            self.session.query(\n                func.substr(Comicbook.filename, func.instr(Comicbook.filename, '.') + 1),\n                func.count(Comicbook.id_comicbook)\n            ).group_by(\n                func.substr(Comicbook.filename, func.instr(Comicbook.filename, '.') + 1)\n            ).all()\n        )\n\n        # Tama\u00f1o total\n        total_size = self.session.query(func.sum(Comicbook.tama\u00f1o)).scalar() or 0\n\n        # Distribuci\u00f3n por editorial\n        publisher_distribution = dict(\n            self.session.query(\n                Publisher.nombre,\n                func.count(Comicbook.id_comicbook)\n            ).join(ComicbookInfo).join(Volume).join(Publisher).group_by(\n                Publisher.nombre\n            ).all()\n        )\n\n        return {\n            'total_comics': total_comics,\n            'cataloged_comics': cataloged_comics,\n            'uncataloged_comics': total_comics - cataloged_comics,\n            'trash_comics': trash_comics,\n            'active_comics': total_comics - trash_comics,\n            'catalog_percentage': round((cataloged_comics / total_comics) * 100, 1) if total_comics &gt; 0 else 0,\n            'quality_distribution': quality_distribution,\n            'format_distribution': format_distribution,\n            'publisher_distribution': publisher_distribution,\n            'total_size_bytes': total_size,\n            'total_size_gb': round(total_size / (1024**3), 2),\n            'average_file_size_mb': round((total_size / total_comics) / (1024**2), 2) if total_comics &gt; 0 else 0\n        }\n\n    def find_duplicates(self) -&gt; List[Dict[str, Any]]:\n        \"\"\"Encontrar comics duplicados por checksum o nombre\"\"\"\n\n        duplicates = []\n\n        # Duplicados por checksum\n        checksum_duplicates = self.session.query(\n            Comicbook.checksum,\n            func.count(Comicbook.id_comicbook).label('count')\n        ).filter(\n            Comicbook.checksum.isnot(None),\n            Comicbook.en_papelera == False\n        ).group_by(Comicbook.checksum).having(\n            func.count(Comicbook.id_comicbook) &gt; 1\n        ).all()\n\n        for checksum, count in checksum_duplicates:\n            comics = self.session.query(Comicbook).filter(\n                Comicbook.checksum == checksum\n            ).all()\n\n            duplicates.append({\n                'type': 'checksum',\n                'identifier': checksum,\n                'count': count,\n                'comics': comics\n            })\n\n        # Duplicados por nombre de archivo\n        filename_duplicates = self.session.query(\n            Comicbook.filename,\n            func.count(Comicbook.id_comicbook).label('count')\n        ).filter(\n            Comicbook.en_papelera == False\n        ).group_by(Comicbook.filename).having(\n            func.count(Comicbook.id_comicbook) &gt; 1\n        ).all()\n\n        for filename, count in filename_duplicates:\n            comics = self.session.query(Comicbook).filter(\n                Comicbook.filename == filename\n            ).all()\n\n            # Verificar que no sean el mismo archivo (diferentes rutas)\n            paths = set(comic.path for comic in comics)\n            if len(paths) &gt; 1:\n                duplicates.append({\n                    'type': 'filename',\n                    'identifier': filename,\n                    'count': count,\n                    'comics': comics\n                })\n\n        return duplicates\n\n    def verify_file_integrity(self) -&gt; Dict[str, List[Comicbook]]:\n        \"\"\"Verificar integridad de archivos\"\"\"\n\n        results = {\n            'missing_files': [],\n            'corrupted_files': [],\n            'checksum_mismatches': [],\n            'valid_files': []\n        }\n\n        comics = self.get_all(en_papelera=False)\n\n        for comic in comics:\n            if not comic.file_exists:\n                results['missing_files'].append(comic)\n                continue\n\n            validation = comic.validate_file()\n\n            if not validation['exists']:\n                results['missing_files'].append(comic)\n            elif not validation['readable']:\n                results['corrupted_files'].append(comic)\n            elif not validation['checksum_valid']:\n                results['checksum_mismatches'].append(comic)\n            else:\n                results['valid_files'].append(comic)\n\n        return results\n\n    def bulk_update_quality(self, comic_ids: List[str], quality: int) -&gt; int:\n        \"\"\"Actualizaci\u00f3n masiva de calidad\"\"\"\n        updated = self.session.query(Comicbook).filter(\n            Comicbook.id_comicbook.in_(comic_ids)\n        ).update(\n            {Comicbook.calidad: quality},\n            synchronize_session=False\n        )\n        return updated\n\n    def bulk_move_to_trash(self, comic_ids: List[str]) -&gt; int:\n        \"\"\"Mover m\u00faltiples comics a papelera\"\"\"\n        updated = self.session.query(Comicbook).filter(\n            Comicbook.id_comicbook.in_(comic_ids)\n        ).update(\n            {Comicbook.en_papelera: True},\n            synchronize_session=False\n        )\n        return updated\n\n    def bulk_restore_from_trash(self, comic_ids: List[str]) -&gt; int:\n        \"\"\"Restaurar m\u00faltiples comics de papelera\"\"\"\n        updated = self.session.query(Comicbook).filter(\n            Comicbook.id_comicbook.in_(comic_ids)\n        ).update(\n            {Comicbook.en_papelera: False},\n            synchronize_session=False\n        )\n        return updated\n\n    def create_from_file_scan(self, file_path: str) -&gt; Optional[Comicbook]:\n        \"\"\"Crear comic desde escaneo de archivo\"\"\"\n        import os\n\n        if not os.path.exists(file_path):\n            return None\n\n        # Verificar si ya existe\n        existing = self.get_by_path(file_path)\n        if existing:\n            return existing\n\n        # Crear nuevo comic\n        comic_data = {\n            'path': file_path,\n            'filename': os.path.basename(file_path),\n            'tama\u00f1o': os.path.getsize(file_path)\n        }\n\n        comic = self.create(comic_data)\n\n        # Calcular checksum en background\n        comic.calculate_checksum()\n\n        return comic\n</code></pre>"},{"location":"desarrollo/repositorios/#volumerepository","title":"\ud83d\udcd6 VolumeRepository","text":""},{"location":"desarrollo/repositorios/#repositorio-de-volumenes","title":"Repositorio de Vol\u00famenes","text":"<pre><code>class VolumeRepository(BaseRepository[Volume]):\n    \"\"\"Repositorio para gesti\u00f3n de vol\u00famenes\"\"\"\n\n    def __init__(self, session: Session):\n        super().__init__(session, Volume)\n\n    def get_by_id(self, volume_id: str) -&gt; Optional[Volume]:\n        \"\"\"Obtener volumen por ID\"\"\"\n        return self.session.query(Volume).filter(\n            Volume.id_volume == volume_id\n        ).first()\n\n    def get_by_comicvine_id(self, comicvine_id: int) -&gt; Optional[Volume]:\n        \"\"\"Obtener volumen por ID de ComicVine\"\"\"\n        return self.session.query(Volume).filter(\n            Volume.id_comicvine == comicvine_id\n        ).first()\n\n    def search_volumes(\n        self,\n        search_term: str = None,\n        publisher_id: str = None,\n        year_range: tuple = None,\n        completion_filter: str = None,\n        sort_by: str = 'nombre',\n        sort_order: str = 'asc'\n    ) -&gt; List[Volume]:\n        \"\"\"B\u00fasqueda avanzada de vol\u00famenes\"\"\"\n\n        query = self.session.query(Volume).outerjoin(Publisher)\n\n        # B\u00fasqueda por texto\n        if search_term:\n            query = query.filter(\n                or_(\n                    Volume.nombre.ilike(f'%{search_term}%'),\n                    Publisher.nombre.ilike(f'%{search_term}%')\n                )\n            )\n\n        # Filtro por editorial\n        if publisher_id:\n            query = query.filter(Volume.id_publisher == publisher_id)\n\n        # Filtro por rango de a\u00f1os\n        if year_range:\n            start_year, end_year = year_range\n            query = query.filter(\n                and_(\n                    Volume.anio_inicio &gt;= start_year,\n                    Volume.anio_inicio &lt;= end_year\n                )\n            )\n\n        # Aplicar ordenamiento\n        if sort_by == 'nombre':\n            sort_column = Volume.nombre\n        elif sort_by == 'year':\n            sort_column = Volume.anio_inicio\n        elif sort_by == 'publisher':\n            sort_column = Publisher.nombre\n        elif sort_by == 'completion':\n            # Ordenar por porcentaje de completitud requiere c\u00e1lculo\n            sort_column = Volume.nombre  # Fallback\n        else:\n            sort_column = Volume.nombre\n\n        if sort_order.lower() == 'desc':\n            query = query.order_by(desc(sort_column))\n        else:\n            query = query.order_by(asc(sort_column))\n\n        volumes = query.all()\n\n        # Filtrar por completitud despu\u00e9s de cargar (si es necesario)\n        if completion_filter:\n            filtered_volumes = []\n            for volume in volumes:\n                completion = volume.completion_percentage\n\n                if completion_filter == 'complete' and completion &gt;= 100:\n                    filtered_volumes.append(volume)\n                elif completion_filter == 'nearly_complete' and 80 &lt;= completion &lt; 100:\n                    filtered_volumes.append(volume)\n                elif completion_filter == 'in_progress' and 20 &lt;= completion &lt; 80:\n                    filtered_volumes.append(volume)\n                elif completion_filter == 'started' and 1 &lt;= completion &lt; 20:\n                    filtered_volumes.append(volume)\n                elif completion_filter == 'empty' and completion == 0:\n                    filtered_volumes.append(volume)\n\n            volumes = filtered_volumes\n\n        return volumes\n\n    def get_volumes_by_publisher(self, publisher_id: str) -&gt; List[Volume]:\n        \"\"\"Obtener vol\u00famenes de una editorial\"\"\"\n        return self.session.query(Volume).filter(\n            Volume.id_publisher == publisher_id\n        ).order_by(Volume.nombre).all()\n\n    def get_complete_volumes(self) -&gt; List[Volume]:\n        \"\"\"Obtener vol\u00famenes completos en la colecci\u00f3n\"\"\"\n        volumes = self.get_all()\n        return [vol for vol in volumes if vol.is_complete]\n\n    def get_ongoing_volumes(self) -&gt; List[Volume]:\n        \"\"\"Obtener vol\u00famenes en curso\"\"\"\n        return self.session.query(Volume).filter(\n            Volume.estado == 'ongoing'\n        ).all()\n\n    def get_volume_statistics(self) -&gt; Dict[str, Any]:\n        \"\"\"Obtener estad\u00edsticas de vol\u00famenes\"\"\"\n\n        total_volumes = self.count()\n\n        # Conteo por estado\n        status_counts = dict(\n            self.session.query(\n                Volume.estado,\n                func.count(Volume.id_volume)\n            ).group_by(Volume.estado).all()\n        )\n\n        # Conteo por tipo\n        type_counts = dict(\n            self.session.query(\n                Volume.tipo,\n                func.count(Volume.id_volume)\n            ).group_by(Volume.tipo).all()\n        )\n\n        # Distribuci\u00f3n por d\u00e9cada\n        decade_counts = dict(\n            self.session.query(\n                func.floor(Volume.anio_inicio / 10) * 10,\n                func.count(Volume.id_volume)\n            ).filter(\n                Volume.anio_inicio.isnot(None)\n            ).group_by(\n                func.floor(Volume.anio_inicio / 10) * 10\n            ).all()\n        )\n\n        # Estad\u00edsticas de completitud\n        volumes = self.get_all()\n        completion_stats = {\n            'complete': 0,\n            'nearly_complete': 0,\n            'in_progress': 0,\n            'started': 0,\n            'empty': 0\n        }\n\n        total_completion = 0\n        for volume in volumes:\n            completion = volume.completion_percentage\n            total_completion += completion\n\n            if completion &gt;= 100:\n                completion_stats['complete'] += 1\n            elif completion &gt;= 80:\n                completion_stats['nearly_complete'] += 1\n            elif completion &gt;= 20:\n                completion_stats['in_progress'] += 1\n            elif completion &gt; 0:\n                completion_stats['started'] += 1\n            else:\n                completion_stats['empty'] += 1\n\n        average_completion = total_completion / total_volumes if total_volumes &gt; 0 else 0\n\n        return {\n            'total_volumes': total_volumes,\n            'status_distribution': status_counts,\n            'type_distribution': type_counts,\n            'decade_distribution': decade_counts,\n            'completion_distribution': completion_stats,\n            'average_completion': round(average_completion, 1)\n        }\n\n    def find_volumes_needing_update(self, days_threshold: int = 30) -&gt; List[Volume]:\n        \"\"\"Encontrar vol\u00famenes que necesitan actualizaci\u00f3n\"\"\"\n        from datetime import datetime, timedelta\n\n        threshold_date = datetime.utcnow() - timedelta(days=days_threshold)\n\n        return self.session.query(Volume).filter(\n            or_(\n                Volume.ultima_sync_comicvine.is_(None),\n                Volume.ultima_sync_comicvine &lt; threshold_date\n            ),\n            Volume.id_comicvine.isnot(None)\n        ).all()\n\n    def get_volumes_with_gaps(self) -&gt; List[Dict[str, Any]]:\n        \"\"\"Obtener vol\u00famenes con gaps en la colecci\u00f3n\"\"\"\n        volumes_with_gaps = []\n\n        volumes = self.session.query(Volume).filter(\n            Volume.cantidad_numeros &gt; 0\n        ).all()\n\n        for volume in volumes:\n            gaps = volume.find_gaps_in_collection()\n            if gaps:\n                volumes_with_gaps.append({\n                    'volume': volume,\n                    'gaps': gaps,\n                    'total_missing': sum(gap['size'] for gap in gaps)\n                })\n\n        return volumes_with_gaps\n\n    def update_volume_statistics(self, volume_id: str = None):\n        \"\"\"Actualizar estad\u00edsticas de vol\u00famenes\"\"\"\n        if volume_id:\n            volumes = [self.get_by_id(volume_id)]\n        else:\n            volumes = self.get_all()\n\n        for volume in volumes:\n            if volume:\n                # Recalcular cantidad de issues\n                issue_count = self.session.query(func.count(ComicbookInfo.id_comicbook_info)).filter(\n                    ComicbookInfo.id_volume == volume.id_volume\n                ).scalar()\n\n                volume.cantidad_numeros = issue_count\n                volume.updated_at = datetime.utcnow()\n</code></pre>"},{"location":"desarrollo/repositorios/#publisherrepository","title":"\ud83c\udfe2 PublisherRepository","text":""},{"location":"desarrollo/repositorios/#repositorio-de-editoriales","title":"Repositorio de Editoriales","text":"<pre><code>class PublisherRepository(BaseRepository[Publisher]):\n    \"\"\"Repositorio para gesti\u00f3n de editoriales\"\"\"\n\n    def __init__(self, session: Session):\n        super().__init__(session, Publisher)\n\n    def get_by_id(self, publisher_id: str) -&gt; Optional[Publisher]:\n        \"\"\"Obtener editorial por ID\"\"\"\n        return self.session.query(Publisher).filter(\n            Publisher.id_publisher == publisher_id\n        ).first()\n\n    def get_by_name(self, name: str) -&gt; Optional[Publisher]:\n        \"\"\"Obtener editorial por nombre\"\"\"\n        return self.session.query(Publisher).filter(\n            Publisher.nombre.ilike(name)\n        ).first()\n\n    def get_by_comicvine_id(self, comicvine_id: int) -&gt; Optional[Publisher]:\n        \"\"\"Obtener editorial por ID de ComicVine\"\"\"\n        return self.session.query(Publisher).filter(\n            Publisher.id_comicvine == comicvine_id\n        ).first()\n\n    def get_all_with_stats(self) -&gt; List[Dict[str, Any]]:\n        \"\"\"Obtener todas las editoriales con estad\u00edsticas\"\"\"\n        publishers = self.get_all()\n\n        publishers_with_stats = []\n        for publisher in publishers:\n            volume_count = len(publisher.volumes)\n            comic_count = sum(\n                len(volume.issues) for volume in publisher.volumes\n            )\n\n            publishers_with_stats.append({\n                'publisher': publisher,\n                'volume_count': volume_count,\n                'comic_count': comic_count,\n                'completion_percentage': self._calculate_publisher_completion(publisher)\n            })\n\n        return publishers_with_stats\n\n    def _calculate_publisher_completion(self, publisher: Publisher) -&gt; float:\n        \"\"\"Calcular porcentaje de completitud de una editorial\"\"\"\n        if not publisher.volumes:\n            return 0.0\n\n        total_completion = sum(\n            volume.completion_percentage for volume in publisher.volumes\n        )\n        return round(total_completion / len(publisher.volumes), 1)\n\n    def get_top_publishers(self, limit: int = 10) -&gt; List[Dict[str, Any]]:\n        \"\"\"Obtener top editoriales por n\u00famero de comics\"\"\"\n        results = self.session.query(\n            Publisher,\n            func.count(Comicbook.id_comicbook).label('comic_count')\n        ).join(Volume).join(ComicbookInfo).join(Comicbook).filter(\n            Comicbook.en_papelera == False\n        ).group_by(Publisher.id_publisher).order_by(\n            desc('comic_count')\n        ).limit(limit).all()\n\n        return [\n            {\n                'publisher': publisher,\n                'comic_count': comic_count\n            }\n            for publisher, comic_count in results\n        ]\n\n    def search_publishers(self, search_term: str) -&gt; List[Publisher]:\n        \"\"\"Buscar editoriales por nombre\"\"\"\n        return self.session.query(Publisher).filter(\n            Publisher.nombre.ilike(f'%{search_term}%')\n        ).order_by(Publisher.nombre).all()\n\n    def get_or_create_publisher(self, name: str, comicvine_id: int = None) -&gt; Publisher:\n        \"\"\"Obtener o crear editorial\"\"\"\n        # Buscar por ComicVine ID primero\n        if comicvine_id:\n            publisher = self.get_by_comicvine_id(comicvine_id)\n            if publisher:\n                return publisher\n\n        # Buscar por nombre\n        publisher = self.get_by_name(name)\n        if publisher:\n            # Actualizar ComicVine ID si no lo tiene\n            if comicvine_id and not publisher.id_comicvine:\n                publisher.id_comicvine = comicvine_id\n            return publisher\n\n        # Crear nueva editorial\n        publisher_data = {\n            'nombre': name,\n            'id_comicvine': comicvine_id\n        }\n\n        return self.create(publisher_data)\n</code></pre> <p>\u00bfQuieres conocer m\u00e1s sobre la API de ComicVine? \ud83d\udc49 API ComicVine</p>"},{"location":"funcionalidades/base-datos/","title":"Base de Datos","text":"<p>Babelcomics4 utiliza un sistema de base de datos robusto basado en SQLAlchemy ORM y SQLite, dise\u00f1ado para gestionar eficientemente grandes colecciones de comics con integridad referencial y rendimiento optimizado.</p>"},{"location":"funcionalidades/base-datos/#arquitectura-de-la-base-de-datos","title":"\ud83d\uddc4\ufe0f Arquitectura de la Base de Datos","text":""},{"location":"funcionalidades/base-datos/#modelo-entidad-relacion","title":"Modelo Entidad-Relaci\u00f3n","text":"<pre><code>erDiagram\n    COMICBOOKS ||--o| COMICBOOKS_INFO : \"puede tener\"\n    COMICBOOKS_INFO ||--|| VOLUMENS : \"pertenece a\"\n    VOLUMENS ||--|| PUBLISHERS : \"publicado por\"\n    COMICBOOKS_INFO ||--o{ COMICBOOKS_INFO_COVERS : \"tiene portadas\"\n    COMICBOOKS_INFO ||--o{ PEOPLE_COMICBOOKS_INFO : \"tiene equipo creativo\"\n    PEOPLE ||--o{ PEOPLE_COMICBOOKS_INFO : \"trabaja en\"\n    COMICBOOKS_INFO ||--o{ CHARACTERS_COMICBOOKS_INFO : \"presenta personajes\"\n    CHARACTERS ||--o{ CHARACTERS_COMICBOOKS_INFO : \"aparece en\"\n\n    COMICBOOKS {\n        string id_comicbook PK\n        string path\n        string filename\n        integer tama\u00f1o\n        string id_comicbook_info FK\n        boolean en_papelera\n        integer calidad\n        datetime fecha_agregado\n    }\n\n    COMICBOOKS_INFO {\n        string id_comicbook_info PK\n        string titulo\n        string numero\n        date fecha_tapa\n        text resumen\n        string url_api_detalle\n        string url_sitio_web\n        float calificacion\n        integer id_comicvine\n        string id_volume FK\n    }\n\n    VOLUMENS {\n        string id_volume PK\n        string nombre\n        integer anio_inicio\n        integer anio_fin\n        string resumen\n        integer cantidad_numeros\n        string id_publisher FK\n        integer id_comicvine\n    }\n\n    PUBLISHERS {\n        string id_publisher PK\n        string nombre\n        string resumen\n        integer id_comicvine\n    }\n\n    PEOPLE {\n        string id_person PK\n        string nombre\n        string resumen\n        integer id_comicvine\n    }\n\n    CHARACTERS {\n        string id_character PK\n        string nombre\n        string resumen\n        integer id_comicvine\n    }\n</code></pre>"},{"location":"funcionalidades/base-datos/#tecnologia-y-stack","title":"Tecnolog\u00eda y Stack","text":""},{"location":"funcionalidades/base-datos/#componentes-principales","title":"Componentes Principales","text":"<pre><code># Stack de base de datos\nDATABASE_STACK = {\n    'ORM': 'SQLAlchemy 2.0+',\n    'Engine': 'SQLite 3.x',\n    'Connection_Pool': 'SQLAlchemy Pool',\n    'Migration': 'Alembic',\n    'Schema_Validation': 'Pydantic',\n    'Query_Builder': 'SQLAlchemy Core/ORM'\n}\n\n# Configuraci\u00f3n de conexi\u00f3n\nDATABASE_CONFIG = {\n    'url': 'sqlite:///data/babelcomics.db',\n    'echo': False,  # SQL logging\n    'pool_size': 20,\n    'max_overflow': 30,\n    'pool_timeout': 30,\n    'pool_recycle': 3600,\n    'isolation_level': 'READ_UNCOMMITTED'\n}\n</code></pre>"},{"location":"funcionalidades/base-datos/#modelos-de-datos","title":"\ud83d\udcca Modelos de Datos","text":""},{"location":"funcionalidades/base-datos/#modelo-principal-comicbooks","title":"Modelo Principal: Comicbooks","text":""},{"location":"funcionalidades/base-datos/#definicion-de-la-entidad","title":"Definici\u00f3n de la Entidad","text":"<pre><code>from sqlalchemy import Column, String, Integer, Boolean, DateTime, ForeignKey\nfrom sqlalchemy.orm import relationship\nfrom sqlalchemy.ext.declarative import declarative_base\nimport uuid\nfrom datetime import datetime\n\nBase = declarative_base()\n\nclass Comicbook(Base):\n    \"\"\"Modelo principal para archivos de comics\"\"\"\n\n    __tablename__ = 'comicbooks'\n\n    # Clave primaria\n    id_comicbook = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))\n\n    # Informaci\u00f3n del archivo\n    path = Column(String, nullable=False, unique=True)\n    filename = Column(String, nullable=False)\n    tama\u00f1o = Column(Integer, nullable=True)  # Tama\u00f1o en bytes\n\n    # Estado y metadatos\n    en_papelera = Column(Boolean, default=False)\n    calidad = Column(Integer, default=0)  # 0-5 estrellas\n    fecha_agregado = Column(DateTime, default=datetime.utcnow)\n\n    # Relaci\u00f3n con informaci\u00f3n de comic (opcional)\n    id_comicbook_info = Column(String, ForeignKey('comicbooks_info.id_comicbook_info'), nullable=True)\n\n    # Relaciones\n    comic_info = relationship(\"ComicbookInfo\", back_populates=\"owned_comics\")\n\n    @property\n    def is_cataloged(self):\n        \"\"\"Verificar si el comic est\u00e1 catalogado\"\"\"\n        return self.id_comicbook_info is not None and self.id_comicbook_info != ''\n\n    @property\n    def file_exists(self):\n        \"\"\"Verificar si el archivo f\u00edsico existe\"\"\"\n        import os\n        return os.path.exists(self.path)\n\n    @property\n    def file_size_mb(self):\n        \"\"\"Tama\u00f1o del archivo en MB\"\"\"\n        return round(self.tama\u00f1o / (1024 * 1024), 2) if self.tama\u00f1o else 0\n\n    def __repr__(self):\n        return f\"&lt;Comicbook(filename='{self.filename}', cataloged={self.is_cataloged})&gt;\"\n</code></pre>"},{"location":"funcionalidades/base-datos/#modelo-de-informacion-comicbookinfo","title":"Modelo de Informaci\u00f3n: ComicbookInfo","text":""},{"location":"funcionalidades/base-datos/#metadatos-de-comicvine","title":"Metadatos de ComicVine","text":"<pre><code>class ComicbookInfo(Base):\n    \"\"\"Informaci\u00f3n detallada del comic desde ComicVine\"\"\"\n\n    __tablename__ = 'comicbooks_info'\n\n    # Clave primaria\n    id_comicbook_info = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))\n\n    # Informaci\u00f3n b\u00e1sica\n    titulo = Column(String, nullable=False)\n    numero = Column(String, nullable=True)  # Puede ser \"1\", \"1.1\", \"Annual 1\", etc.\n    fecha_tapa = Column(Date, nullable=True)\n    resumen = Column(Text, nullable=True)\n\n    # URLs y referencias\n    url_api_detalle = Column(String, nullable=True)\n    url_sitio_web = Column(String, nullable=True)\n\n    # Calificaci\u00f3n y m\u00e9tricas\n    calificacion = Column(Float, default=0.0)  # Calificaci\u00f3n de ComicVine\n\n    # Referencias externas\n    id_comicvine = Column(Integer, nullable=True, unique=True)\n    id_volume = Column(String, ForeignKey('volumens.id_volume'), nullable=True)\n\n    # Relaciones\n    volume = relationship(\"Volume\", back_populates=\"issues\")\n    owned_comics = relationship(\"Comicbook\", back_populates=\"comic_info\")\n    portadas = relationship(\"ComicbookInfoCover\", back_populates=\"comic_info\", cascade=\"all, delete-orphan\")\n    equipo_creativo = relationship(\"PersonComicbookInfo\", back_populates=\"comic_info\")\n    personajes = relationship(\"CharacterComicbookInfo\", back_populates=\"comic_info\")\n\n    @property\n    def display_title(self):\n        \"\"\"T\u00edtulo para mostrar en UI\"\"\"\n        if self.numero:\n            return f\"{self.titulo} #{self.numero}\"\n        return self.titulo\n\n    @property\n    def year(self):\n        \"\"\"A\u00f1o de la fecha de tapa\"\"\"\n        return self.fecha_tapa.year if self.fecha_tapa else None\n\n    @property\n    def has_cover_image(self):\n        \"\"\"Verificar si tiene imagen de portada\"\"\"\n        return len(self.portadas) &gt; 0\n\n    def __repr__(self):\n        return f\"&lt;ComicbookInfo(title='{self.titulo}', number='{self.numero}')&gt;\"\n</code></pre>"},{"location":"funcionalidades/base-datos/#modelo-de-volumenes","title":"Modelo de Vol\u00famenes","text":""},{"location":"funcionalidades/base-datos/#series-y-colecciones","title":"Series y Colecciones","text":"<pre><code>class Volume(Base):\n    \"\"\"Vol\u00famenes de comics (series)\"\"\"\n\n    __tablename__ = 'volumens'\n\n    # Clave primaria\n    id_volume = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))\n\n    # Informaci\u00f3n b\u00e1sica\n    nombre = Column(String, nullable=False)\n    anio_inicio = Column(Integer, nullable=True)\n    anio_fin = Column(Integer, nullable=True)\n    resumen = Column(Text, nullable=True)\n    cantidad_numeros = Column(Integer, default=0)\n\n    # Referencias externas\n    id_comicvine = Column(Integer, nullable=True, unique=True)\n    id_publisher = Column(String, ForeignKey('publishers.id_publisher'), nullable=True)\n\n    # Metadatos adicionales\n    estado = Column(String, default='unknown')  # ongoing, completed, cancelled\n    tipo = Column(String, default='regular')    # regular, mini-series, one-shot\n\n    # Relaciones\n    publisher = relationship(\"Publisher\", back_populates=\"volumes\")\n    issues = relationship(\"ComicbookInfo\", back_populates=\"volume\")\n\n    @property\n    def display_name(self):\n        \"\"\"Nombre para mostrar con a\u00f1os\"\"\"\n        if self.anio_inicio:\n            if self.anio_fin and self.anio_fin != self.anio_inicio:\n                return f\"{self.nombre} ({self.anio_inicio}-{self.anio_fin})\"\n            else:\n                return f\"{self.nombre} ({self.anio_inicio})\"\n        return self.nombre\n\n    @property\n    def issues_in_collection(self):\n        \"\"\"N\u00famero de issues en la colecci\u00f3n\"\"\"\n        return len([issue for issue in self.issues if issue.owned_comics])\n\n    @property\n    def completion_percentage(self):\n        \"\"\"Porcentaje de completitud de la colecci\u00f3n\"\"\"\n        if self.cantidad_numeros == 0:\n            return 0\n        return (self.issues_in_collection / self.cantidad_numeros) * 100\n\n    @property\n    def is_complete(self):\n        \"\"\"Verificar si la colecci\u00f3n est\u00e1 completa\"\"\"\n        return self.completion_percentage &gt;= 100\n\n    def __repr__(self):\n        return f\"&lt;Volume(name='{self.nombre}', year={self.anio_inicio})&gt;\"\n</code></pre>"},{"location":"funcionalidades/base-datos/#modelo-de-editoriales","title":"Modelo de Editoriales","text":""},{"location":"funcionalidades/base-datos/#publishers-y-estudios","title":"Publishers y Estudios","text":"<pre><code>class Publisher(Base):\n    \"\"\"Editoriales de comics\"\"\"\n\n    __tablename__ = 'publishers'\n\n    # Clave primaria\n    id_publisher = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))\n\n    # Informaci\u00f3n b\u00e1sica\n    nombre = Column(String, nullable=False, unique=True)\n    resumen = Column(Text, nullable=True)\n\n    # Referencias externas\n    id_comicvine = Column(Integer, nullable=True, unique=True)\n\n    # Metadatos adicionales\n    sitio_web = Column(String, nullable=True)\n    pais = Column(String, nullable=True)\n    anio_fundacion = Column(Integer, nullable=True)\n\n    # Relaciones\n    volumes = relationship(\"Volume\", back_populates=\"publisher\")\n\n    @property\n    def volume_count(self):\n        \"\"\"N\u00famero de vol\u00famenes de esta editorial\"\"\"\n        return len(self.volumes)\n\n    @property\n    def comic_count(self):\n        \"\"\"N\u00famero total de comics de esta editorial\"\"\"\n        return sum(volume.issues_in_collection for volume in self.volumes)\n\n    def __repr__(self):\n        return f\"&lt;Publisher(name='{self.nombre}')&gt;\"\n</code></pre>"},{"location":"funcionalidades/base-datos/#operaciones-de-base-de-datos","title":"\ud83d\udd27 Operaciones de Base de Datos","text":""},{"location":"funcionalidades/base-datos/#gestor-de-base-de-datos","title":"Gestor de Base de Datos","text":""},{"location":"funcionalidades/base-datos/#clase-principal-databasemanager","title":"Clase Principal DatabaseManager","text":"<pre><code>from sqlalchemy import create_engine, text\nfrom sqlalchemy.orm import sessionmaker, Session\nfrom sqlalchemy.pool import StaticPool\nimport os\nimport sqlite3\n\nclass DatabaseManager:\n    \"\"\"Gestor centralizado de la base de datos\"\"\"\n\n    def __init__(self, database_url=None):\n        self.database_url = database_url or \"sqlite:///data/babelcomics.db\"\n        self.engine = None\n        self.SessionLocal = None\n        self._initialize_database()\n\n    def _initialize_database(self):\n        \"\"\"Inicializar conexi\u00f3n y configuraci\u00f3n de la base de datos\"\"\"\n\n        # Crear directorio de datos si no existe\n        db_path = self.database_url.replace('sqlite:///', '')\n        os.makedirs(os.path.dirname(db_path), exist_ok=True)\n\n        # Configurar engine con optimizaciones para SQLite\n        self.engine = create_engine(\n            self.database_url,\n            echo=False,\n            poolclass=StaticPool,\n            pool_pre_ping=True,\n            connect_args={\n                \"check_same_thread\": False,\n                \"timeout\": 20,\n                \"isolation_level\": None  # Para transacciones manuales\n            }\n        )\n\n        # Configurar factory de sesiones\n        self.SessionLocal = sessionmaker(\n            autocommit=False,\n            autoflush=False,\n            bind=self.engine\n        )\n\n        # Crear tablas si no existen\n        self._create_tables()\n\n        # Aplicar optimizaciones de SQLite\n        self._optimize_sqlite()\n\n    def _create_tables(self):\n        \"\"\"Crear todas las tablas del modelo\"\"\"\n        try:\n            Base.metadata.create_all(bind=self.engine)\n            print(\"Tablas de base de datos creadas/verificadas exitosamente\")\n        except Exception as e:\n            print(f\"Error creando tablas: {e}\")\n            raise\n\n    def _optimize_sqlite(self):\n        \"\"\"Aplicar optimizaciones espec\u00edficas de SQLite\"\"\"\n\n        optimizations = [\n            \"PRAGMA journal_mode=WAL\",           # Write-Ahead Logging\n            \"PRAGMA synchronous=NORMAL\",         # Balance seguridad/rendimiento\n            \"PRAGMA cache_size=10000\",           # Cache de 10MB\n            \"PRAGMA temp_store=MEMORY\",          # Temporales en memoria\n            \"PRAGMA mmap_size=268435456\",        # Memory mapping 256MB\n            \"PRAGMA optimize\"                    # Optimizaci\u00f3n autom\u00e1tica\n        ]\n\n        with self.engine.connect() as connection:\n            for pragma in optimizations:\n                try:\n                    connection.execute(text(pragma))\n                except Exception as e:\n                    print(f\"Warning: No se pudo aplicar {pragma}: {e}\")\n\n    def get_session(self) -&gt; Session:\n        \"\"\"Obtener nueva sesi\u00f3n de base de datos\"\"\"\n        return self.SessionLocal()\n\n    def close(self):\n        \"\"\"Cerrar conexiones de base de datos\"\"\"\n        if self.engine:\n            self.engine.dispose()\n</code></pre>"},{"location":"funcionalidades/base-datos/#repositorios-de-datos","title":"Repositorios de Datos","text":""},{"location":"funcionalidades/base-datos/#comicrepository","title":"ComicRepository","text":"<pre><code>from typing import List, Optional, Dict, Any\nfrom sqlalchemy.orm import Session\nfrom sqlalchemy import func, and_, or_\n\nclass ComicRepository:\n    \"\"\"Repositorio para operaciones con comics\"\"\"\n\n    def __init__(self, session: Session):\n        self.session = session\n\n    def get_all_comics(self, include_trash: bool = False) -&gt; List[Comicbook]:\n        \"\"\"Obtener todos los comics\"\"\"\n        query = self.session.query(Comicbook)\n\n        if not include_trash:\n            query = query.filter(Comicbook.en_papelera == False)\n\n        return query.all()\n\n    def get_comic_by_id(self, comic_id: str) -&gt; Optional[Comicbook]:\n        \"\"\"Obtener comic por ID\"\"\"\n        return self.session.query(Comicbook).filter(\n            Comicbook.id_comicbook == comic_id\n        ).first()\n\n    def get_comic_by_path(self, path: str) -&gt; Optional[Comicbook]:\n        \"\"\"Obtener comic por ruta de archivo\"\"\"\n        return self.session.query(Comicbook).filter(\n            Comicbook.path == path\n        ).first()\n\n    def search_comics(self, search_term: str, filters: Dict[str, Any] = None) -&gt; List[Comicbook]:\n        \"\"\"Buscar comics con filtros\"\"\"\n        query = self.session.query(Comicbook)\n\n        # B\u00fasqueda por texto\n        if search_term:\n            search_filter = or_(\n                Comicbook.filename.ilike(f'%{search_term}%'),\n                Comicbook.path.ilike(f'%{search_term}%')\n            )\n\n            # Si el comic tiene informaci\u00f3n catalogada, buscar tambi\u00e9n ah\u00ed\n            query = query.outerjoin(ComicbookInfo)\n            search_filter = or_(\n                search_filter,\n                ComicbookInfo.titulo.ilike(f'%{search_term}%')\n            )\n\n            query = query.filter(search_filter)\n\n        # Aplicar filtros\n        if filters:\n            # Filtro de clasificaci\u00f3n\n            if 'classification' in filters:\n                if filters['classification'] == 'cataloged':\n                    query = query.filter(Comicbook.id_comicbook_info.isnot(None))\n                elif filters['classification'] == 'uncataloged':\n                    query = query.filter(\n                        or_(\n                            Comicbook.id_comicbook_info.is_(None),\n                            Comicbook.id_comicbook_info == ''\n                        )\n                    )\n\n            # Filtro de calidad\n            if 'quality_range' in filters:\n                min_quality, max_quality = filters['quality_range']\n                query = query.filter(\n                    and_(\n                        Comicbook.calidad &gt;= min_quality,\n                        Comicbook.calidad &lt;= max_quality\n                    )\n                )\n\n            # Filtro de papelera\n            if 'include_trash' in filters:\n                if not filters['include_trash']:\n                    query = query.filter(Comicbook.en_papelera == False)\n            else:\n                query = query.filter(Comicbook.en_papelera == False)\n\n            # Filtro de tama\u00f1o de archivo\n            if 'size_range' in filters:\n                min_size, max_size = filters['size_range']\n                min_bytes = min_size * 1024 * 1024  # Convertir MB a bytes\n                max_bytes = max_size * 1024 * 1024\n                query = query.filter(\n                    and_(\n                        Comicbook.tama\u00f1o &gt;= min_bytes,\n                        Comicbook.tama\u00f1o &lt;= max_bytes\n                    )\n                )\n\n        return query.all()\n\n    def get_comics_by_volume(self, volume_id: str) -&gt; List[Comicbook]:\n        \"\"\"Obtener comics de un volumen espec\u00edfico\"\"\"\n        return self.session.query(Comicbook).join(ComicbookInfo).filter(\n            ComicbookInfo.id_volume == volume_id\n        ).all()\n\n    def get_uncataloged_comics(self) -&gt; List[Comicbook]:\n        \"\"\"Obtener comics sin catalogar\"\"\"\n        return self.session.query(Comicbook).filter(\n            or_(\n                Comicbook.id_comicbook_info.is_(None),\n                Comicbook.id_comicbook_info == ''\n            )\n        ).filter(Comicbook.en_papelera == False).all()\n\n    def get_collection_statistics(self) -&gt; Dict[str, Any]:\n        \"\"\"Obtener estad\u00edsticas de la colecci\u00f3n\"\"\"\n\n        # Conteos b\u00e1sicos\n        total_comics = self.session.query(func.count(Comicbook.id_comicbook)).scalar()\n\n        cataloged_comics = self.session.query(func.count(Comicbook.id_comicbook)).filter(\n            Comicbook.id_comicbook_info.isnot(None),\n            Comicbook.id_comicbook_info != ''\n        ).scalar()\n\n        trash_comics = self.session.query(func.count(Comicbook.id_comicbook)).filter(\n            Comicbook.en_papelera == True\n        ).scalar()\n\n        # Distribuci\u00f3n por calidad\n        quality_distribution = self.session.query(\n            Comicbook.calidad,\n            func.count(Comicbook.id_comicbook).label('count')\n        ).group_by(Comicbook.calidad).all()\n\n        # Tama\u00f1o total de la colecci\u00f3n\n        total_size = self.session.query(func.sum(Comicbook.tama\u00f1o)).scalar() or 0\n\n        return {\n            'total_comics': total_comics,\n            'cataloged_comics': cataloged_comics,\n            'uncataloged_comics': total_comics - cataloged_comics,\n            'trash_comics': trash_comics,\n            'quality_distribution': dict(quality_distribution),\n            'total_size_bytes': total_size,\n            'total_size_gb': round(total_size / (1024**3), 2),\n            'catalog_percentage': round((cataloged_comics / total_comics) * 100, 1) if total_comics &gt; 0 else 0\n        }\n\n    def create_comic(self, comic_data: Dict[str, Any]) -&gt; Comicbook:\n        \"\"\"Crear nuevo comic\"\"\"\n        comic = Comicbook(**comic_data)\n        self.session.add(comic)\n        self.session.flush()  # Para obtener el ID generado\n        return comic\n\n    def update_comic(self, comic_id: str, updates: Dict[str, Any]) -&gt; Optional[Comicbook]:\n        \"\"\"Actualizar comic existente\"\"\"\n        comic = self.get_comic_by_id(comic_id)\n        if comic:\n            for key, value in updates.items():\n                if hasattr(comic, key):\n                    setattr(comic, key, value)\n            self.session.flush()\n        return comic\n\n    def delete_comic(self, comic_id: str) -&gt; bool:\n        \"\"\"Eliminar comic (f\u00edsicamente de la BD)\"\"\"\n        comic = self.get_comic_by_id(comic_id)\n        if comic:\n            self.session.delete(comic)\n            self.session.flush()\n            return True\n        return False\n\n    def move_to_trash(self, comic_id: str) -&gt; bool:\n        \"\"\"Mover comic a papelera\"\"\"\n        return self.update_comic(comic_id, {'en_papelera': True}) is not None\n\n    def restore_from_trash(self, comic_id: str) -&gt; bool:\n        \"\"\"Restaurar comic de papelera\"\"\"\n        return self.update_comic(comic_id, {'en_papelera': False}) is not None\n</code></pre>"},{"location":"funcionalidades/base-datos/#optimizacion-y-rendimiento","title":"\ud83d\ude80 Optimizaci\u00f3n y Rendimiento","text":""},{"location":"funcionalidades/base-datos/#indices-de-base-de-datos","title":"\u00cdndices de Base de Datos","text":""},{"location":"funcionalidades/base-datos/#indices-estrategicos","title":"\u00cdndices Estrat\u00e9gicos","text":"<pre><code>def create_performance_indexes():\n    \"\"\"Crear \u00edndices para optimizar consultas frecuentes\"\"\"\n\n    indexes = [\n        # \u00cdndices para b\u00fasquedas\n        \"CREATE INDEX IF NOT EXISTS idx_comicbooks_filename ON comicbooks(filename)\",\n        \"CREATE INDEX IF NOT EXISTS idx_comicbooks_path ON comicbooks(path)\",\n        \"CREATE INDEX IF NOT EXISTS idx_comicbooks_quality ON comicbooks(calidad)\",\n\n        # \u00cdndices para filtros\n        \"CREATE INDEX IF NOT EXISTS idx_comicbooks_trash ON comicbooks(en_papelera)\",\n        \"CREATE INDEX IF NOT EXISTS idx_comicbooks_cataloged ON comicbooks(id_comicbook_info)\",\n        \"CREATE INDEX IF NOT EXISTS idx_comicbooks_size ON comicbooks(tama\u00f1o)\",\n        \"CREATE INDEX IF NOT EXISTS idx_comicbooks_date ON comicbooks(fecha_agregado)\",\n\n        # \u00cdndices para informaci\u00f3n de comics\n        \"CREATE INDEX IF NOT EXISTS idx_comicinfo_title ON comicbooks_info(titulo)\",\n        \"CREATE INDEX IF NOT EXISTS idx_comicinfo_volume ON comicbooks_info(id_volume)\",\n        \"CREATE INDEX IF NOT EXISTS idx_comicinfo_comicvine ON comicbooks_info(id_comicvine)\",\n        \"CREATE INDEX IF NOT EXISTS idx_comicinfo_coverdate ON comicbooks_info(fecha_tapa)\",\n\n        # \u00cdndices para vol\u00famenes\n        \"CREATE INDEX IF NOT EXISTS idx_volumes_name ON volumens(nombre)\",\n        \"CREATE INDEX IF NOT EXISTS idx_volumes_publisher ON volumens(id_publisher)\",\n        \"CREATE INDEX IF NOT EXISTS idx_volumes_year ON volumens(anio_inicio)\",\n        \"CREATE INDEX IF NOT EXISTS idx_volumes_comicvine ON volumens(id_comicvine)\",\n\n        # \u00cdndices compuestos para consultas complejas\n        \"CREATE INDEX IF NOT EXISTS idx_comics_status ON comicbooks(en_papelera, calidad)\",\n        \"CREATE INDEX IF NOT EXISTS idx_comics_catalog_quality ON comicbooks(id_comicbook_info, calidad)\",\n    ]\n\n    return indexes\n</code></pre>"},{"location":"funcionalidades/base-datos/#connection-pooling","title":"Connection Pooling","text":""},{"location":"funcionalidades/base-datos/#gestion-de-conexiones","title":"Gesti\u00f3n de Conexiones","text":"<pre><code>class OptimizedDatabaseManager(DatabaseManager):\n    \"\"\"Versi\u00f3n optimizada del gestor de base de datos\"\"\"\n\n    def __init__(self, database_url=None, pool_config=None):\n        self.pool_config = pool_config or {\n            'pool_size': 20,\n            'max_overflow': 30,\n            'pool_timeout': 30,\n            'pool_recycle': 3600\n        }\n        super().__init__(database_url)\n\n    def _initialize_database(self):\n        \"\"\"Inicializaci\u00f3n optimizada con pooling\"\"\"\n\n        db_path = self.database_url.replace('sqlite:///', '')\n        os.makedirs(os.path.dirname(db_path), exist_ok=True)\n\n        # Engine optimizado para concurrencia\n        self.engine = create_engine(\n            self.database_url,\n            echo=False,\n            poolclass=StaticPool,\n            pool_pre_ping=True,\n            **self.pool_config,\n            connect_args={\n                \"check_same_thread\": False,\n                \"timeout\": 20\n            }\n        )\n\n        # Configuraci\u00f3n de sesiones con autocommit optimizado\n        self.SessionLocal = sessionmaker(\n            autocommit=False,\n            autoflush=True,  # Flush autom\u00e1tico para mejor rendimiento\n            bind=self.engine,\n            expire_on_commit=False  # Evitar consultas innecesarias\n        )\n\n        self._create_tables()\n        self._optimize_sqlite()\n        self._create_indexes()\n\n    def _create_indexes(self):\n        \"\"\"Crear \u00edndices de rendimiento\"\"\"\n        indexes = create_performance_indexes()\n\n        with self.engine.connect() as connection:\n            for index_sql in indexes:\n                try:\n                    connection.execute(text(index_sql))\n                except Exception as e:\n                    print(f\"Warning creando \u00edndice: {e}\")\n\n    def bulk_insert_comics(self, comics_data: List[Dict[str, Any]]) -&gt; List[str]:\n        \"\"\"Inserci\u00f3n masiva optimizada\"\"\"\n        with self.get_session() as session:\n            try:\n                comics = [Comicbook(**data) for data in comics_data]\n                session.add_all(comics)\n                session.commit()\n                return [comic.id_comicbook for comic in comics]\n            except Exception as e:\n                session.rollback()\n                raise e\n\n    def bulk_update_comics(self, updates: List[Dict[str, Any]]) -&gt; int:\n        \"\"\"Actualizaci\u00f3n masiva optimizada\"\"\"\n        with self.engine.connect() as connection:\n            try:\n                result = connection.execute(\n                    text(\"\"\"\n                        UPDATE comicbooks\n                        SET calidad = :quality,\n                            id_comicbook_info = :comic_info_id\n                        WHERE id_comicbook = :comic_id\n                    \"\"\"),\n                    updates\n                )\n                return result.rowcount\n            except Exception as e:\n                raise e\n</code></pre>"},{"location":"funcionalidades/base-datos/#migraciones-y-mantenimiento","title":"\ud83d\udd04 Migraciones y Mantenimiento","text":""},{"location":"funcionalidades/base-datos/#sistema-de-migraciones","title":"Sistema de Migraciones","text":""},{"location":"funcionalidades/base-datos/#gestion-de-esquema","title":"Gesti\u00f3n de Esquema","text":"<pre><code>from alembic import command\nfrom alembic.config import Config\nfrom alembic.script import ScriptDirectory\n\nclass MigrationManager:\n    \"\"\"Gestor de migraciones de base de datos\"\"\"\n\n    def __init__(self, database_manager: DatabaseManager):\n        self.db_manager = database_manager\n        self.alembic_cfg = Config(\"alembic.ini\")\n        self.alembic_cfg.set_main_option(\"sqlalchemy.url\", database_manager.database_url)\n\n    def check_migration_status(self) -&gt; Dict[str, Any]:\n        \"\"\"Verificar estado de migraciones\"\"\"\n        script = ScriptDirectory.from_config(self.alembic_cfg)\n\n        with self.db_manager.engine.connect() as connection:\n            context = script.get_current_head()\n            current = connection.execute(\n                text(\"SELECT version_num FROM alembic_version\")\n            ).scalar()\n\n            return {\n                'current_version': current,\n                'latest_version': context,\n                'needs_upgrade': current != context\n            }\n\n    def upgrade_database(self, revision='head'):\n        \"\"\"Ejecutar migraciones pendientes\"\"\"\n        try:\n            command.upgrade(self.alembic_cfg, revision)\n            return True\n        except Exception as e:\n            print(f\"Error en migraci\u00f3n: {e}\")\n            return False\n\n    def create_migration(self, message: str):\n        \"\"\"Crear nueva migraci\u00f3n\"\"\"\n        try:\n            command.revision(self.alembic_cfg, message=message, autogenerate=True)\n            return True\n        except Exception as e:\n            print(f\"Error creando migraci\u00f3n: {e}\")\n            return False\n</code></pre>"},{"location":"funcionalidades/base-datos/#mantenimiento-de-base-de-datos","title":"Mantenimiento de Base de Datos","text":""},{"location":"funcionalidades/base-datos/#tareas-de-limpieza","title":"Tareas de Limpieza","text":"<pre><code>class DatabaseMaintenance:\n    \"\"\"Herramientas de mantenimiento de base de datos\"\"\"\n\n    def __init__(self, database_manager: DatabaseManager):\n        self.db_manager = database_manager\n\n    def vacuum_database(self):\n        \"\"\"Optimizar y compactar base de datos\"\"\"\n        with self.db_manager.engine.connect() as connection:\n            connection.execute(text(\"VACUUM\"))\n            connection.execute(text(\"ANALYZE\"))\n\n    def check_integrity(self) -&gt; Dict[str, Any]:\n        \"\"\"Verificar integridad de la base de datos\"\"\"\n        with self.db_manager.engine.connect() as connection:\n            # Verificar integridad SQLite\n            integrity_result = connection.execute(text(\"PRAGMA integrity_check\")).fetchall()\n\n            # Verificar foreign keys\n            fk_result = connection.execute(text(\"PRAGMA foreign_key_check\")).fetchall()\n\n            return {\n                'integrity_ok': len(integrity_result) == 1 and integrity_result[0][0] == 'ok',\n                'integrity_errors': [row[0] for row in integrity_result if row[0] != 'ok'],\n                'foreign_key_ok': len(fk_result) == 0,\n                'foreign_key_errors': [dict(row) for row in fk_result]\n            }\n\n    def cleanup_orphaned_records(self) -&gt; Dict[str, int]:\n        \"\"\"Limpiar registros hu\u00e9rfanos\"\"\"\n\n        cleanup_counts = {}\n\n        with self.db_manager.get_session() as session:\n            try:\n                # Limpiar ComicbookInfo sin comics\n                orphaned_infos = session.query(ComicbookInfo).filter(\n                    ~ComicbookInfo.owned_comics.any()\n                ).all()\n\n                for info in orphaned_infos:\n                    session.delete(info)\n\n                cleanup_counts['orphaned_comic_infos'] = len(orphaned_infos)\n\n                # Limpiar portadas hu\u00e9rfanas\n                orphaned_covers = session.query(ComicbookInfoCover).filter(\n                    ~session.query(ComicbookInfo).filter(\n                        ComicbookInfo.id_comicbook_info == ComicbookInfoCover.id_comicbook_info\n                    ).exists()\n                ).all()\n\n                for cover in orphaned_covers:\n                    session.delete(cover)\n\n                cleanup_counts['orphaned_covers'] = len(orphaned_covers)\n\n                session.commit()\n\n            except Exception as e:\n                session.rollback()\n                raise e\n\n        return cleanup_counts\n\n    def update_volume_statistics(self):\n        \"\"\"Actualizar estad\u00edsticas de vol\u00famenes\"\"\"\n        with self.db_manager.get_session() as session:\n            try:\n                volumes = session.query(Volume).all()\n\n                for volume in volumes:\n                    # Contar issues en colecci\u00f3n\n                    issue_count = session.query(ComicbookInfo).filter(\n                        ComicbookInfo.id_volume == volume.id_volume\n                    ).count()\n\n                    volume.cantidad_numeros = issue_count\n\n                session.commit()\n\n            except Exception as e:\n                session.rollback()\n                raise e\n</code></pre> <p>\u00bfQuieres conocer m\u00e1s sobre la interfaz GTK4? \ud83d\udc49 Interfaz GTK4</p>"},{"location":"funcionalidades/catalogacion/","title":"Sistema de Catalogaci\u00f3n","text":"<p>El sistema de catalogaci\u00f3n de Babelcomics4 automatiza la organizaci\u00f3n y enriquecimiento de metadata de tu colecci\u00f3n de comics, integr\u00e1ndose con ComicVine para obtener informaci\u00f3n completa y precisa.</p>"},{"location":"funcionalidades/catalogacion/#objetivos-del-sistema","title":"\ud83c\udfaf Objetivos del Sistema","text":""},{"location":"funcionalidades/catalogacion/#automatizacion-inteligente","title":"Automatizaci\u00f3n Inteligente","text":"<ul> <li>Detecci\u00f3n autom\u00e1tica de comics en directorios</li> <li>Extracci\u00f3n de metadata desde nombres de archivo</li> <li>Asociaci\u00f3n inteligente con base de datos ComicVine</li> <li>Enriquecimiento progresivo de informaci\u00f3n</li> </ul>"},{"location":"funcionalidades/catalogacion/#gestion-eficiente","title":"Gesti\u00f3n Eficiente","text":"<ul> <li>Catalogaci\u00f3n en lote para grandes colecciones</li> <li>Actualizaci\u00f3n incremental de metadata</li> <li>Resoluci\u00f3n de conflictos autom\u00e1tica</li> <li>Backup y recuperaci\u00f3n de datos</li> </ul>"},{"location":"funcionalidades/catalogacion/#flujo-de-catalogacion","title":"\ud83d\udd04 Flujo de Catalogaci\u00f3n","text":""},{"location":"funcionalidades/catalogacion/#proceso-completo","title":"Proceso Completo","text":"<pre><code>graph TB\n    A[Escaneo de Archivos] --&gt; B[Detecci\u00f3n de Formato]\n    B --&gt; C[Extracci\u00f3n de Metadata B\u00e1sica]\n    C --&gt; D[B\u00fasqueda en ComicVine]\n    D --&gt; E[Asociaci\u00f3n con Issues]\n    E --&gt; F[Descarga de Portadas]\n    F --&gt; G[Actualizaci\u00f3n en BD]\n    G --&gt; H[Generaci\u00f3n de Thumbnails]\n    H --&gt; I[Actualizaci\u00f3n de UI]\n</code></pre>"},{"location":"funcionalidades/catalogacion/#etapas-detalladas","title":"Etapas Detalladas","text":""},{"location":"funcionalidades/catalogacion/#1-escaneo-y-deteccion","title":"1. Escaneo y Detecci\u00f3n","text":"<pre><code>def scan_directory_for_comics(directory_path):\n    \"\"\"Escanear directorio buscando comics\"\"\"\n\n    supported_extensions = ['.cbz', '.cbr', '.pdf']\n    comic_files = []\n\n    for root, dirs, files in os.walk(directory_path):\n        for file in files:\n            if any(file.lower().endswith(ext) for ext in supported_extensions):\n                full_path = os.path.join(root, file)\n                comic_files.append({\n                    'path': full_path,\n                    'filename': file,\n                    'size': os.path.getsize(full_path),\n                    'modified': os.path.getmtime(full_path)\n                })\n\n    return comic_files\n</code></pre>"},{"location":"funcionalidades/catalogacion/#2-extraccion-de-metadata","title":"2. Extracci\u00f3n de Metadata","text":"<pre><code>def extract_metadata_from_filename(filename):\n    \"\"\"Extraer informaci\u00f3n del nombre de archivo\"\"\"\n\n    patterns = [\n        # Superman #123 (2018).cbz\n        r'(.+?)\\s*#(\\d+)\\s*\\((\\d{4})\\)',\n\n        # Batman - Issue 45 - Title.cbz\n        r'(.+?)\\s*-\\s*Issue\\s*(\\d+)\\s*-\\s*(.+)',\n\n        # Spider-Man_001_Amazing.cbz\n        r'(.+?)_(\\d+)_(.+)',\n\n        # ActionComics123.cbr\n        r'([A-Za-z\\s]+)(\\d+)',\n    ]\n\n    metadata = {\n        'series': None,\n        'issue_number': None,\n        'year': None,\n        'title': None\n    }\n\n    for pattern in patterns:\n        match = re.match(pattern, filename)\n        if match:\n            groups = match.groups()\n            metadata['series'] = groups[0].strip()\n            metadata['issue_number'] = groups[1]\n\n            if len(groups) &gt; 2:\n                if groups[2].isdigit() and len(groups[2]) == 4:\n                    metadata['year'] = int(groups[2])\n                else:\n                    metadata['title'] = groups[2].strip()\n\n            break\n\n    return metadata\n</code></pre>"},{"location":"funcionalidades/catalogacion/#3-busqueda-en-comicvine","title":"3. B\u00fasqueda en ComicVine","text":"<pre><code>def search_comicvine_for_comic(metadata):\n    \"\"\"Buscar comic en ComicVine usando metadata extra\u00edda\"\"\"\n\n    client = ComicVineClient()\n\n    # 1. Buscar vol\u00famenes por nombre de serie\n    volume_results = client.search_volumes(metadata['series'])\n\n    # 2. Filtrar por a\u00f1o si disponible\n    if metadata['year']:\n        volume_results = [\n            v for v in volume_results\n            if abs(int(v.get('start_year', 0)) - metadata['year']) &lt;= 2\n        ]\n\n    # 3. Para cada volumen candidato, buscar issue espec\u00edfico\n    for volume in volume_results[:3]:  # Top 3 candidatos\n        issues = client.get_volume_issues(volume['id'])\n\n        for issue in issues:\n            if issue['issue_number'] == metadata['issue_number']:\n                return {\n                    'volume': volume,\n                    'issue': issue,\n                    'confidence': calculate_match_confidence(metadata, volume, issue)\n                }\n\n    return None\n</code></pre>"},{"location":"funcionalidades/catalogacion/#4-asociacion-inteligente","title":"4. Asociaci\u00f3n Inteligente","text":"<pre><code>def create_comicbook_info_from_comicvine(issue_data, volume_data):\n    \"\"\"Crear registro ComicbookInfo desde datos ComicVine\"\"\"\n\n    comicbook_info = ComicbookInfo(\n        titulo=issue_data.get('name', ''),\n        numero=str(issue_data.get('issue_number', '')),\n        fecha_tapa=parse_cover_date(issue_data.get('cover_date')),\n        resumen=clean_description(issue_data.get('description', '')),\n        url_api_detalle=issue_data.get('api_detail_url', ''),\n        url_sitio_web=issue_data.get('site_detail_url', ''),\n        calificacion=0.0,  # Inicial, puede ser actualizada\n        id_comicvine=issue_data.get('id'),\n        id_volume=get_or_create_volume(volume_data).id_volume\n    )\n\n    # Crear entrada de portada si hay imagen\n    if issue_data.get('image'):\n        cover = ComicbookInfoCover(\n            url_imagen=issue_data['image']['original_url'],\n            comic_info=comicbook_info\n        )\n        comicbook_info.portadas.append(cover)\n\n    return comicbook_info\n</code></pre>"},{"location":"funcionalidades/catalogacion/#inteligencia-de-catalogacion","title":"\ud83e\udde0 Inteligencia de Catalogaci\u00f3n","text":""},{"location":"funcionalidades/catalogacion/#algoritmos-de-coincidencia","title":"Algoritmos de Coincidencia","text":""},{"location":"funcionalidades/catalogacion/#calculo-de-confianza","title":"C\u00e1lculo de Confianza","text":"<pre><code>def calculate_match_confidence(extracted_metadata, volume, issue):\n    \"\"\"Calcular confianza de coincidencia (0.0 - 1.0)\"\"\"\n\n    confidence = 0.0\n\n    # Coincidencia de nombre de serie (peso: 40%)\n    series_similarity = calculate_string_similarity(\n        extracted_metadata['series'],\n        volume['name']\n    )\n    confidence += series_similarity * 0.4\n\n    # Coincidencia exacta de n\u00famero (peso: 30%)\n    if extracted_metadata['issue_number'] == issue['issue_number']:\n        confidence += 0.3\n\n    # Coincidencia de a\u00f1o (peso: 20%)\n    if extracted_metadata.get('year'):\n        year_diff = abs(\n            extracted_metadata['year'] - int(volume.get('start_year', 0))\n        )\n        year_confidence = max(0, 1 - (year_diff / 5))  # Tolerancia de 5 a\u00f1os\n        confidence += year_confidence * 0.2\n\n    # Coincidencia de t\u00edtulo (peso: 10%)\n    if extracted_metadata.get('title') and issue.get('name'):\n        title_similarity = calculate_string_similarity(\n            extracted_metadata['title'],\n            issue['name']\n        )\n        confidence += title_similarity * 0.1\n\n    return min(confidence, 1.0)\n\ndef calculate_string_similarity(str1, str2):\n    \"\"\"Calcular similitud entre strings usando Levenshtein\"\"\"\n    import difflib\n    return difflib.SequenceMatcher(None, str1.lower(), str2.lower()).ratio()\n</code></pre>"},{"location":"funcionalidades/catalogacion/#resolucion-de-ambiguedades","title":"Resoluci\u00f3n de Ambig\u00fcedades","text":"<pre><code>def resolve_multiple_matches(comic_file, candidates):\n    \"\"\"Resolver cuando hay m\u00faltiples candidatos\"\"\"\n\n    if not candidates:\n        return None\n\n    # Ordenar por confianza\n    candidates.sort(key=lambda x: x['confidence'], reverse=True)\n\n    # Si hay un claro ganador (diferencia &gt; 0.2)\n    if len(candidates) &gt; 1:\n        best = candidates[0]\n        second = candidates[1]\n\n        if best['confidence'] - second['confidence'] &gt; 0.2:\n            return best\n\n    # Si las confianzas son similares, usar criterios adicionales\n    return apply_tiebreaker_criteria(comic_file, candidates)\n\ndef apply_tiebreaker_criteria(comic_file, candidates):\n    \"\"\"Criterios de desempate para candidatos similares\"\"\"\n\n    # 1. Preferir vol\u00famenes m\u00e1s recientes\n    candidates.sort(key=lambda x: x['volume'].get('start_year', 0), reverse=True)\n\n    # 2. Preferir vol\u00famenes de editoriales principales\n    major_publishers = ['DC Comics', 'Marvel Comics', 'Image Comics']\n    for candidate in candidates:\n        if candidate['volume'].get('publisher', {}).get('name') in major_publishers:\n            return candidate\n\n    # 3. Devolver el primero si no hay criterio claro\n    return candidates[0]\n</code></pre>"},{"location":"funcionalidades/catalogacion/#catalogacion-en-lote","title":"Catalogaci\u00f3n en Lote","text":""},{"location":"funcionalidades/catalogacion/#procesamiento-asincrono","title":"Procesamiento As\u00edncrono","text":"<pre><code>class BatchCatalogingManager:\n    \"\"\"Gestor de catalogaci\u00f3n en lote\"\"\"\n\n    def __init__(self, session, comicvine_client):\n        self.session = session\n        self.client = comicvine_client\n        self.progress_callback = None\n        self.error_callback = None\n\n    def catalog_directory(self, directory_path, progress_callback=None):\n        \"\"\"Catalogar directorio completo\"\"\"\n\n        self.progress_callback = progress_callback\n\n        # 1. Escanear archivos\n        comic_files = scan_directory_for_comics(directory_path)\n        total_files = len(comic_files)\n\n        results = {\n            'processed': 0,\n            'cataloged': 0,\n            'errors': [],\n            'skipped': 0\n        }\n\n        for i, comic_file in enumerate(comic_files):\n            try:\n                # Actualizar progreso\n                if self.progress_callback:\n                    self.progress_callback(i + 1, total_files, comic_file['filename'])\n\n                # Verificar si ya existe\n                existing = self.session.query(Comicbook).filter_by(\n                    path=comic_file['path']\n                ).first()\n\n                if existing:\n                    results['skipped'] += 1\n                    continue\n\n                # Procesar archivo\n                success = self.catalog_single_file(comic_file)\n\n                if success:\n                    results['cataloged'] += 1\n                else:\n                    results['skipped'] += 1\n\n                results['processed'] += 1\n\n                # Rate limiting para ComicVine\n                time.sleep(0.5)\n\n            except Exception as e:\n                results['errors'].append({\n                    'file': comic_file['filename'],\n                    'error': str(e)\n                })\n\n        return results\n\n    def catalog_single_file(self, comic_file):\n        \"\"\"Catalogar archivo individual\"\"\"\n\n        # 1. Crear entrada b\u00e1sica de Comicbook\n        comic = Comicbook(\n            path=comic_file['path'],\n            filename=comic_file['filename'],\n            tama\u00f1o=comic_file['size'],\n            id_comicbook_info=''  # Sin catalogar inicialmente\n        )\n\n        self.session.add(comic)\n\n        # 2. Intentar catalogaci\u00f3n autom\u00e1tica\n        metadata = extract_metadata_from_filename(comic_file['filename'])\n\n        if metadata['series'] and metadata['issue_number']:\n            comicvine_match = search_comicvine_for_comic(metadata)\n\n            if comicvine_match and comicvine_match['confidence'] &gt; 0.7:\n                # Crear ComicbookInfo si hay buena coincidencia\n                comicbook_info = create_comicbook_info_from_comicvine(\n                    comicvine_match['issue'],\n                    comicvine_match['volume']\n                )\n\n                self.session.add(comicbook_info)\n                self.session.flush()  # Para obtener ID\n\n                comic.id_comicbook_info = str(comicbook_info.id_comicbook_info)\n\n        self.session.commit()\n        return True\n</code></pre>"},{"location":"funcionalidades/catalogacion/#configuracion-de-catalogacion","title":"\ud83c\udf9b\ufe0f Configuraci\u00f3n de Catalogaci\u00f3n","text":""},{"location":"funcionalidades/catalogacion/#parametros-configurables","title":"Par\u00e1metros Configurables","text":"<pre><code>class CatalogingConfig:\n    \"\"\"Configuraci\u00f3n del sistema de catalogaci\u00f3n\"\"\"\n\n    # Umbrales de confianza\n    AUTO_CATALOG_THRESHOLD = 0.8    # Catalogar autom\u00e1ticamente\n    MANUAL_REVIEW_THRESHOLD = 0.5   # Requerir revisi\u00f3n manual\n    REJECT_THRESHOLD = 0.3          # Rechazar autom\u00e1ticamente\n\n    # L\u00edmites de API\n    COMICVINE_REQUESTS_PER_HOUR = 200\n    REQUEST_DELAY_SECONDS = 0.5\n\n    # Procesamiento\n    MAX_CONCURRENT_CATALOGS = 3\n    BATCH_SIZE = 50\n\n    # Retry logic\n    MAX_RETRIES = 3\n    RETRY_DELAY = 2  # seconds\n\n    # Directivos de calidad\n    REQUIRE_COVER_IMAGE = True\n    REQUIRE_PUBLISHER_INFO = False\n    MINIMUM_DESCRIPTION_LENGTH = 50\n</code></pre>"},{"location":"funcionalidades/catalogacion/#perfiles-de-catalogacion","title":"Perfiles de Catalogaci\u00f3n","text":""},{"location":"funcionalidades/catalogacion/#perfil-conservador","title":"Perfil Conservador","text":"<pre><code>CONSERVATIVE_PROFILE = {\n    'auto_catalog_threshold': 0.9,\n    'require_manual_review': True,\n    'prefer_major_publishers': True,\n    'strict_year_matching': True\n}\n</code></pre>"},{"location":"funcionalidades/catalogacion/#perfil-agresivo","title":"Perfil Agresivo","text":"<pre><code>AGGRESSIVE_PROFILE = {\n    'auto_catalog_threshold': 0.6,\n    'require_manual_review': False,\n    'accept_fuzzy_matches': True,\n    'auto_create_volumes': True\n}\n</code></pre>"},{"location":"funcionalidades/catalogacion/#perfil-balanceado","title":"Perfil Balanceado","text":"<pre><code>BALANCED_PROFILE = {\n    'auto_catalog_threshold': 0.75,\n    'require_manual_review_below': 0.5,\n    'prefer_recent_volumes': True,\n    'validate_issue_numbers': True\n}\n</code></pre>"},{"location":"funcionalidades/catalogacion/#monitoreo-y-estadisticas","title":"\ud83d\udcca Monitoreo y Estad\u00edsticas","text":""},{"location":"funcionalidades/catalogacion/#metricas-de-catalogacion","title":"M\u00e9tricas de Catalogaci\u00f3n","text":"<pre><code>def generate_cataloging_report(session):\n    \"\"\"Generar reporte de estado de catalogaci\u00f3n\"\"\"\n\n    total_comics = session.query(Comicbook).count()\n    cataloged_comics = session.query(Comicbook).filter(\n        Comicbook.id_comicbook_info != ''\n    ).count()\n\n    uncataloged_comics = total_comics - cataloged_comics\n    catalog_percentage = (cataloged_comics / total_comics) * 100\n\n    # Distribuci\u00f3n por editorial\n    publisher_stats = session.query(\n        Volume.id_publisher,\n        func.count(Comicbook.id_comicbook).label('count')\n    ).join(ComicbookInfo).join(Volume).group_by(Volume.id_publisher).all()\n\n    # Distribuci\u00f3n por d\u00e9cada\n    decade_stats = session.query(\n        func.floor(Volume.anio_inicio / 10) * 10,\n        func.count(Comicbook.id_comicbook).label('count')\n    ).join(ComicbookInfo).join(Volume).group_by(\n        func.floor(Volume.anio_inicio / 10) * 10\n    ).all()\n\n    return {\n        'total_comics': total_comics,\n        'cataloged_comics': cataloged_comics,\n        'uncataloged_comics': uncataloged_comics,\n        'catalog_percentage': catalog_percentage,\n        'publisher_distribution': publisher_stats,\n        'decade_distribution': decade_stats\n    }\n</code></pre>"},{"location":"funcionalidades/catalogacion/#dashboard-de-catalogacion","title":"Dashboard de Catalogaci\u00f3n","text":"<pre><code>\u250c\u2500\u2500\u2500 Estado de Catalogaci\u00f3n \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                               \u2502\n\u2502 Total de Comics: 1,247                        \u2502\n\u2502 Catalogados: 892 (71.5%) \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591      \u2502\n\u2502 Sin Catalogar: 355 (28.5%) \u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591      \u2502\n\u2502                                               \u2502\n\u2502 \u00daltima Catalogaci\u00f3n: 2024-03-15 14:30        \u2502\n\u2502 Comics Agregados Hoy: 23                     \u2502\n\u2502 Errores Pendientes: 5                        \u2502\n\u2502                                               \u2502\n\u251c\u2500\u2500\u2500 Distribuci\u00f3n por Editorial \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Marvel Comics: 445 (35.7%)                   \u2502\n\u2502 DC Comics: 312 (25.0%)                       \u2502\n\u2502 Image Comics: 178 (14.3%)                    \u2502\n\u2502 Otros: 312 (25.0%)                           \u2502\n\u2502                                               \u2502\n\u251c\u2500\u2500\u2500 Acciones Disponibles \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 [\ud83d\udd04 Catalogar Pendientes]                    \u2502\n\u2502 [\ud83d\udcca Reporte Detallado]                       \u2502\n\u2502 [\u2699\ufe0f Configurar Perfiles]                     \u2502\n\u2502 [\ud83d\udd0d Revisar Conflictos]                      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"funcionalidades/catalogacion/#mantenimiento-y-optimizacion","title":"\ud83d\udee0\ufe0f Mantenimiento y Optimizaci\u00f3n","text":""},{"location":"funcionalidades/catalogacion/#limpieza-de-datos","title":"Limpieza de Datos","text":"<pre><code>def cleanup_catalog_data(session):\n    \"\"\"Limpiar datos inconsistentes de catalogaci\u00f3n\"\"\"\n\n    # 1. Eliminar ComicbookInfo hu\u00e9rfanos\n    orphaned_infos = session.query(ComicbookInfo).filter(\n        ~ComicbookInfo.owned_comics.any()\n    ).all()\n\n    for info in orphaned_infos:\n        session.delete(info)\n\n    # 2. Corregir asociaciones rotas\n    broken_comics = session.query(Comicbook).filter(\n        and_(\n            Comicbook.id_comicbook_info != '',\n            ~session.query(ComicbookInfo).filter(\n                ComicbookInfo.id_comicbook_info == Comicbook.id_comicbook_info\n            ).exists()\n        )\n    ).all()\n\n    for comic in broken_comics:\n        comic.id_comicbook_info = ''\n\n    # 3. Actualizar contadores de vol\u00famenes\n    volumes = session.query(Volume).all()\n    for volume in volumes:\n        issue_count = session.query(ComicbookInfo).filter(\n            ComicbookInfo.id_volume == volume.id_volume\n        ).count()\n        volume.cantidad_numeros = issue_count\n\n    session.commit()\n</code></pre>"},{"location":"funcionalidades/catalogacion/#optimizacion-de-performance","title":"Optimizaci\u00f3n de Performance","text":"<pre><code>def optimize_catalog_queries():\n    \"\"\"Optimizaciones para consultas de catalogaci\u00f3n\"\"\"\n\n    # 1. \u00cdndices para b\u00fasquedas frecuentes\n    CREATE_INDEXES = [\n        \"CREATE INDEX IF NOT EXISTS idx_comicbook_info_volume ON comicbooks_info(id_volume)\",\n        \"CREATE INDEX IF NOT EXISTS idx_comicbook_info_comicvine ON comicbooks_info(id_comicvine)\",\n        \"CREATE INDEX IF NOT EXISTS idx_comicbook_classified ON comicbooks(id_comicbook_info)\",\n        \"CREATE INDEX IF NOT EXISTS idx_volume_publisher ON volumens(id_publisher)\"\n    ]\n\n    # 2. An\u00e1lisis de estad\u00edsticas\n    ANALYZE_TABLES = [\n        \"ANALYZE comicbooks\",\n        \"ANALYZE comicbooks_info\",\n        \"ANALYZE volumens\"\n    ]\n</code></pre> <p>\u00bfQuieres saber m\u00e1s sobre el sistema de thumbnails? \ud83d\udc49 Thumbnails</p>"},{"location":"funcionalidades/interfaz/","title":"Interfaz GTK4","text":"<p>Babelcomics4 utiliza GTK4 y libadwaita para proporcionar una interfaz moderna, nativa y responsive que sigue las directrices de dise\u00f1o de GNOME, ofreciendo una experiencia de usuario fluida y accesible.</p>"},{"location":"funcionalidades/interfaz/#arquitectura-de-la-interfaz","title":"\ud83c\udfa8 Arquitectura de la Interfaz","text":""},{"location":"funcionalidades/interfaz/#stack-tecnologico","title":"Stack Tecnol\u00f3gico","text":""},{"location":"funcionalidades/interfaz/#componentes-principales","title":"Componentes Principales","text":"<pre><code>UI_STACK = {\n    'Toolkit': 'GTK 4.8+',\n    'Design_System': 'libadwaita 1.2+',\n    'Language': 'Python 3.13',\n    'Binding': 'PyGObject (gi)',\n    'Icons': 'Adwaita Icon Theme',\n    'Styling': 'CSS + Adwaita Styles',\n    'Accessibility': 'ATK + screen readers'\n}\n\n# Dependencias principales\nDEPENDENCIES = {\n    'gtk4': '&gt;=4.8.0',\n    'libadwaita': '&gt;=1.2.0',\n    'pygobject': '&gt;=3.42.0',\n    'cairo': '&gt;=1.20.0',\n    'pango': '&gt;=1.50.0'\n}\n</code></pre>"},{"location":"funcionalidades/interfaz/#patrones-de-diseno","title":"Patrones de Dise\u00f1o","text":""},{"location":"funcionalidades/interfaz/#model-view-controller-mvc","title":"Model-View-Controller (MVC)","text":"<pre><code>from gi.repository import Gtk, Adw, GObject, Gio\nfrom abc import ABC, abstractmethod\n\nclass BaseController(ABC):\n    \"\"\"Controlador base para todas las vistas\"\"\"\n\n    def __init__(self, application, model=None):\n        self.application = application\n        self.model = model\n        self.view = None\n\n    @abstractmethod\n    def create_view(self):\n        \"\"\"Crear la vista asociada\"\"\"\n        pass\n\n    @abstractmethod\n    def setup_signals(self):\n        \"\"\"Configurar se\u00f1ales y eventos\"\"\"\n        pass\n\n    def show(self):\n        \"\"\"Mostrar la vista\"\"\"\n        if not self.view:\n            self.view = self.create_view()\n            self.setup_signals()\n        return self.view\n\nclass BaseView(Gtk.Widget):\n    \"\"\"Vista base con funcionalidad com\u00fan\"\"\"\n\n    def __init__(self, controller=None):\n        super().__init__()\n        self.controller = controller\n        self.setup_ui()\n\n    @abstractmethod\n    def setup_ui(self):\n        \"\"\"Configurar elementos de la interfaz\"\"\"\n        pass\n\n    def show_error(self, message: str, details: str = None):\n        \"\"\"Mostrar di\u00e1logo de error\"\"\"\n        dialog = Adw.MessageDialog.new(\n            self.get_root(),\n            _(\"Error\"),\n            message\n        )\n        if details:\n            dialog.set_body(details)\n        dialog.add_response(\"ok\", _(\"OK\"))\n        dialog.present()\n\n    def show_confirmation(self, message: str, callback=None):\n        \"\"\"Mostrar di\u00e1logo de confirmaci\u00f3n\"\"\"\n        dialog = Adw.MessageDialog.new(\n            self.get_root(),\n            _(\"Confirmaci\u00f3n\"),\n            message\n        )\n        dialog.add_response(\"cancel\", _(\"Cancelar\"))\n        dialog.add_response(\"confirm\", _(\"Confirmar\"))\n        dialog.set_response_appearance(\"confirm\", Adw.ResponseAppearance.DESTRUCTIVE)\n\n        if callback:\n            dialog.connect(\"response\", callback)\n\n        dialog.present()\n</code></pre>"},{"location":"funcionalidades/interfaz/#estructura-de-la-aplicacion","title":"\ud83c\udfd7\ufe0f Estructura de la Aplicaci\u00f3n","text":""},{"location":"funcionalidades/interfaz/#aplicacion-principal","title":"Aplicaci\u00f3n Principal","text":""},{"location":"funcionalidades/interfaz/#comicmanagerapplication","title":"ComicManagerApplication","text":"<pre><code>@Gtk.Template(resource_path='/org/gnome/Babelcomics4/ui/application.ui')\nclass ComicManagerApplication(Adw.Application):\n    \"\"\"Aplicaci\u00f3n principal de Babelcomics4\"\"\"\n\n    __gtype_name__ = 'ComicManagerApplication'\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.set_application_id(\"org.gnome.Babelcomics4\")\n        self.set_flags(Gio.ApplicationFlags.HANDLES_OPEN)\n\n        # Controladores principales\n        self.main_controller = None\n        self.preferences_controller = None\n        self.comic_detail_controller = None\n\n        # Servicios\n        self.database_manager = None\n        self.comic_repository = None\n        self.thumbnail_generator = None\n\n        self.setup_actions()\n        self.setup_services()\n\n    def do_activate(self):\n        \"\"\"Activar aplicaci\u00f3n (primera vez o enfoque)\"\"\"\n        if not self.main_controller:\n            self.main_controller = MainController(self)\n\n        window = self.main_controller.show()\n        window.present()\n\n    def setup_actions(self):\n        \"\"\"Configurar acciones de la aplicaci\u00f3n\"\"\"\n        actions = [\n            (\"preferences\", self.on_preferences),\n            (\"about\", self.on_about),\n            (\"quit\", self.on_quit),\n            (\"import_comics\", self.on_import_comics),\n            (\"scan_directory\", self.on_scan_directory),\n            (\"update_comicvine\", self.on_update_comicvine)\n        ]\n\n        for action_name, callback in actions:\n            action = Gio.SimpleAction.new(action_name, None)\n            action.connect(\"activate\", callback)\n            self.add_action(action)\n\n    def setup_services(self):\n        \"\"\"Inicializar servicios de la aplicaci\u00f3n\"\"\"\n        from .services import DatabaseManager, ComicRepository, ThumbnailGenerator\n\n        self.database_manager = DatabaseManager()\n        self.comic_repository = ComicRepository(self.database_manager.get_session())\n        self.thumbnail_generator = ThumbnailGenerator()\n\n    def on_preferences(self, action, param):\n        \"\"\"Mostrar ventana de preferencias\"\"\"\n        if not self.preferences_controller:\n            self.preferences_controller = PreferencesController(self)\n\n        window = self.preferences_controller.show()\n        window.set_transient_for(self.get_active_window())\n        window.present()\n</code></pre>"},{"location":"funcionalidades/interfaz/#ventana-principal","title":"Ventana Principal","text":""},{"location":"funcionalidades/interfaz/#mainwindow","title":"MainWindow","text":"<pre><code>@Gtk.Template(resource_path='/org/gnome/Babelcomics4/ui/main_window.ui')\nclass MainWindow(Adw.ApplicationWindow):\n    \"\"\"Ventana principal de la aplicaci\u00f3n\"\"\"\n\n    __gtype_name__ = 'MainWindow'\n\n    # Referencias a widgets del template\n    header_bar = Gtk.Template.Child()\n    navigation_view = Gtk.Template.Child()\n    search_entry = Gtk.Template.Child()\n    filter_button = Gtk.Template.Child()\n    view_switcher = Gtk.Template.Child()\n\n    # P\u00e1ginas principales\n    library_page = Gtk.Template.Child()\n    volumes_page = Gtk.Template.Child()\n    collection_page = Gtk.Template.Child()\n\n    def __init__(self, application, controller):\n        super().__init__(application=application)\n        self.controller = controller\n\n        self.setup_header_bar()\n        self.setup_navigation()\n        self.setup_search()\n        self.setup_shortcuts()\n\n    def setup_header_bar(self):\n        \"\"\"Configurar barra de t\u00edtulo\"\"\"\n        # Bot\u00f3n de men\u00fa principal\n        menu_button = Gtk.MenuButton()\n        menu_button.set_icon_name(\"open-menu-symbolic\")\n        menu_button.set_menu_model(self.create_primary_menu())\n        self.header_bar.pack_end(menu_button)\n\n        # Bot\u00f3n de filtros\n        self.filter_button.connect(\"clicked\", self.on_filter_clicked)\n\n        # Bot\u00f3n de vista\n        self.view_switcher.connect(\"notify::selected-page\", self.on_view_changed)\n\n    def setup_navigation(self):\n        \"\"\"Configurar navegaci\u00f3n entre p\u00e1ginas\"\"\"\n        # Configurar p\u00e1ginas\n        self.library_controller = LibraryController(self.controller.application)\n        self.volumes_controller = VolumesController(self.controller.application)\n\n        # A\u00f1adir controladores a las p\u00e1ginas\n        self.library_page.set_child(self.library_controller.show())\n        self.volumes_page.set_child(self.volumes_controller.show())\n\n    def setup_search(self):\n        \"\"\"Configurar b\u00fasqueda global\"\"\"\n        self.search_entry.connect(\"search-changed\", self.on_search_changed)\n        self.search_entry.connect(\"activate\", self.on_search_activate)\n\n        # Configurar timeout para b\u00fasqueda en tiempo real\n        self.search_timeout_id = None\n\n    def create_primary_menu(self):\n        \"\"\"Crear men\u00fa principal\"\"\"\n        menu = Gio.Menu()\n\n        # Secci\u00f3n de archivos\n        file_section = Gio.Menu()\n        file_section.append(_(\"Import Comics\"), \"app.import_comics\")\n        file_section.append(_(\"Scan Directory\"), \"app.scan_directory\")\n        menu.append_section(None, file_section)\n\n        # Secci\u00f3n de herramientas\n        tools_section = Gio.Menu()\n        tools_section.append(_(\"Update ComicVine\"), \"app.update_comicvine\")\n        tools_section.append(_(\"Preferences\"), \"app.preferences\")\n        menu.append_section(None, tools_section)\n\n        # Secci\u00f3n de ayuda\n        help_section = Gio.Menu()\n        help_section.append(_(\"About Babelcomics4\"), \"app.about\")\n        menu.append_section(None, help_section)\n\n        return menu\n\n    def on_search_changed(self, search_entry):\n        \"\"\"Manejar cambios en la b\u00fasqueda\"\"\"\n        if self.search_timeout_id:\n            GLib.source_remove(self.search_timeout_id)\n\n        # Delay de 300ms para evitar b\u00fasquedas excesivas\n        self.search_timeout_id = GLib.timeout_add(\n            300,\n            self.perform_search,\n            search_entry.get_text()\n        )\n\n    def perform_search(self, search_term):\n        \"\"\"Realizar b\u00fasqueda\"\"\"\n        self.search_timeout_id = None\n\n        # Aplicar b\u00fasqueda al controlador activo\n        active_page = self.view_switcher.get_selected_page()\n        if active_page == 0:  # Library\n            self.library_controller.set_search_term(search_term)\n        elif active_page == 1:  # Volumes\n            self.volumes_controller.set_search_term(search_term)\n\n        return GLib.SOURCE_REMOVE\n</code></pre>"},{"location":"funcionalidades/interfaz/#vistas-de-contenido","title":"\ud83d\udcda Vistas de Contenido","text":""},{"location":"funcionalidades/interfaz/#vista-de-biblioteca","title":"Vista de Biblioteca","text":""},{"location":"funcionalidades/interfaz/#libraryview","title":"LibraryView","text":"<pre><code>@Gtk.Template(resource_path='/org/gnome/Babelcomics4/ui/library_view.ui')\nclass LibraryView(Gtk.Box):\n    \"\"\"Vista principal de la biblioteca de comics\"\"\"\n\n    __gtype_name__ = 'LibraryView'\n\n    # Widgets del template\n    scrolled_window = Gtk.Template.Child()\n    grid_view = Gtk.Template.Child()\n    list_view = Gtk.Template.Child()\n    view_stack = Gtk.Template.Child()\n    status_page = Gtk.Template.Child()\n\n    def __init__(self, controller):\n        super().__init__()\n        self.controller = controller\n\n        # Modelos de datos\n        self.comic_model = Gio.ListStore.new(ComicItem)\n        self.filter_model = Gtk.FilterListModel.new(self.comic_model, None)\n        self.sort_model = Gtk.SortListModel.new(self.filter_model, None)\n\n        self.setup_views()\n        self.setup_selection()\n        self.load_comics()\n\n    def setup_views(self):\n        \"\"\"Configurar vistas de grid y lista\"\"\"\n        # Vista de grid (por defecto)\n        grid_factory = Gtk.SignalListItemFactory()\n        grid_factory.connect(\"setup\", self.on_grid_item_setup)\n        grid_factory.connect(\"bind\", self.on_grid_item_bind)\n        grid_factory.connect(\"unbind\", self.on_grid_item_unbind)\n\n        self.grid_view.set_factory(grid_factory)\n        self.grid_view.set_model(self.sort_model)\n\n        # Vista de lista\n        list_factory = Gtk.SignalListItemFactory()\n        list_factory.connect(\"setup\", self.on_list_item_setup)\n        list_factory.connect(\"bind\", self.on_list_item_bind)\n\n        self.list_view.set_factory(list_factory)\n        self.list_view.set_model(self.sort_model)\n\n    def on_grid_item_setup(self, factory, list_item):\n        \"\"\"Configurar elemento de grid\"\"\"\n        card = ComicCard()\n        list_item.set_child(card)\n\n    def on_grid_item_bind(self, factory, list_item):\n        \"\"\"Vincular datos a elemento de grid\"\"\"\n        comic_item = list_item.get_item()\n        card = list_item.get_child()\n        card.bind_comic(comic_item)\n\n        # Configurar eventos\n        card.connect(\"clicked\", self.on_comic_clicked, comic_item)\n        card.connect(\"secondary-clicked\", self.on_comic_secondary_clicked, comic_item)\n\n    def load_comics(self, filters=None):\n        \"\"\"Cargar comics desde la base de datos\"\"\"\n        def load_comics_thread():\n            comics = self.controller.get_comics(filters)\n            GLib.idle_add(self.update_comic_model, comics)\n\n        # Cargar en hilo separado para no bloquear UI\n        thread = threading.Thread(target=load_comics_thread)\n        thread.daemon = True\n        thread.start()\n\n    def update_comic_model(self, comics):\n        \"\"\"Actualizar modelo con comics cargados\"\"\"\n        self.comic_model.remove_all()\n\n        for comic in comics:\n            comic_item = ComicItem(comic)\n            self.comic_model.append(comic_item)\n\n        # Mostrar p\u00e1gina apropiada\n        if len(comics) &gt; 0:\n            self.view_stack.set_visible_child(self.scrolled_window)\n        else:\n            self.status_page.set_title(_(\"No comics found\"))\n            self.status_page.set_description(_(\"Try adjusting your search or filters\"))\n            self.view_stack.set_visible_child(self.status_page)\n\n        return GLib.SOURCE_REMOVE\n</code></pre>"},{"location":"funcionalidades/interfaz/#tarjeta-de-comic","title":"Tarjeta de Comic","text":""},{"location":"funcionalidades/interfaz/#comiccard","title":"ComicCard","text":"<pre><code>@Gtk.Template(resource_path='/org/gnome/Babelcomics4/ui/comic_card.ui')\nclass ComicCard(Gtk.Box):\n    \"\"\"Tarjeta individual de comic\"\"\"\n\n    __gtype_name__ = 'ComicCard'\n\n    # Widgets del template\n    thumbnail_image = Gtk.Template.Child()\n    title_label = Gtk.Template.Child()\n    subtitle_label = Gtk.Template.Child()\n    quality_box = Gtk.Template.Child()\n    status_overlay = Gtk.Template.Child()\n\n    def __init__(self):\n        super().__init__()\n        self.comic_item = None\n        self.setup_gestures()\n\n    def setup_gestures(self):\n        \"\"\"Configurar gestos y eventos\"\"\"\n        # Click principal\n        click_gesture = Gtk.GestureClick()\n        click_gesture.set_button(1)  # Bot\u00f3n izquierdo\n        click_gesture.connect(\"pressed\", self.on_primary_click)\n        self.add_controller(click_gesture)\n\n        # Click secundario (men\u00fa contextual)\n        right_click = Gtk.GestureClick()\n        right_click.set_button(3)  # Bot\u00f3n derecho\n        right_click.connect(\"pressed\", self.on_secondary_click)\n        self.add_controller(right_click)\n\n        # Hover para feedback visual\n        motion_controller = Gtk.EventControllerMotion()\n        motion_controller.connect(\"enter\", self.on_hover_enter)\n        motion_controller.connect(\"leave\", self.on_hover_leave)\n        self.add_controller(motion_controller)\n\n    def bind_comic(self, comic_item):\n        \"\"\"Vincular datos del comic a la tarjeta\"\"\"\n        self.comic_item = comic_item\n        comic = comic_item.comic\n\n        # T\u00edtulo y subt\u00edtulo\n        if comic.is_cataloged and comic.comic_info:\n            self.title_label.set_text(comic.comic_info.display_title)\n            publisher = comic.comic_info.volume.publisher.nombre if comic.comic_info.volume and comic.comic_info.volume.publisher else \"\"\n            self.subtitle_label.set_text(publisher)\n        else:\n            self.title_label.set_text(comic.filename)\n            self.subtitle_label.set_text(f\"{comic.file_size_mb} MB\")\n\n        # Thumbnail\n        self.load_thumbnail_async(comic)\n\n        # Indicadores de calidad\n        self.update_quality_indicators(comic)\n\n        # Estado visual\n        self.update_visual_state(comic)\n\n    def load_thumbnail_async(self, comic):\n        \"\"\"Cargar thumbnail de forma as\u00edncrona\"\"\"\n        def load_thumbnail():\n            thumbnail_path = self.get_application().thumbnail_generator.get_thumbnail_path(comic)\n            GLib.idle_add(self.set_thumbnail, thumbnail_path)\n\n        thread = threading.Thread(target=load_thumbnail)\n        thread.daemon = True\n        thread.start()\n\n    def set_thumbnail(self, thumbnail_path):\n        \"\"\"Establecer imagen del thumbnail\"\"\"\n        if thumbnail_path and os.path.exists(thumbnail_path):\n            pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale(\n                thumbnail_path, 200, 300, True\n            )\n            texture = Gdk.Texture.new_for_pixbuf(pixbuf)\n            self.thumbnail_image.set_from_paintable(texture)\n        else:\n            self.thumbnail_image.set_from_icon_name(\"image-missing-symbolic\")\n\n        return GLib.SOURCE_REMOVE\n\n    def update_quality_indicators(self, comic):\n        \"\"\"Actualizar indicadores de calidad\"\"\"\n        # Limpiar indicadores existentes\n        child = self.quality_box.get_first_child()\n        while child:\n            next_child = child.get_next_sibling()\n            self.quality_box.remove(child)\n            child = next_child\n\n        # A\u00f1adir estrellas de calidad\n        for i in range(5):\n            star = Gtk.Image()\n            if i &lt; comic.calidad:\n                star.set_from_icon_name(\"starred-symbolic\")\n                star.add_css_class(\"star-filled\")\n            else:\n                star.set_from_icon_name(\"non-starred-symbolic\")\n                star.add_css_class(\"star-empty\")\n\n            self.quality_box.append(star)\n\n    def update_visual_state(self, comic):\n        \"\"\"Actualizar estado visual de la tarjeta\"\"\"\n        # Limpiar clases CSS existentes\n        self.remove_css_class(\"comic-cataloged\")\n        self.remove_css_class(\"comic-uncataloged\")\n        self.remove_css_class(\"comic-trash\")\n\n        # Aplicar clase apropiada\n        if comic.en_papelera:\n            self.add_css_class(\"comic-trash\")\n        elif comic.is_cataloged:\n            self.add_css_class(\"comic-cataloged\")\n        else:\n            self.add_css_class(\"comic-uncataloged\")\n\n    def on_primary_click(self, gesture, n_press, x, y):\n        \"\"\"Manejar click principal\"\"\"\n        if n_press == 2:  # Doble click\n            self.emit(\"activated\", self.comic_item)\n        else:  # Click simple\n            self.emit(\"clicked\", self.comic_item)\n\n    def on_secondary_click(self, gesture, n_press, x, y):\n        \"\"\"Manejar click secundario (men\u00fa contextual)\"\"\"\n        self.emit(\"secondary-clicked\", self.comic_item)\n\n    def on_hover_enter(self, controller, x, y):\n        \"\"\"Efecto visual al pasar el mouse\"\"\"\n        self.add_css_class(\"card-hover\")\n\n    def on_hover_leave(self, controller):\n        \"\"\"Quitar efecto visual al salir el mouse\"\"\"\n        self.remove_css_class(\"card-hover\")\n\n    # Se\u00f1ales personalizadas\n    @GObject.Signal(arg_types=(object,))\n    def clicked(self, comic_item):\n        pass\n\n    @GObject.Signal(arg_types=(object,))\n    def activated(self, comic_item):\n        pass\n\n    @GObject.Signal(arg_types=(object,))\n    def secondary_clicked(self, comic_item):\n        pass\n</code></pre>"},{"location":"funcionalidades/interfaz/#theming-y-estilos","title":"\ud83c\udfa8 Theming y Estilos","text":""},{"location":"funcionalidades/interfaz/#estilos-css-personalizados","title":"Estilos CSS Personalizados","text":""},{"location":"funcionalidades/interfaz/#archivo-stylecss","title":"Archivo style.css","text":"<pre><code>/* Estilos para tarjetas de comics */\n.comic-card {\n    border-radius: 12px;\n    margin: 6px;\n    transition: all 200ms ease-in-out;\n    background: @card_bg_color;\n    border: 1px solid @card_border_color;\n}\n\n.comic-card:hover,\n.comic-card.card-hover {\n    transform: translateY(-2px);\n    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.15);\n}\n\n.comic-card.comic-cataloged {\n    border-left: 4px solid @success_color;\n}\n\n.comic-card.comic-uncataloged {\n    border-left: 4px solid @warning_color;\n}\n\n.comic-card.comic-uncataloged image {\n    filter: grayscale(100%);\n    opacity: 0.8;\n}\n\n.comic-card.comic-trash {\n    opacity: 0.6;\n    filter: grayscale(50%);\n    border-left: 4px solid @error_color;\n}\n\n/* Indicadores de calidad */\n.star-filled {\n    color: @accent_color;\n}\n\n.star-empty {\n    color: @insensitive_fg_color;\n    opacity: 0.5;\n}\n\n/* Vista de vol\u00famenes */\n.volume-row {\n    padding: 12px;\n    border-radius: 8px;\n    margin: 4px 0;\n    transition: background-color 200ms ease;\n}\n\n.volume-row:hover {\n    background-color: @card_hover_bg_color;\n}\n\n.volume-complete {\n    background: linear-gradient(\n        90deg,\n        transparent 0%,\n        @success_bg_color 100%\n    );\n}\n\n.volume-progress {\n    background: linear-gradient(\n        90deg,\n        transparent 0%,\n        @accent_bg_color 100%\n    );\n}\n\n/* Filtros y controles */\n.filter-chip {\n    border-radius: 16px;\n    padding: 6px 12px;\n    margin: 2px;\n    background: @accent_bg_color;\n    color: @accent_fg_color;\n    border: 1px solid @accent_color;\n}\n\n.filter-chip.active {\n    background: @accent_color;\n    color: @accent_fg_color;\n}\n\n/* Animaciones de carga */\n.loading-spinner {\n    animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n    from { transform: rotate(0deg); }\n    to { transform: rotate(360deg); }\n}\n\n/* Responsive design */\n@media (max-width: 768px) {\n    .comic-card {\n        margin: 3px;\n    }\n\n    .volume-row {\n        padding: 8px;\n    }\n}\n\n/* Dark mode adaptations */\n@media (prefers-color-scheme: dark) {\n    .comic-card {\n        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);\n    }\n\n    .comic-card:hover {\n        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.4);\n    }\n}\n</code></pre>"},{"location":"funcionalidades/interfaz/#sistema-de-iconos","title":"Sistema de Iconos","text":""},{"location":"funcionalidades/interfaz/#iconos-personalizados","title":"Iconos Personalizados","text":"<pre><code>class IconManager:\n    \"\"\"Gestor de iconos de la aplicaci\u00f3n\"\"\"\n\n    ICON_MAPPINGS = {\n        'comic-cataloged': 'emblem-ok-symbolic',\n        'comic-uncataloged': 'dialog-question-symbolic',\n        'comic-trash': 'user-trash-symbolic',\n        'comic-error': 'dialog-error-symbolic',\n        'quality-1': 'starred-symbolic',\n        'quality-2': 'starred-symbolic',\n        'quality-3': 'starred-symbolic',\n        'quality-4': 'starred-symbolic',\n        'quality-5': 'starred-symbolic',\n        'publisher-dc': 'applications-graphics-symbolic',\n        'publisher-marvel': 'applications-graphics-symbolic',\n        'format-cbz': 'package-x-generic-symbolic',\n        'format-cbr': 'package-x-generic-symbolic',\n        'format-pdf': 'application-pdf-symbolic'\n    }\n\n    @classmethod\n    def get_icon_name(cls, icon_key, fallback='image-missing-symbolic'):\n        \"\"\"Obtener nombre de icono por clave\"\"\"\n        return cls.ICON_MAPPINGS.get(icon_key, fallback)\n\n    @classmethod\n    def load_custom_icons(cls):\n        \"\"\"Cargar iconos personalizados de la aplicaci\u00f3n\"\"\"\n        icon_theme = Gtk.IconTheme.get_for_display(Gdk.Display.get_default())\n\n        # A\u00f1adir directorio de iconos de la aplicaci\u00f3n\n        icon_theme.add_resource_path(\"/org/gnome/Babelcomics4/icons\")\n\n        # Registrar iconos personalizados si est\u00e1n disponibles\n        custom_icons = [\n            'babelcomics4-app-icon',\n            'comic-book-symbolic',\n            'volume-symbolic',\n            'collection-symbolic'\n        ]\n\n        for icon_name in custom_icons:\n            if icon_theme.has_icon(icon_name):\n                print(f\"Icono personalizado cargado: {icon_name}\")\n</code></pre>"},{"location":"funcionalidades/interfaz/#optimizacion-de-rendimiento","title":"\ud83d\ude80 Optimizaci\u00f3n de Rendimiento","text":""},{"location":"funcionalidades/interfaz/#lazy-loading","title":"Lazy Loading","text":""},{"location":"funcionalidades/interfaz/#carga-diferida-de-contenido","title":"Carga Diferida de Contenido","text":"<pre><code>class LazyComicLoader:\n    \"\"\"Cargador lazy de contenido de comics\"\"\"\n\n    def __init__(self, batch_size=50):\n        self.batch_size = batch_size\n        self.loading_batches = set()\n\n    def setup_lazy_loading(self, list_view, model):\n        \"\"\"Configurar carga lazy en vista de lista\"\"\"\n\n        def on_items_changed(list_model, position, removed, added):\n            # Verificar si necesitamos cargar m\u00e1s elementos\n            last_visible = position + added\n            total_items = list_model.get_n_items()\n\n            # Si estamos cerca del final, cargar m\u00e1s\n            if last_visible &gt; total_items - 10:\n                self.load_next_batch(list_model)\n\n        model.connect(\"items-changed\", on_items_changed)\n\n    def load_next_batch(self, model):\n        \"\"\"Cargar siguiente lote de elementos\"\"\"\n        current_size = model.get_n_items()\n        batch_start = current_size\n\n        # Evitar cargas duplicadas\n        if batch_start in self.loading_batches:\n            return\n\n        self.loading_batches.add(batch_start)\n\n        def load_batch_async():\n            # Simular carga de datos\n            new_items = self.fetch_comics_batch(batch_start, self.batch_size)\n            GLib.idle_add(self.add_items_to_model, model, new_items, batch_start)\n\n        thread = threading.Thread(target=load_batch_async)\n        thread.daemon = True\n        thread.start()\n\n    def add_items_to_model(self, model, items, batch_start):\n        \"\"\"A\u00f1adir elementos al modelo\"\"\"\n        for item in items:\n            model.append(item)\n\n        self.loading_batches.discard(batch_start)\n        return GLib.SOURCE_REMOVE\n</code></pre>"},{"location":"funcionalidades/interfaz/#virtualizacion","title":"Virtualizaci\u00f3n","text":""},{"location":"funcionalidades/interfaz/#vista-virtualizada-para-grandes-colecciones","title":"Vista Virtualizada para Grandes Colecciones","text":"<pre><code>class VirtualizedComicView(Gtk.ScrolledWindow):\n    \"\"\"Vista virtualizada para manejar grandes colecciones\"\"\"\n\n    def __init__(self, controller):\n        super().__init__()\n        self.controller = controller\n\n        # Configurar scrolling\n        self.set_policy(Gtk.PolicyType.NEVER, Gtk.PolicyType.AUTOMATIC)\n        self.set_kinetic_scrolling(True)\n        self.set_overlay_scrolling(True)\n\n        # Modelo virtual\n        self.virtual_model = VirtualComicModel(controller)\n\n        # Vista con soporte de virtualizaci\u00f3n\n        self.list_view = Gtk.ListView()\n        self.list_view.set_model(self.virtual_model)\n        self.list_view.set_single_click_activate(True)\n\n        # Factory para elementos\n        self.setup_item_factory()\n\n        self.set_child(self.list_view)\n\n    def setup_item_factory(self):\n        \"\"\"Configurar factory de elementos con pooling\"\"\"\n        factory = Gtk.SignalListItemFactory()\n        factory.connect(\"setup\", self.on_item_setup)\n        factory.connect(\"bind\", self.on_item_bind)\n        factory.connect(\"unbind\", self.on_item_unbind)\n        factory.connect(\"teardown\", self.on_item_teardown)\n\n        self.list_view.set_factory(factory)\n\n    def on_item_setup(self, factory, list_item):\n        \"\"\"Setup con pooling de widgets\"\"\"\n        widget = self.get_pooled_widget() or ComicCard()\n        list_item.set_child(widget)\n\n    def get_pooled_widget(self):\n        \"\"\"Obtener widget reutilizable del pool\"\"\"\n        # Implementar pool de widgets para mejor rendimiento\n        if hasattr(self, '_widget_pool') and self._widget_pool:\n            return self._widget_pool.pop()\n        return None\n\n    def return_to_pool(self, widget):\n        \"\"\"Devolver widget al pool\"\"\"\n        if not hasattr(self, '_widget_pool'):\n            self._widget_pool = []\n\n        if len(self._widget_pool) &lt; 100:  # L\u00edmite del pool\n            widget.unbind_comic()  # Limpiar datos\n            self._widget_pool.append(widget)\n</code></pre>"},{"location":"funcionalidades/interfaz/#internacionalizacion","title":"\ud83c\udf0d Internacionalizaci\u00f3n","text":""},{"location":"funcionalidades/interfaz/#soporte-multi-idioma","title":"Soporte Multi-idioma","text":""},{"location":"funcionalidades/interfaz/#configuracion-de-i18n","title":"Configuraci\u00f3n de i18n","text":"<pre><code>import gettext\nimport locale\nimport os\n\nclass InternationalizationManager:\n    \"\"\"Gestor de internacionalizaci\u00f3n\"\"\"\n\n    def __init__(self):\n        self.domain = 'babelcomics4'\n        self.localedir = os.path.join(os.path.dirname(__file__), 'locale')\n        self.current_locale = None\n\n        self.setup_locale()\n\n    def setup_locale(self):\n        \"\"\"Configurar locale del sistema\"\"\"\n        try:\n            # Detectar locale del sistema\n            locale.setlocale(locale.LC_ALL, '')\n            system_locale = locale.getlocale()[0]\n\n            # Configurar gettext\n            gettext.bindtextdomain(self.domain, self.localedir)\n            gettext.textdomain(self.domain)\n\n            # Instalar funci\u00f3n _ globalmente\n            gettext.install(self.domain, self.localedir)\n\n            self.current_locale = system_locale\n            print(f\"Locale configurado: {system_locale}\")\n\n        except locale.Error as e:\n            print(f\"Error configurando locale: {e}\")\n            # Fallback a ingl\u00e9s\n            self.current_locale = 'en_US'\n\n    def get_available_locales(self):\n        \"\"\"Obtener locales disponibles\"\"\"\n        locales = []\n\n        if os.path.exists(self.localedir):\n            for item in os.listdir(self.localedir):\n                locale_path = os.path.join(self.localedir, item, 'LC_MESSAGES', f'{self.domain}.mo')\n                if os.path.exists(locale_path):\n                    locales.append(item)\n\n        return locales\n\n    def change_locale(self, locale_code):\n        \"\"\"Cambiar locale de la aplicaci\u00f3n\"\"\"\n        try:\n            translation = gettext.translation(self.domain, self.localedir, [locale_code])\n            translation.install()\n            self.current_locale = locale_code\n            return True\n        except FileNotFoundError:\n            print(f\"Traducci\u00f3n no encontrada para: {locale_code}\")\n            return False\n</code></pre>"},{"location":"funcionalidades/interfaz/#nuevas-funcionalidades-de-ui","title":"\ud83c\udd95 Nuevas Funcionalidades de UI","text":""},{"location":"funcionalidades/interfaz/#multiseleccion-y-context-menu-unificado","title":"Multiselecci\u00f3n y Context Menu Unificado","text":""},{"location":"funcionalidades/interfaz/#implementacion-de-multiseleccion","title":"Implementaci\u00f3n de Multiselecci\u00f3n","text":"<pre><code>class SelectableCard(Gtk.Box):\n    \"\"\"Card base con soporte de multiselecci\u00f3n\"\"\"\n\n    def __init__(self, item, selection_manager):\n        super().__init__()\n        self.item = item\n        self.selection_manager = selection_manager\n        self.setup_selection_handling()\n\n    def setup_selection_handling(self):\n        \"\"\"Configurar manejo de selecci\u00f3n\"\"\"\n        # Ctrl+A para seleccionar todo\n        self.add_shortcut(Gtk.Shortcut.new(\n            Gtk.ShortcutTrigger.parse_string(\"&lt;Control&gt;a\"),\n            Gtk.CallbackAction.new(self.select_all)\n        ))\n\n        # Context menu unificado\n        self.setup_context_menu()\n\n    def select_all(self, widget, args):\n        \"\"\"Seleccionar todos los elementos visibles\"\"\"\n        self.selection_manager.select_all()\n        return True\n</code></pre>"},{"location":"funcionalidades/interfaz/#context-menu-inteligente","title":"Context Menu Inteligente","text":"<pre><code>def create_context_menu(self, selected_items):\n    \"\"\"Crear men\u00fa contextual adaptado al n\u00famero de elementos\"\"\"\n\n    item_count = len(selected_items)\n    menu = Gio.Menu()\n\n    if item_count == 1:\n        # Men\u00fa para elemento individual\n        menu.append(\"Abrir\", \"app.open_comic\")\n        menu.append(\"Ver detalles\", \"app.show_details\")\n\n    # Acciones para 1 o m\u00faltiples elementos\n    trash_label = f\"Enviar {item_count} elemento(s) a papelera\"\n    catalog_label = f\"Catalogar {item_count} elemento(s)\"\n\n    menu.append(trash_label, \"app.move_to_trash\")\n    menu.append(catalog_label, \"app.catalog_items\")\n\n    return menu\n</code></pre>"},{"location":"funcionalidades/interfaz/#carrusel-de-portadas-multiples","title":"Carrusel de Portadas M\u00faltiples","text":""},{"location":"funcionalidades/interfaz/#implementacion-con-adwcarousel","title":"Implementaci\u00f3n con Adw.Carousel","text":"<pre><code>def create_covers_carousel(comicbook_info):\n    \"\"\"Crear carrusel para m\u00faltiples portadas\"\"\"\n\n    carousel = Adw.Carousel()\n    carousel.set_size_request(200, 280)\n    carousel.set_allow_mouse_drag(True)\n    carousel.set_allow_scroll_wheel(True)\n\n    # Agregar cada portada\n    for cover in comicbook_info.portadas:\n        cover_image = Gtk.Picture()\n        cover_image.set_content_fit(Gtk.ContentFit.CONTAIN)\n\n        # Carga robusta de imagen\n        load_cover_image_robust(cover_image, cover)\n        carousel.append(cover_image)\n\n    # Indicador de p\u00e1ginas\n    if len(comicbook_info.portadas) &gt; 1:\n        dots = Adw.CarouselIndicatorDots()\n        dots.set_carousel(carousel)\n        return create_carousel_container(carousel, dots)\n\n    return carousel\n\ndef load_cover_image_robust(image_widget, cover):\n    \"\"\"Carga robusta con patrones de b\u00fasqueda\"\"\"\n\n    patterns = [\n        f\"data/thumbnails/comicbook_info/*/{cover.filename}\",\n        f\"data/thumbnails/comicbook_info/*/{cover.base_name}_variant_*.{cover.extension}\",\n        f\"data/thumbnails/comicbook_info/*/{cover.base_name}.{cover.extension}\"\n    ]\n\n    for pattern in patterns:\n        files = glob.glob(pattern)\n        if files:\n            image_widget.set_filename(files[0])\n            return\n\n    # Fallback a placeholder\n    image_widget.set_filename(\"images/Comic_sin_caratula.png\")\n</code></pre>"},{"location":"funcionalidades/interfaz/#navegacion-mejorada","title":"Navegaci\u00f3n Mejorada","text":""},{"location":"funcionalidades/interfaz/#flujo-de-navegacion-anidada","title":"Flujo de Navegaci\u00f3n Anidada","text":"<pre><code>def setup_navigation_flow(main_window):\n    \"\"\"Configurar navegaci\u00f3n entre p\u00e1ginas relacionadas\"\"\"\n\n    # Volume Details \u2192 ComicbookInfo Details \u2192 Physical Comics\n    navigation_view = main_window.get_navigation_view()\n\n    # Handlers de navegaci\u00f3n\n    def navigate_to_comicbook_info(comic_info):\n        detail_page = create_comicbook_info_detail_page(comic_info)\n        navigation_view.push(detail_page)\n\n    def navigate_to_physical_comics(comic_info):\n        physical_page = create_physical_comics_page(comic_info)\n        navigation_view.push(physical_page)\n\n    return {\n        'to_comicbook_info': navigate_to_comicbook_info,\n        'to_physical_comics': navigate_to_physical_comics\n    }\n</code></pre>"},{"location":"funcionalidades/interfaz/#mejoras-de-rendimiento","title":"Mejoras de Rendimiento","text":""},{"location":"funcionalidades/interfaz/#carga-asincrona-de-thumbnails","title":"Carga As\u00edncrona de Thumbnails","text":"<pre><code>async def load_thumbnails_async(self, items):\n    \"\"\"Cargar thumbnails de forma as\u00edncrona\"\"\"\n\n    tasks = []\n    for item in items:\n        task = asyncio.create_task(self.load_single_thumbnail(item))\n        tasks.append(task)\n\n    # Procesar en lotes\n    batch_size = 10\n    for i in range(0, len(tasks), batch_size):\n        batch = tasks[i:i + batch_size]\n        await asyncio.gather(*batch, return_exceptions=True)\n\n        # Actualizar UI cada lote\n        GLib.idle_add(self.update_progress, i + batch_size, len(tasks))\n</code></pre> <p>\u00bfQuieres conocer m\u00e1s sobre el desarrollo? \ud83d\udc49 Modelos de Datos</p>"},{"location":"funcionalidades/thumbnails/","title":"Sistema de Thumbnails","text":"<p>El sistema de thumbnails de Babelcomics4 genera autom\u00e1ticamente miniaturas de alta calidad para todos los comics de tu colecci\u00f3n, aplicando efectos visuales inteligentes para indicar el estado de catalogaci\u00f3n y proporcionando una experiencia visual rica.</p>"},{"location":"funcionalidades/thumbnails/#generacion-de-thumbnails","title":"\ud83d\uddbc\ufe0f Generaci\u00f3n de Thumbnails","text":""},{"location":"funcionalidades/thumbnails/#proceso-automatico","title":"Proceso Autom\u00e1tico","text":""},{"location":"funcionalidades/thumbnails/#pipeline-de-generacion","title":"Pipeline de Generaci\u00f3n","text":"<pre><code>graph TB\n    A[Detectar Comic Nuevo] --&gt; B[Abrir Archivo]\n    B --&gt; C[Extraer Primera P\u00e1gina]\n    C --&gt; D[Procesar Imagen]\n    D --&gt; E[Aplicar Efectos]\n    E --&gt; F[Redimensionar]\n    F --&gt; G[Optimizar Compresi\u00f3n]\n    G --&gt; H[Guardar en Cache]\n    H --&gt; I[Actualizar UI]\n</code></pre>"},{"location":"funcionalidades/thumbnails/#implementacion-del-generador","title":"Implementaci\u00f3n del Generador","text":"<pre><code>class ThumbnailGenerator:\n    \"\"\"Generador de thumbnails para comics\"\"\"\n\n    def __init__(self, config):\n        self.config = config\n        self.thumbnail_cache = config.get('cache_directory', 'data/thumbnails/comics/')\n        self.thumbnail_size = config.get('thumbnail_size', (200, 300))\n        self.quality = config.get('jpeg_quality', 85)\n\n    def generate_thumbnail(self, comic_file_path, comic_info=None):\n        \"\"\"Generar thumbnail para un comic\"\"\"\n\n        try:\n            # 1. Extraer primera p\u00e1gina\n            first_page_image = self.extract_first_page(comic_file_path)\n            if not first_page_image:\n                return self.get_default_thumbnail()\n\n            # 2. Redimensionar manteniendo proporci\u00f3n\n            thumbnail = self.resize_with_aspect_ratio(\n                first_page_image,\n                self.thumbnail_size\n            )\n\n            # 3. Aplicar efectos seg\u00fan estado\n            if comic_info:\n                thumbnail = self.apply_status_effects(thumbnail, comic_info)\n\n            # 4. Optimizar y guardar\n            thumbnail_path = self.save_thumbnail(thumbnail, comic_file_path)\n\n            return thumbnail_path\n\n        except Exception as e:\n            self.logger.error(f\"Error generando thumbnail: {e}\")\n            return self.get_default_thumbnail()\n\n    def extract_first_page(self, comic_path):\n        \"\"\"Extraer primera p\u00e1gina del comic\"\"\"\n\n        file_extension = os.path.splitext(comic_path)[1].lower()\n\n        if file_extension == '.cbz':\n            return self.extract_from_cbz(comic_path)\n        elif file_extension == '.cbr':\n            return self.extract_from_cbr(comic_path)\n        elif file_extension == '.pdf':\n            return self.extract_from_pdf(comic_path)\n        else:\n            return None\n\n    def extract_from_cbz(self, cbz_path):\n        \"\"\"Extraer primera p\u00e1gina de archivo CBZ\"\"\"\n\n        with zipfile.ZipFile(cbz_path, 'r') as zip_file:\n            # Obtener lista de archivos de imagen\n            image_files = [f for f in zip_file.namelist()\n                          if f.lower().endswith(('.jpg', '.jpeg', '.png', '.webp'))]\n\n            if not image_files:\n                return None\n\n            # Ordenar para obtener la primera p\u00e1gina\n            image_files.sort()\n            first_image = image_files[0]\n\n            # Extraer y abrir imagen\n            with zip_file.open(first_image) as image_data:\n                image = Image.open(io.BytesIO(image_data.read()))\n                return image.convert('RGB')\n\n    def extract_from_cbr(self, cbr_path):\n        \"\"\"Extraer primera p\u00e1gina de archivo CBR\"\"\"\n\n        try:\n            with rarfile.RarFile(cbr_path, 'r') as rar_file:\n                image_files = [f for f in rar_file.namelist()\n                              if f.lower().endswith(('.jpg', '.jpeg', '.png', '.webp'))]\n\n                if not image_files:\n                    return None\n\n                image_files.sort()\n                first_image = image_files[0]\n\n                with rar_file.open(first_image) as image_data:\n                    image = Image.open(io.BytesIO(image_data.read()))\n                    return image.convert('RGB')\n\n        except rarfile.RarCannotExec:\n            self.logger.warning(\"RAR support not available\")\n            return None\n\n    def extract_from_pdf(self, pdf_path):\n        \"\"\"Extraer primera p\u00e1gina de archivo PDF\"\"\"\n\n        try:\n            import fitz  # PyMuPDF\n\n            pdf_document = fitz.open(pdf_path)\n            if pdf_document.page_count == 0:\n                return None\n\n            # Obtener primera p\u00e1gina\n            first_page = pdf_document[0]\n\n            # Convertir a imagen con alta resoluci\u00f3n\n            mat = fitz.Matrix(2.0, 2.0)  # 2x zoom para calidad\n            pix = first_page.get_pixmap(matrix=mat)\n\n            # Convertir a PIL Image\n            img_data = pix.tobytes(\"ppm\")\n            image = Image.open(io.BytesIO(img_data))\n\n            pdf_document.close()\n            return image.convert('RGB')\n\n        except ImportError:\n            self.logger.warning(\"PyMuPDF not available for PDF support\")\n            return None\n</code></pre>"},{"location":"funcionalidades/thumbnails/#redimensionado-inteligente","title":"Redimensionado Inteligente","text":""},{"location":"funcionalidades/thumbnails/#preservacion-de-proporcion","title":"Preservaci\u00f3n de Proporci\u00f3n","text":"<pre><code>def resize_with_aspect_ratio(self, image, target_size):\n    \"\"\"Redimensionar imagen manteniendo proporci\u00f3n\"\"\"\n\n    original_width, original_height = image.size\n    target_width, target_height = target_size\n\n    # Calcular proporci\u00f3n para ajuste\n    width_ratio = target_width / original_width\n    height_ratio = target_height / original_height\n\n    # Usar la proporci\u00f3n menor para que la imagen quepa completamente\n    ratio = min(width_ratio, height_ratio)\n\n    # Calcular nuevo tama\u00f1o\n    new_width = int(original_width * ratio)\n    new_height = int(original_height * ratio)\n\n    # Redimensionar con alta calidad\n    resized = image.resize((new_width, new_height), Image.Resampling.LANCZOS)\n\n    # Crear imagen final centrada en el tama\u00f1o objetivo\n    final_image = Image.new('RGB', target_size, (255, 255, 255))\n\n    # Calcular posici\u00f3n para centrar\n    x_offset = (target_width - new_width) // 2\n    y_offset = (target_height - new_height) // 2\n\n    final_image.paste(resized, (x_offset, y_offset))\n\n    return final_image\n</code></pre>"},{"location":"funcionalidades/thumbnails/#configuracion-de-tamanos","title":"Configuraci\u00f3n de Tama\u00f1os","text":"<pre><code>THUMBNAIL_CONFIGURATIONS = {\n    'small': {\n        'size': (150, 225),\n        'use_case': 'Vista de lista compacta',\n        'quality': 75\n    },\n    'medium': {\n        'size': (200, 300),\n        'use_case': 'Vista de grilla est\u00e1ndar',\n        'quality': 85\n    },\n    'large': {\n        'size': (300, 450),\n        'use_case': 'Vista detallada y modal',\n        'quality': 90\n    },\n    'extra_large': {\n        'size': (400, 600),\n        'use_case': 'Pantalla completa y zoom',\n        'quality': 95\n    }\n}\n</code></pre>"},{"location":"funcionalidades/thumbnails/#efectos-visuales","title":"\ud83c\udfa8 Efectos Visuales","text":""},{"location":"funcionalidades/thumbnails/#estados-de-clasificacion","title":"Estados de Clasificaci\u00f3n","text":""},{"location":"funcionalidades/thumbnails/#comics-clasificados-color-normal","title":"Comics Clasificados (Color Normal)","text":"<pre><code>def apply_classified_effects(self, image):\n    \"\"\"Aplicar efectos para comics clasificados\"\"\"\n\n    # Mantener colores originales con ligero realce\n    enhanced = ImageEnhance.Color(image).enhance(1.1)  # +10% saturaci\u00f3n\n    enhanced = ImageEnhance.Contrast(enhanced).enhance(1.05)  # +5% contraste\n\n    return enhanced\n</code></pre>"},{"location":"funcionalidades/thumbnails/#comics-sin-catalogar-escala-de-grises","title":"Comics Sin Catalogar (Escala de Grises)","text":"<pre><code>def apply_uncataloged_effects(self, image):\n    \"\"\"Aplicar efectos para comics sin catalogar\"\"\"\n\n    # Convertir a escala de grises manteniendo calidad\n    if image.mode in ('RGBA', 'LA'):\n        # Manejar transparencia\n        rgb_image = Image.new('RGB', image.size, (255, 255, 255))\n        rgb_image.paste(image, mask=image.split()[-1] if image.mode == 'RGBA' else None)\n    else:\n        rgb_image = image.convert('RGB')\n\n    # Aplicar escala de grises\n    grayscale = rgb_image.convert('L')\n\n    # Convertir de vuelta a RGB para compatibilidad\n    final_image = grayscale.convert('RGB')\n\n    # Aplicar ligero tinte azulado para distinguir\n    overlay = Image.new('RGB', final_image.size, (230, 235, 240))\n    final_image = Image.blend(final_image, overlay, 0.1)\n\n    return final_image\n</code></pre>"},{"location":"funcionalidades/thumbnails/#comics-en-papelera-desaturado-overlay","title":"Comics en Papelera (Desaturado + Overlay)","text":"<pre><code>def apply_trash_effects(self, image):\n    \"\"\"Aplicar efectos para comics en papelera\"\"\"\n\n    # Reducir saturaci\u00f3n dr\u00e1sticamente\n    desaturated = ImageEnhance.Color(image).enhance(0.3)\n\n    # Reducir brillo\n    darkened = ImageEnhance.Brightness(desaturated).enhance(0.7)\n\n    # Aplicar overlay semitransparente rojo\n    overlay = Image.new('RGBA', darkened.size, (255, 0, 0, 40))\n    darkened = darkened.convert('RGBA')\n\n    trash_effect = Image.alpha_composite(darkened, overlay)\n\n    return trash_effect.convert('RGB')\n</code></pre>"},{"location":"funcionalidades/thumbnails/#comics-corruptos-efectos-de-error","title":"Comics Corruptos (Efectos de Error)","text":"<pre><code>def apply_corrupted_effects(self, image):\n    \"\"\"Aplicar efectos para archivos corruptos\"\"\"\n\n    # Aplicar distorsi\u00f3n digital\n    corrupted = image.copy()\n\n    # Crear efecto de \"glitch\"\n    pixels = corrupted.load()\n    width, height = corrupted.size\n\n    # Aplicar l\u00edneas de ruido aleatorias\n    import random\n    for _ in range(10):\n        y = random.randint(0, height - 1)\n        for x in range(width):\n            if random.random() &lt; 0.7:\n                pixels[x, y] = (255, 0, 255)  # Magenta para errores\n\n    # Aplicar filtro de contraste alto\n    corrupted = ImageEnhance.Contrast(corrupted).enhance(2.0)\n\n    return corrupted\n</code></pre>"},{"location":"funcionalidades/thumbnails/#indicadores-de-calidad","title":"Indicadores de Calidad","text":""},{"location":"funcionalidades/thumbnails/#overlays-de-calidad","title":"Overlays de Calidad","text":"<pre><code>def add_quality_overlay(self, image, quality_stars):\n    \"\"\"A\u00f1adir overlay de calidad visual\"\"\"\n\n    if quality_stars == 0:\n        return image  # Sin overlay para comics sin calificar\n\n    # Crear overlay transparente\n    overlay = Image.new('RGBA', image.size, (0, 0, 0, 0))\n    draw = ImageDraw.Draw(overlay)\n\n    # Configuraci\u00f3n de estrellas\n    star_size = 20\n    star_spacing = 25\n    star_y = image.height - 30\n    star_start_x = 10\n\n    # Dibujar estrellas\n    for i in range(5):\n        x = star_start_x + (i * star_spacing)\n\n        if i &lt; quality_stars:\n            # Estrella llena (dorada)\n            star_color = (255, 215, 0, 200)  # Dorado semitransparente\n        else:\n            # Estrella vac\u00eda (gris)\n            star_color = (128, 128, 128, 100)  # Gris semitransparente\n\n        self.draw_star(draw, x, star_y, star_size, star_color)\n\n    # Combinar con imagen original\n    image_rgba = image.convert('RGBA')\n    final_image = Image.alpha_composite(image_rgba, overlay)\n\n    return final_image.convert('RGB')\n\ndef draw_star(self, draw, x, y, size, color):\n    \"\"\"Dibujar estrella de 5 puntas\"\"\"\n\n    import math\n\n    points = []\n    for i in range(10):\n        angle = (i * math.pi) / 5\n        if i % 2 == 0:\n            # Puntas externas\n            px = x + size * math.cos(angle - math.pi/2)\n            py = y + size * math.sin(angle - math.pi/2)\n        else:\n            # Puntas internas\n            px = x + (size/2) * math.cos(angle - math.pi/2)\n            py = y + (size/2) * math.sin(angle - math.pi/2)\n\n        points.append((px, py))\n\n    draw.polygon(points, fill=color)\n</code></pre>"},{"location":"funcionalidades/thumbnails/#sistema-de-cache","title":"\ud83d\udcbe Sistema de Cache","text":""},{"location":"funcionalidades/thumbnails/#gestion-de-cache","title":"Gesti\u00f3n de Cache","text":""},{"location":"funcionalidades/thumbnails/#estructura-de-directorios","title":"Estructura de Directorios","text":"<pre><code>data/thumbnails/\n\u251c\u2500\u2500 comics/\n\u2502   \u251c\u2500\u2500 small/\n\u2502   \u2502   \u251c\u2500\u2500 [hash_archivo_1].jpg\n\u2502   \u2502   \u251c\u2500\u2500 [hash_archivo_2].jpg\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u251c\u2500\u2500 medium/\n\u2502   \u2502   \u251c\u2500\u2500 [hash_archivo_1].jpg\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u251c\u2500\u2500 large/\n\u2502   \u2514\u2500\u2500 extra_large/\n\u251c\u2500\u2500 volumes/\n\u2502   \u251c\u2500\u2500 [volume_id_1].jpg\n\u2502   \u2514\u2500\u2500 [volume_id_2].jpg\n\u2514\u2500\u2500 temp/\n    \u2514\u2500\u2500 processing/\n</code></pre>"},{"location":"funcionalidades/thumbnails/#gestion-de-hash-para-cache","title":"Gesti\u00f3n de Hash para Cache","text":"<pre><code>def generate_cache_key(self, comic_path, size_category, comic_info=None):\n    \"\"\"Generar clave \u00fanica para cache de thumbnail\"\"\"\n\n    import hashlib\n\n    # Informaci\u00f3n base del archivo\n    file_stat = os.stat(comic_path)\n    base_info = f\"{comic_path}:{file_stat.st_mtime}:{file_stat.st_size}\"\n\n    # Informaci\u00f3n de estado para efectos\n    if comic_info:\n        status_info = f\":{comic_info.is_cataloged}:{comic_info.quality}:{comic_info.in_trash}\"\n        base_info += status_info\n\n    # Informaci\u00f3n de tama\u00f1o\n    base_info += f\":{size_category}\"\n\n    # Generar hash MD5\n    cache_key = hashlib.md5(base_info.encode()).hexdigest()\n\n    return f\"{cache_key}.jpg\"\n\ndef get_cached_thumbnail(self, cache_key, size_category):\n    \"\"\"Obtener thumbnail desde cache\"\"\"\n\n    cache_path = os.path.join(\n        self.thumbnail_cache,\n        size_category,\n        cache_key\n    )\n\n    if os.path.exists(cache_path):\n        try:\n            # Verificar que la imagen sea v\u00e1lida\n            with Image.open(cache_path) as img:\n                img.verify()\n            return cache_path\n        except Exception:\n            # Eliminar thumbnail corrupto\n            os.remove(cache_path)\n            return None\n\n    return None\n\ndef save_thumbnail(self, image, comic_path, size_category='medium'):\n    \"\"\"Guardar thumbnail en cache\"\"\"\n\n    # Generar clave de cache\n    cache_key = self.generate_cache_key(comic_path, size_category)\n\n    # Crear directorio si no existe\n    cache_dir = os.path.join(self.thumbnail_cache, size_category)\n    os.makedirs(cache_dir, exist_ok=True)\n\n    # Ruta completa del archivo\n    cache_path = os.path.join(cache_dir, cache_key)\n\n    # Guardar con optimizaci\u00f3n JPEG\n    image.save(cache_path, 'JPEG',\n              quality=self.quality,\n              optimize=True,\n              progressive=True)\n\n    return cache_path\n</code></pre>"},{"location":"funcionalidades/thumbnails/#limpieza-de-cache","title":"Limpieza de Cache","text":""},{"location":"funcionalidades/thumbnails/#limpieza-automatica","title":"Limpieza Autom\u00e1tica","text":"<pre><code>class ThumbnailCacheCleaner:\n    \"\"\"Limpiador autom\u00e1tico de cache de thumbnails\"\"\"\n\n    def __init__(self, thumbnail_generator):\n        self.generator = thumbnail_generator\n        self.cache_dir = thumbnail_generator.thumbnail_cache\n\n    def cleanup_orphaned_thumbnails(self, session):\n        \"\"\"Eliminar thumbnails hu\u00e9rfanos\"\"\"\n\n        # Obtener todos los paths de comics existentes\n        existing_comics = session.query(Comicbook.path).all()\n        existing_paths = {comic.path for comic in existing_comics}\n\n        orphaned_count = 0\n\n        for size_category in os.listdir(self.cache_dir):\n            size_dir = os.path.join(self.cache_dir, size_category)\n            if not os.path.isdir(size_dir):\n                continue\n\n            for thumbnail_file in os.listdir(size_dir):\n                thumbnail_path = os.path.join(size_dir, thumbnail_file)\n\n                # Verificar si el comic original existe\n                is_orphaned = True\n                for comic_path in existing_paths:\n                    expected_key = self.generator.generate_cache_key(\n                        comic_path, size_category\n                    )\n                    if thumbnail_file == expected_key:\n                        if os.path.exists(comic_path):\n                            is_orphaned = False\n                            break\n\n                if is_orphaned:\n                    os.remove(thumbnail_path)\n                    orphaned_count += 1\n\n        return orphaned_count\n\n    def cleanup_old_thumbnails(self, days_old=30):\n        \"\"\"Eliminar thumbnails antiguos\"\"\"\n\n        import time\n\n        cutoff_time = time.time() - (days_old * 24 * 60 * 60)\n        removed_count = 0\n\n        for root, dirs, files in os.walk(self.cache_dir):\n            for file in files:\n                file_path = os.path.join(root, file)\n                if os.path.getctime(file_path) &lt; cutoff_time:\n                    os.remove(file_path)\n                    removed_count += 1\n\n        return removed_count\n</code></pre>"},{"location":"funcionalidades/thumbnails/#optimizacion-de-rendimiento","title":"\u26a1 Optimizaci\u00f3n de Rendimiento","text":""},{"location":"funcionalidades/thumbnails/#generacion-asincrona","title":"Generaci\u00f3n As\u00edncrona","text":""},{"location":"funcionalidades/thumbnails/#generacion-en-background","title":"Generaci\u00f3n en Background","text":"<pre><code>import asyncio\nimport concurrent.futures\nfrom threading import ThreadPoolExecutor\n\nclass AsyncThumbnailGenerator:\n    \"\"\"Generador as\u00edncrono de thumbnails\"\"\"\n\n    def __init__(self, config, max_workers=4):\n        self.generator = ThumbnailGenerator(config)\n        self.executor = ThreadPoolExecutor(max_workers=max_workers)\n        self.generation_queue = asyncio.Queue()\n\n    async def generate_thumbnails_batch(self, comic_files):\n        \"\"\"Generar thumbnails en lote de forma as\u00edncrona\"\"\"\n\n        tasks = []\n        for comic_file in comic_files:\n            task = asyncio.create_task(\n                self.generate_thumbnail_async(comic_file)\n            )\n            tasks.append(task)\n\n        # Ejecutar con l\u00edmite de concurrencia\n        semaphore = asyncio.Semaphore(4)\n\n        async def bounded_task(task):\n            async with semaphore:\n                return await task\n\n        results = await asyncio.gather(\n            *[bounded_task(task) for task in tasks],\n            return_exceptions=True\n        )\n\n        return results\n\n    async def generate_thumbnail_async(self, comic_file):\n        \"\"\"Generar thumbnail individual de forma as\u00edncrona\"\"\"\n\n        loop = asyncio.get_event_loop()\n\n        # Ejecutar generaci\u00f3n en thread pool\n        thumbnail_path = await loop.run_in_executor(\n            self.executor,\n            self.generator.generate_thumbnail,\n            comic_file.path,\n            comic_file.comic_info\n        )\n\n        return {\n            'comic_file': comic_file,\n            'thumbnail_path': thumbnail_path,\n            'success': thumbnail_path is not None\n        }\n</code></pre>"},{"location":"funcionalidades/thumbnails/#lazy-loading","title":"Lazy Loading","text":""},{"location":"funcionalidades/thumbnails/#carga-bajo-demanda","title":"Carga Bajo Demanda","text":"<pre><code>class LazyThumbnailLoader:\n    \"\"\"Cargador lazy de thumbnails\"\"\"\n\n    def __init__(self, thumbnail_generator):\n        self.generator = thumbnail_generator\n        self.loaded_thumbnails = {}\n        self.loading_queue = []\n\n    def get_thumbnail_lazy(self, comic_id, size='medium'):\n        \"\"\"Obtener thumbnail con carga lazy\"\"\"\n\n        cache_key = f\"{comic_id}:{size}\"\n\n        # Si ya est\u00e1 cargado, devolverlo\n        if cache_key in self.loaded_thumbnails:\n            return self.loaded_thumbnails[cache_key]\n\n        # Si est\u00e1 en cola de carga, devolver placeholder\n        if cache_key in self.loading_queue:\n            return self.get_loading_placeholder()\n\n        # A\u00f1adir a cola y iniciar carga as\u00edncrona\n        self.loading_queue.append(cache_key)\n        asyncio.create_task(self.load_thumbnail_async(comic_id, size))\n\n        return self.get_placeholder_thumbnail()\n\n    async def load_thumbnail_async(self, comic_id, size):\n        \"\"\"Cargar thumbnail de forma as\u00edncrona\"\"\"\n\n        try:\n            # Obtener informaci\u00f3n del comic\n            comic = self.get_comic_by_id(comic_id)\n\n            # Generar thumbnail\n            thumbnail_path = await self.generator.generate_thumbnail_async(comic)\n\n            # Guardar en cache de memoria\n            cache_key = f\"{comic_id}:{size}\"\n            self.loaded_thumbnails[cache_key] = thumbnail_path\n\n            # Remover de cola de carga\n            if cache_key in self.loading_queue:\n                self.loading_queue.remove(cache_key)\n\n            # Notificar a la UI para actualizaci\u00f3n\n            self.notify_thumbnail_ready(comic_id, thumbnail_path)\n\n        except Exception as e:\n            self.logger.error(f\"Error cargando thumbnail para {comic_id}: {e}\")\n</code></pre>"},{"location":"funcionalidades/thumbnails/#configuracion-avanzada","title":"\ud83c\udf9b\ufe0f Configuraci\u00f3n Avanzada","text":""},{"location":"funcionalidades/thumbnails/#configuracion-de-calidad","title":"Configuraci\u00f3n de Calidad","text":""},{"location":"funcionalidades/thumbnails/#perfiles-de-calidad","title":"Perfiles de Calidad","text":"<pre><code>QUALITY_PROFILES = {\n    'economy': {\n        'jpeg_quality': 70,\n        'thumbnail_size': (150, 225),\n        'enable_effects': False,\n        'compression_level': 'high',\n        'description': 'M\u00ednimo uso de espacio'\n    },\n    'balanced': {\n        'jpeg_quality': 85,\n        'thumbnail_size': (200, 300),\n        'enable_effects': True,\n        'compression_level': 'medium',\n        'description': 'Balance calidad/espacio'\n    },\n    'quality': {\n        'jpeg_quality': 95,\n        'thumbnail_size': (300, 450),\n        'enable_effects': True,\n        'compression_level': 'low',\n        'description': 'M\u00e1xima calidad visual'\n    },\n    'archive': {\n        'jpeg_quality': 100,\n        'thumbnail_size': (400, 600),\n        'enable_effects': True,\n        'compression_level': 'none',\n        'format': 'PNG',\n        'description': 'Calidad archivo'\n    }\n}\n</code></pre>"},{"location":"funcionalidades/thumbnails/#configuracion-de-efectos","title":"Configuraci\u00f3n de Efectos","text":""},{"location":"funcionalidades/thumbnails/#personalizacion-de-efectos","title":"Personalizaci\u00f3n de Efectos","text":"<pre><code>EFFECT_CONFIGURATIONS = {\n    'uncataloged_effect': {\n        'type': 'grayscale',\n        'intensity': 1.0,\n        'tint_color': (230, 235, 240),\n        'tint_opacity': 0.1\n    },\n    'trash_effect': {\n        'type': 'desaturate_overlay',\n        'desaturation': 0.7,\n        'brightness': 0.7,\n        'overlay_color': (255, 0, 0),\n        'overlay_opacity': 0.15\n    },\n    'quality_overlay': {\n        'enabled': True,\n        'star_size': 20,\n        'star_spacing': 25,\n        'position': 'bottom_left',\n        'colors': {\n            'filled_star': (255, 215, 0, 200),\n            'empty_star': (128, 128, 128, 100)\n        }\n    },\n    'border_effects': {\n        'classified': {\n            'enabled': True,\n            'color': (0, 255, 0),\n            'width': 2\n        },\n        'uncataloged': {\n            'enabled': True,\n            'color': (128, 128, 128),\n            'width': 1,\n            'style': 'dashed'\n        }\n    }\n}\n</code></pre>"},{"location":"funcionalidades/thumbnails/#monitoreo-y-estadisticas","title":"\ud83d\udcca Monitoreo y Estad\u00edsticas","text":""},{"location":"funcionalidades/thumbnails/#metricas-de-thumbnails","title":"M\u00e9tricas de Thumbnails","text":""},{"location":"funcionalidades/thumbnails/#dashboard-de-estado","title":"Dashboard de Estado","text":"<pre><code>\u250c\u2500\u2500\u2500 Estado del Sistema de Thumbnails \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                                   \u2502\n\u2502 \ud83d\udcca Estad\u00edsticas Generales:                       \u2502\n\u2502 \u251c\u2500\u2500 Total Comics: 1,247                          \u2502\n\u2502 \u251c\u2500\u2500 Thumbnails Generados: 1,198 (96.1%)         \u2502\n\u2502 \u251c\u2500\u2500 Pendientes: 49 (3.9%)                        \u2502\n\u2502 \u2514\u2500\u2500 Corruptos: 3 (0.2%)                          \u2502\n\u2502                                                   \u2502\n\u2502 \ud83d\udcbe Cache de Thumbnails:                          \u2502\n\u2502 \u251c\u2500\u2500 Tama\u00f1o Total: 245.6 MB                       \u2502\n\u2502 \u251c\u2500\u2500 Archivos Cache: 4,792                        \u2502\n\u2502 \u251c\u2500\u2500 Thumbnails Hu\u00e9rfanos: 12                     \u2502\n\u2502 \u2514\u2500\u2500 \u00daltima Limpieza: 2024-03-15                  \u2502\n\u2502                                                   \u2502\n\u2502 \u26a1 Rendimiento:                                   \u2502\n\u2502 \u251c\u2500\u2500 Tiempo Promedio Generaci\u00f3n: 1.2s             \u2502\n\u2502 \u251c\u2500\u2500 Thumbnails/minuto: 48                        \u2502\n\u2502 \u251c\u2500\u2500 Cache Hit Rate: 94.5%                        \u2502\n\u2502 \u2514\u2500\u2500 Errores \u00daltima Hora: 2                       \u2502\n\u2502                                                   \u2502\n\u2502 \ud83c\udfa8 Distribuci\u00f3n de Efectos:                      \u2502\n\u2502 \u251c\u2500\u2500 Color Normal: 892 (74.5%)                    \u2502\n\u2502 \u251c\u2500\u2500 Escala Grises: 355 (29.6%)                   \u2502\n\u2502 \u251c\u2500\u2500 En Papelera: 12 (1.0%)                       \u2502\n\u2502 \u2514\u2500\u2500 Con Errores: 3 (0.2%)                        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"funcionalidades/thumbnails/#herramientas-de-mantenimiento","title":"Herramientas de Mantenimiento","text":""},{"location":"funcionalidades/thumbnails/#regeneracion-de-thumbnails","title":"Regeneraci\u00f3n de Thumbnails","text":"<pre><code>def regenerate_thumbnails_tool():\n    \"\"\"Herramienta para regenerar thumbnails\"\"\"\n\n    options = {\n        'all': 'Regenerar todos los thumbnails',\n        'corrupted': 'Solo thumbnails corruptos',\n        'missing': 'Solo thumbnails faltantes',\n        'low_quality': 'Solo thumbnails de baja calidad',\n        'uncataloged': 'Solo comics sin catalogar',\n        'size_upgrade': 'Actualizar a tama\u00f1o mayor'\n    }\n\n    filters = {\n        'publisher': 'Filtrar por editorial',\n        'quality_range': 'Filtrar por rango de calidad',\n        'file_size_range': 'Filtrar por tama\u00f1o de archivo',\n        'date_range': 'Filtrar por fecha de agregado'\n    }\n\n    batch_options = {\n        'batch_size': 50,\n        'parallel_workers': 4,\n        'progress_callback': True,\n        'error_handling': 'continue'\n    }\n</code></pre> <p>\u00bfQuieres conocer m\u00e1s sobre la base de datos? \ud83d\udc49 Base de Datos</p>"},{"location":"referencia/configuracion/","title":"Configuraci\u00f3n","text":"<p>Babelcomics4 ofrece un sistema de configuraci\u00f3n flexible que permite personalizar el comportamiento de la aplicaci\u00f3n, desde directorios de comics hasta par\u00e1metros de la API de ComicVine y preferencias de interfaz.</p>"},{"location":"referencia/configuracion/#archivos-de-configuracion","title":"\ud83d\udcc1 Archivos de Configuraci\u00f3n","text":""},{"location":"referencia/configuracion/#ubicaciones-de-configuracion","title":"Ubicaciones de Configuraci\u00f3n","text":""},{"location":"referencia/configuracion/#directorios-del-sistema","title":"Directorios del Sistema","text":"<pre><code># Configuraci\u00f3n de usuario (Linux)\n~/.config/babelcomics4/\n\u251c\u2500\u2500 config.json          # Configuraci\u00f3n principal\n\u251c\u2500\u2500 database.conf         # Configuraci\u00f3n de base de datos\n\u251c\u2500\u2500 comicvine.conf        # Configuraci\u00f3n API ComicVine\n\u251c\u2500\u2500 thumbnails.conf       # Configuraci\u00f3n de thumbnails\n\u2514\u2500\u2500 filters.json          # Filtros guardados\n\n# Configuraci\u00f3n del sistema (Linux)\n/etc/babelcomics4/\n\u251c\u2500\u2500 default.conf          # Configuraci\u00f3n por defecto\n\u2514\u2500\u2500 system.conf           # Configuraci\u00f3n del sistema\n\n# Datos de aplicaci\u00f3n\n~/.local/share/babelcomics4/\n\u251c\u2500\u2500 database/\n\u2502   \u2514\u2500\u2500 babelcomics.db    # Base de datos SQLite\n\u251c\u2500\u2500 thumbnails/           # Cache de thumbnails\n\u251c\u2500\u2500 covers/               # Portadas descargadas\n\u2514\u2500\u2500 logs/                 # Archivos de log\n</code></pre>"},{"location":"referencia/configuracion/#windows","title":"Windows","text":"<pre><code># Configuraci\u00f3n de usuario\n%APPDATA%\\Babelcomics4\\\n\u251c\u2500\u2500 config.json\n\u251c\u2500\u2500 database.conf\n\u2514\u2500\u2500 ...\n\n# Datos de aplicaci\u00f3n\n%LOCALAPPDATA%\\Babelcomics4\\\n\u251c\u2500\u2500 database\\\n\u251c\u2500\u2500 thumbnails\\\n\u2514\u2500\u2500 logs\\\n</code></pre>"},{"location":"referencia/configuracion/#macos","title":"macOS","text":"<pre><code># Configuraci\u00f3n de usuario\n~/Library/Preferences/com.babelcomics4/\n\u251c\u2500\u2500 config.json\n\u2514\u2500\u2500 ...\n\n# Datos de aplicaci\u00f3n\n~/Library/Application Support/Babelcomics4/\n\u251c\u2500\u2500 database/\n\u251c\u2500\u2500 thumbnails/\n\u2514\u2500\u2500 logs/\n</code></pre>"},{"location":"referencia/configuracion/#configuracion-principal","title":"Configuraci\u00f3n Principal","text":""},{"location":"referencia/configuracion/#configjson","title":"config.json","text":"<pre><code>{\n  \"version\": \"4.0.0\",\n  \"application\": {\n    \"language\": \"auto\",\n    \"theme\": \"auto\",\n    \"startup_scan\": true,\n    \"minimize_to_tray\": false,\n    \"remember_window_state\": true,\n    \"auto_backup\": true,\n    \"backup_frequency\": \"weekly\"\n  },\n  \"directories\": {\n    \"comics_paths\": [\n      \"~/Comics\",\n      \"/media/comics\",\n      \"~/Documents/Comic Books\"\n    ],\n    \"watch_directories\": true,\n    \"recursive_scan\": true,\n    \"follow_symlinks\": false,\n    \"excluded_patterns\": [\n      \"*.tmp\",\n      \"*.part\",\n      \"Thumbs.db\",\n      \".DS_Store\"\n    ]\n  },\n  \"database\": {\n    \"path\": \"~/.local/share/babelcomics4/database/babelcomics.db\",\n    \"backup_path\": \"~/.local/share/babelcomics4/database/backups/\",\n    \"auto_backup\": true,\n    \"backup_retention_days\": 30,\n    \"vacuum_frequency\": \"monthly\"\n  },\n  \"comicvine\": {\n    \"api_key\": \"\",\n    \"auto_catalog\": false,\n    \"confidence_threshold\": 0.7,\n    \"batch_size\": 50,\n    \"request_delay\": 0.5,\n    \"cache_enabled\": true,\n    \"cache_ttl\": 3600,\n    \"download_covers\": true,\n    \"max_cover_size\": \"2MB\"\n  },\n  \"thumbnails\": {\n    \"enabled\": true,\n    \"size\": \"medium\",\n    \"quality\": \"balanced\",\n    \"cache_size_limit\": \"1GB\",\n    \"auto_cleanup\": true,\n    \"effects\": {\n      \"uncataloged_grayscale\": true,\n      \"quality_overlay\": true,\n      \"border_effects\": true\n    }\n  },\n  \"interface\": {\n    \"default_view\": \"grid\",\n    \"items_per_page\": 50,\n    \"show_tooltips\": true,\n    \"animate_transitions\": true,\n    \"card_size\": \"medium\",\n    \"sort_order\": \"filename\",\n    \"remember_filters\": true\n  },\n  \"advanced\": {\n    \"logging_level\": \"INFO\",\n    \"max_log_size\": \"10MB\",\n    \"log_retention_days\": 7,\n    \"parallel_processing\": true,\n    \"max_workers\": 4,\n    \"memory_cache_size\": \"256MB\"\n  }\n}\n</code></pre>"},{"location":"referencia/configuracion/#configuracion-de-modulos","title":"\u2699\ufe0f Configuraci\u00f3n de M\u00f3dulos","text":""},{"location":"referencia/configuracion/#configuracion-de-base-de-datos","title":"Configuraci\u00f3n de Base de Datos","text":""},{"location":"referencia/configuracion/#databaseconf","title":"database.conf","text":"<pre><code>[database]\n# Configuraci\u00f3n de SQLite\npath = ~/.local/share/babelcomics4/database/babelcomics.db\njournal_mode = WAL\nsynchronous = NORMAL\ncache_size = 10000\ntemp_store = MEMORY\nmmap_size = 268435456\n\n[backup]\n# Configuraci\u00f3n de respaldos\nenabled = true\nfrequency = daily\nretention_days = 30\ncompress = true\nbackup_path = ~/.local/share/babelcomics4/database/backups/\n\n[maintenance]\n# Mantenimiento autom\u00e1tico\nauto_vacuum = true\nvacuum_frequency = weekly\nanalyze_frequency = daily\nintegrity_check = weekly\n</code></pre>"},{"location":"referencia/configuracion/#configuracion-de-comicvine","title":"Configuraci\u00f3n de ComicVine","text":""},{"location":"referencia/configuracion/#comicvineconf","title":"comicvine.conf","text":"<pre><code>[api]\n# Configuraci\u00f3n de la API\nbase_url = https://comicvine.gamespot.com/api/\napi_key = YOUR_API_KEY_HERE\nuser_agent = Babelcomics4/4.0\ntimeout = 30\nretries = 3\n\n[rate_limiting]\n# Control de frecuencia de peticiones\nrequests_per_hour = 200\nrequest_delay = 0.5\nburst_limit = 10\nburst_window = 60\n\n[caching]\n# Cache de respuestas\nenabled = true\ncache_size = 1000\nttl = 3600\ninvalidate_on_error = true\n\n[cataloging]\n# Configuraci\u00f3n de catalogaci\u00f3n\nauto_catalog = false\nconfidence_threshold = 0.7\nbatch_size = 50\nupdate_existing = false\ndownload_covers = true\ndownload_character_info = false\ndownload_creator_info = false\n\n[search]\n# Configuraci\u00f3n de b\u00fasqueda\nfuzzy_matching = true\nyear_tolerance = 2\npublisher_weight = 0.3\nseries_weight = 0.5\nissue_weight = 0.2\n</code></pre>"},{"location":"referencia/configuracion/#configuracion-de-thumbnails","title":"Configuraci\u00f3n de Thumbnails","text":""},{"location":"referencia/configuracion/#thumbnailsconf","title":"thumbnails.conf","text":"<pre><code>[generation]\n# Generaci\u00f3n de thumbnails\nenabled = true\nformat = JPEG\nquality = 85\nprogressive = true\noptimize = true\n\n[sizes]\n# Tama\u00f1os disponibles\nsmall = 150x225\nmedium = 200x300\nlarge = 300x450\nextra_large = 400x600\ndefault = medium\n\n[effects]\n# Efectos visuales\nuncataloged_grayscale = true\ntrash_desaturate = true\nquality_overlay = true\nborder_effects = true\nhover_effects = true\n\n[cache]\n# Gesti\u00f3n de cache\ncache_size_limit = 1073741824  # 1GB en bytes\nauto_cleanup = true\ncleanup_frequency = weekly\norphan_cleanup = true\n\n[performance]\n# Optimizaci\u00f3n\nlazy_loading = true\nbatch_generation = true\nmax_workers = 2\nmemory_limit = 256MB\n</code></pre>"},{"location":"referencia/configuracion/#configuracion-avanzada","title":"\ud83d\udd27 Configuraci\u00f3n Avanzada","text":""},{"location":"referencia/configuracion/#variables-de-entorno","title":"Variables de Entorno","text":""},{"location":"referencia/configuracion/#variables-del-sistema","title":"Variables del Sistema","text":"<pre><code># Directorio base de configuraci\u00f3n\nexport BABELCOMICS4_CONFIG_DIR=\"/path/to/config\"\n\n# Directorio de datos\nexport BABELCOMICS4_DATA_DIR=\"/path/to/data\"\n\n# Nivel de logging\nexport BABELCOMICS4_LOG_LEVEL=\"DEBUG\"\n\n# Clave API de ComicVine\nexport COMICVINE_API_KEY=\"your_api_key_here\"\n\n# Directorio principal de comics\nexport COMICS_PATH=\"/path/to/comics\"\n\n# Modo de desarrollo\nexport BABELCOMICS4_DEV_MODE=\"false\"\n\n# Configuraci\u00f3n de base de datos\nexport DATABASE_URL=\"sqlite:///path/to/database.db\"\n\n# Proxy para conexiones HTTP\nexport HTTP_PROXY=\"http://proxy.example.com:8080\"\nexport HTTPS_PROXY=\"http://proxy.example.com:8080\"\n</code></pre>"},{"location":"referencia/configuracion/#configuracion-por-linea-de-comandos","title":"Configuraci\u00f3n por L\u00ednea de Comandos","text":""},{"location":"referencia/configuracion/#argumentos-de-inicio","title":"Argumentos de Inicio","text":"<pre><code># Especificar archivo de configuraci\u00f3n\nbabelcomics4 --config /path/to/config.json\n\n# Nivel de logging\nbabelcomics4 --log-level DEBUG\n\n# Modo de desarrollo\nbabelcomics4 --dev-mode\n\n# Directorio de datos personalizado\nbabelcomics4 --data-dir /path/to/data\n\n# Sin interfaz gr\u00e1fica (modo headless)\nbabelcomics4 --headless\n\n# Escaneo inicial\nbabelcomics4 --scan /path/to/comics\n\n# Catalogaci\u00f3n en lote\nbabelcomics4 --catalog-all --confidence 0.8\n\n# Backup de base de datos\nbabelcomics4 --backup\n\n# Verificaci\u00f3n de integridad\nbabelcomics4 --verify\n\n# Ejemplos de uso\nbabelcomics4 --config ~/my_config.json --log-level DEBUG\nbabelcomics4 --scan ~/Comics --catalog-all\nbabelcomics4 --headless --backup --verify\n</code></pre>"},{"location":"referencia/configuracion/#configuracion-de-interfaz","title":"\ud83c\udfa8 Configuraci\u00f3n de Interfaz","text":""},{"location":"referencia/configuracion/#configuracion-de-tema","title":"Configuraci\u00f3n de Tema","text":""},{"location":"referencia/configuracion/#personalizacion-visual","title":"Personalizaci\u00f3n Visual","text":"<pre><code>{\n  \"theme\": {\n    \"name\": \"custom\",\n    \"colors\": {\n      \"primary\": \"#3498db\",\n      \"secondary\": \"#2ecc71\",\n      \"accent\": \"#e74c3c\",\n      \"background\": \"#ffffff\",\n      \"surface\": \"#f8f9fa\",\n      \"text\": \"#212529\",\n      \"text_secondary\": \"#6c757d\"\n    },\n    \"fonts\": {\n      \"primary\": \"Inter, sans-serif\",\n      \"monospace\": \"JetBrains Mono, monospace\",\n      \"size_base\": 14,\n      \"size_small\": 12,\n      \"size_large\": 16\n    },\n    \"spacing\": {\n      \"unit\": 8,\n      \"small\": 4,\n      \"medium\": 8,\n      \"large\": 16,\n      \"extra_large\": 24\n    },\n    \"borders\": {\n      \"radius\": 8,\n      \"width\": 1,\n      \"color\": \"#dee2e6\"\n    },\n    \"shadows\": {\n      \"small\": \"0 2px 4px rgba(0,0,0,0.1)\",\n      \"medium\": \"0 4px 8px rgba(0,0,0,0.15)\",\n      \"large\": \"0 8px 16px rgba(0,0,0,0.2)\"\n    }\n  }\n}\n</code></pre>"},{"location":"referencia/configuracion/#configuracion-de-filtros","title":"Configuraci\u00f3n de Filtros","text":""},{"location":"referencia/configuracion/#filtersjson","title":"filters.json","text":"<pre><code>{\n  \"saved_filters\": [\n    {\n      \"id\": \"high_quality_dc\",\n      \"name\": \"Comics DC Alta Calidad\",\n      \"description\": \"Comics de DC de 4-5 estrellas\",\n      \"filters\": {\n        \"publishers\": [\"DC Comics\"],\n        \"quality_range\": [4, 5],\n        \"classification\": \"cataloged\"\n      },\n      \"sort\": {\n        \"field\": \"title\",\n        \"order\": \"asc\"\n      },\n      \"created_at\": \"2024-03-15T10:30:00Z\",\n      \"last_used\": \"2024-03-20T14:45:00Z\",\n      \"use_count\": 25\n    },\n    {\n      \"id\": \"uncataloged_recent\",\n      \"name\": \"Sin Catalogar Recientes\",\n      \"description\": \"Comics agregados en los \u00faltimos 30 d\u00edas sin catalogar\",\n      \"filters\": {\n        \"classification\": \"uncataloged\",\n        \"date_added_range\": [\"30_days_ago\", \"now\"]\n      },\n      \"sort\": {\n        \"field\": \"date_added\",\n        \"order\": \"desc\"\n      },\n      \"created_at\": \"2024-03-10T09:15:00Z\",\n      \"last_used\": \"2024-03-21T16:20:00Z\",\n      \"use_count\": 12\n    }\n  ],\n  \"quick_filters\": [\n    {\n      \"name\": \"Todos\",\n      \"icon\": \"list-all\",\n      \"filters\": {}\n    },\n    {\n      \"name\": \"Catalogados\",\n      \"icon\": \"check-circle\",\n      \"filters\": {\n        \"classification\": \"cataloged\"\n      }\n    },\n    {\n      \"name\": \"Sin Catalogar\",\n      \"icon\": \"question-circle\",\n      \"filters\": {\n        \"classification\": \"uncataloged\"\n      }\n    },\n    {\n      \"name\": \"Alta Calidad\",\n      \"icon\": \"star\",\n      \"filters\": {\n        \"quality_range\": [4, 5]\n      }\n    },\n    {\n      \"name\": \"Agregados Hoy\",\n      \"icon\": \"calendar\",\n      \"filters\": {\n        \"date_added_range\": [\"today\", \"now\"]\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"referencia/configuracion/#herramientas-de-configuracion","title":"\ud83d\udd27 Herramientas de Configuraci\u00f3n","text":""},{"location":"referencia/configuracion/#editor-de-configuracion","title":"Editor de Configuraci\u00f3n","text":""},{"location":"referencia/configuracion/#configurationmanager","title":"ConfigurationManager","text":"<pre><code>import json\nimport os\nfrom typing import Dict, Any, Optional\nfrom pathlib import Path\nimport configparser\n\nclass ConfigurationManager:\n    \"\"\"Gestor de configuraci\u00f3n de Babelcomics4\"\"\"\n\n    def __init__(self, config_dir: Optional[str] = None):\n        self.config_dir = Path(config_dir or self._get_default_config_dir())\n        self.config_file = self.config_dir / \"config.json\"\n        self.config = {}\n\n        self._ensure_config_dir()\n        self._load_config()\n\n    def _get_default_config_dir(self) -&gt; str:\n        \"\"\"Obtener directorio de configuraci\u00f3n por defecto\"\"\"\n        import platform\n\n        system = platform.system()\n        if system == \"Linux\":\n            return os.path.expanduser(\"~/.config/babelcomics4\")\n        elif system == \"Windows\":\n            return os.path.expandvars(\"%APPDATA%\\\\Babelcomics4\")\n        elif system == \"Darwin\":  # macOS\n            return os.path.expanduser(\"~/Library/Preferences/com.babelcomics4\")\n        else:\n            return os.path.expanduser(\"~/.babelcomics4\")\n\n    def _ensure_config_dir(self):\n        \"\"\"Crear directorio de configuraci\u00f3n si no existe\"\"\"\n        self.config_dir.mkdir(parents=True, exist_ok=True)\n\n    def _load_config(self):\n        \"\"\"Cargar configuraci\u00f3n desde archivo\"\"\"\n        if self.config_file.exists():\n            try:\n                with open(self.config_file, 'r', encoding='utf-8') as f:\n                    self.config = json.load(f)\n            except (json.JSONDecodeError, IOError) as e:\n                print(f\"Error cargando configuraci\u00f3n: {e}\")\n                self.config = self._get_default_config()\n        else:\n            self.config = self._get_default_config()\n            self.save_config()\n\n    def _get_default_config(self) -&gt; Dict[str, Any]:\n        \"\"\"Obtener configuraci\u00f3n por defecto\"\"\"\n        return {\n            \"version\": \"4.0.0\",\n            \"application\": {\n                \"language\": \"auto\",\n                \"theme\": \"auto\",\n                \"startup_scan\": True,\n                \"minimize_to_tray\": False,\n                \"remember_window_state\": True\n            },\n            \"directories\": {\n                \"comics_paths\": [os.path.expanduser(\"~/Comics\")],\n                \"watch_directories\": True,\n                \"recursive_scan\": True,\n                \"follow_symlinks\": False\n            },\n            \"comicvine\": {\n                \"api_key\": \"\",\n                \"auto_catalog\": False,\n                \"confidence_threshold\": 0.7,\n                \"request_delay\": 0.5\n            },\n            \"thumbnails\": {\n                \"enabled\": True,\n                \"size\": \"medium\",\n                \"quality\": \"balanced\"\n            },\n            \"interface\": {\n                \"default_view\": \"grid\",\n                \"items_per_page\": 50,\n                \"card_size\": \"medium\"\n            }\n        }\n\n    def get(self, key_path: str, default=None):\n        \"\"\"Obtener valor de configuraci\u00f3n usando path separado por puntos\"\"\"\n        keys = key_path.split('.')\n        value = self.config\n\n        for key in keys:\n            if isinstance(value, dict) and key in value:\n                value = value[key]\n            else:\n                return default\n\n        return value\n\n    def set(self, key_path: str, value: Any):\n        \"\"\"Establecer valor de configuraci\u00f3n usando path separado por puntos\"\"\"\n        keys = key_path.split('.')\n        target = self.config\n\n        # Navegar hasta el pen\u00faltimo nivel\n        for key in keys[:-1]:\n            if key not in target:\n                target[key] = {}\n            target = target[key]\n\n        # Establecer el valor final\n        target[keys[-1]] = value\n\n    def save_config(self):\n        \"\"\"Guardar configuraci\u00f3n a archivo\"\"\"\n        try:\n            with open(self.config_file, 'w', encoding='utf-8') as f:\n                json.dump(self.config, f, indent=2, ensure_ascii=False)\n        except IOError as e:\n            print(f\"Error guardando configuraci\u00f3n: {e}\")\n\n    def reset_to_defaults(self):\n        \"\"\"Resetear configuraci\u00f3n a valores por defecto\"\"\"\n        self.config = self._get_default_config()\n        self.save_config()\n\n    def export_config(self, export_path: str):\n        \"\"\"Exportar configuraci\u00f3n a archivo\"\"\"\n        try:\n            with open(export_path, 'w', encoding='utf-8') as f:\n                json.dump(self.config, f, indent=2, ensure_ascii=False)\n        except IOError as e:\n            print(f\"Error exportando configuraci\u00f3n: {e}\")\n\n    def import_config(self, import_path: str):\n        \"\"\"Importar configuraci\u00f3n desde archivo\"\"\"\n        try:\n            with open(import_path, 'r', encoding='utf-8') as f:\n                imported_config = json.load(f)\n\n            # Validar configuraci\u00f3n importada\n            if self._validate_config(imported_config):\n                self.config = imported_config\n                self.save_config()\n                return True\n            else:\n                print(\"Configuraci\u00f3n importada no v\u00e1lida\")\n                return False\n\n        except (json.JSONDecodeError, IOError) as e:\n            print(f\"Error importando configuraci\u00f3n: {e}\")\n            return False\n\n    def _validate_config(self, config: Dict[str, Any]) -&gt; bool:\n        \"\"\"Validar estructura de configuraci\u00f3n\"\"\"\n        required_sections = ['application', 'directories', 'comicvine', 'thumbnails', 'interface']\n\n        for section in required_sections:\n            if section not in config:\n                return False\n\n        return True\n\n    def get_comics_directories(self) -&gt; List[str]:\n        \"\"\"Obtener directorios de comics configurados\"\"\"\n        return self.get('directories.comics_paths', [])\n\n    def add_comics_directory(self, path: str):\n        \"\"\"A\u00f1adir directorio de comics\"\"\"\n        directories = self.get_comics_directories()\n        if path not in directories:\n            directories.append(path)\n            self.set('directories.comics_paths', directories)\n            self.save_config()\n\n    def remove_comics_directory(self, path: str):\n        \"\"\"Remover directorio de comics\"\"\"\n        directories = self.get_comics_directories()\n        if path in directories:\n            directories.remove(path)\n            self.set('directories.comics_paths', directories)\n            self.save_config()\n\n    def is_comicvine_configured(self) -&gt; bool:\n        \"\"\"Verificar si ComicVine est\u00e1 configurado\"\"\"\n        api_key = self.get('comicvine.api_key', '')\n        return bool(api_key and api_key.strip())\n\n    def set_comicvine_api_key(self, api_key: str):\n        \"\"\"Establecer clave API de ComicVine\"\"\"\n        self.set('comicvine.api_key', api_key.strip())\n        self.save_config()\n</code></pre>"},{"location":"referencia/configuracion/#migracion-de-configuracion","title":"Migraci\u00f3n de Configuraci\u00f3n","text":""},{"location":"referencia/configuracion/#configmigrator","title":"ConfigMigrator","text":"<pre><code>class ConfigMigrator:\n    \"\"\"Migrador de configuraci\u00f3n entre versiones\"\"\"\n\n    VERSION_MIGRATIONS = {\n        \"3.0.0\": \"migrate_from_3_0_0\",\n        \"3.5.0\": \"migrate_from_3_5_0\",\n        \"4.0.0\": \"migrate_from_4_0_0\"\n    }\n\n    def __init__(self, config_manager: ConfigurationManager):\n        self.config_manager = config_manager\n\n    def migrate_if_needed(self):\n        \"\"\"Migrar configuraci\u00f3n si es necesario\"\"\"\n        current_version = self.config_manager.get('version', '1.0.0')\n        target_version = \"4.0.0\"\n\n        if current_version != target_version:\n            self._perform_migration(current_version, target_version)\n\n    def _perform_migration(self, from_version: str, to_version: str):\n        \"\"\"Realizar migraci\u00f3n entre versiones\"\"\"\n        # Crear backup de configuraci\u00f3n actual\n        backup_path = self.config_manager.config_dir / f\"config_backup_{from_version}.json\"\n        self.config_manager.export_config(str(backup_path))\n\n        # Aplicar migraciones en orden\n        versions_to_migrate = self._get_migration_path(from_version, to_version)\n\n        for version in versions_to_migrate:\n            if version in self.VERSION_MIGRATIONS:\n                migration_method = getattr(self, self.VERSION_MIGRATIONS[version])\n                migration_method()\n\n        # Actualizar versi\u00f3n\n        self.config_manager.set('version', to_version)\n        self.config_manager.save_config()\n\n    def migrate_from_3_0_0(self):\n        \"\"\"Migrar desde versi\u00f3n 3.0.0\"\"\"\n        # Migrar estructura de directorios\n        old_comics_dir = self.config_manager.get('comics_directory')\n        if old_comics_dir:\n            self.config_manager.set('directories.comics_paths', [old_comics_dir])\n\n        # Migrar configuraci\u00f3n de thumbnails\n        old_thumb_size = self.config_manager.get('thumbnail_size', 200)\n        if old_thumb_size &lt;= 150:\n            new_size = \"small\"\n        elif old_thumb_size &lt;= 250:\n            new_size = \"medium\"\n        else:\n            new_size = \"large\"\n\n        self.config_manager.set('thumbnails.size', new_size)\n\n    def migrate_from_3_5_0(self):\n        \"\"\"Migrar desde versi\u00f3n 3.5.0\"\"\"\n        # Migrar configuraci\u00f3n de ComicVine\n        old_auto_download = self.config_manager.get('auto_download_metadata', False)\n        self.config_manager.set('comicvine.auto_catalog', old_auto_download)\n\n        # Migrar configuraci\u00f3n de interfaz\n        old_view_mode = self.config_manager.get('view_mode', 'grid')\n        self.config_manager.set('interface.default_view', old_view_mode)\n</code></pre> <p>\u00bfNecesitas solucionar problemas? \ud83d\udc49 Troubleshooting</p>"},{"location":"referencia/faq/","title":"FAQ - Preguntas Frecuentes","text":"<p>Esta secci\u00f3n responde a las preguntas m\u00e1s frecuentes sobre Babelcomics4, desde conceptos b\u00e1sicos hasta funcionalidades avanzadas y soluci\u00f3n de problemas comunes.</p>"},{"location":"referencia/faq/#preguntas-generales","title":"\ud83e\udd14 Preguntas Generales","text":""},{"location":"referencia/faq/#que-es-babelcomics4","title":"\u00bfQu\u00e9 es Babelcomics4?","text":"<p>Babelcomics4 es un gestor moderno de colecciones de comics digitales desarrollado en Python con GTK4. Permite organizar, catalogar y gestionar tu biblioteca de comics con integraci\u00f3n a ComicVine para obtener metadatos autom\u00e1ticamente.</p> <p>Caracter\u00edsticas principales: - Soporte para formatos CBZ, CBR, PDF - Catalogaci\u00f3n autom\u00e1tica con ComicVine API - Interfaz moderna con GTK4 y libadwaita - Sistema de thumbnails con efectos visuales - B\u00fasqueda y filtrado avanzado - Gesti\u00f3n de vol\u00famenes y series</p>"},{"location":"referencia/faq/#en-que-sistemas-operativos-funciona","title":"\u00bfEn qu\u00e9 sistemas operativos funciona?","text":"<p>Babelcomics4 es multiplataforma y funciona en:</p> <ul> <li>Linux (Ubuntu, Fedora, Arch, openSUSE, etc.)</li> <li>Windows 10/11 (con WSL o nativo)</li> <li>macOS (con Homebrew)</li> </ul> <p>Requisitos m\u00ednimos: - Python 3.9+ - GTK4 4.8+ - libadwaita 1.2+ - 4GB RAM - 1GB espacio libre</p>"},{"location":"referencia/faq/#es-gratuito","title":"\u00bfEs gratuito?","text":"<p>S\u00ed, Babelcomics4 es completamente gratuito y de c\u00f3digo abierto. Puedes usar, modificar y distribuir el software libremente bajo los t\u00e9rminos de la licencia.</p>"},{"location":"referencia/faq/#necesito-una-cuenta-de-comicvine","title":"\u00bfNecesito una cuenta de ComicVine?","text":"<p>No necesitas una cuenta, pero s\u00ed necesitas una API Key gratuita de ComicVine para usar las funciones de catalogaci\u00f3n autom\u00e1tica.</p> <p>Para obtener una API Key: 1. Ve a ComicVine 2. Crea una cuenta gratuita 3. Solicita una API Key en tu perfil 4. Config\u00farala en Babelcomics4</p>"},{"location":"referencia/faq/#gestion-de-comics","title":"\ud83d\udcda Gesti\u00f3n de Comics","text":""},{"location":"referencia/faq/#que-formatos-de-comics-soporta","title":"\u00bfQu\u00e9 formatos de comics soporta?","text":"<p>Babelcomics4 soporta los siguientes formatos:</p> Formato Extensi\u00f3n Soporte Notas Comic Book ZIP <code>.cbz</code> \u2705 Completo Recomendado Comic Book RAR <code>.cbr</code> \u2705 Completo Requiere unrar PDF <code>.pdf</code> \u2705 B\u00e1sico Soporte limitado Im\u00e1genes <code>.jpg</code>, <code>.png</code> \u26a0\ufe0f Carpetas Carpetas con im\u00e1genes EPUB <code>.epub</code> \ud83d\udd04 Planificado Pr\u00f3xima versi\u00f3n"},{"location":"referencia/faq/#como-importo-mi-coleccion-existente","title":"\u00bfC\u00f3mo importo mi colecci\u00f3n existente?","text":"<p>M\u00e9todo 1: Escaneo autom\u00e1tico 1. Configura tus directorios de comics en Preferencias \u2192 Directorios 2. La aplicaci\u00f3n escanear\u00e1 autom\u00e1ticamente al iniciar 3. Los comics aparecer\u00e1n sin catalogar (en escala de grises)</p> <p>M\u00e9todo 2: Importaci\u00f3n manual 1. Archivo \u2192 Importar Comics 2. Selecciona el directorio de tu colecci\u00f3n 3. Confirma el escaneo recursivo</p> <p>M\u00e9todo 3: Arrastrar y soltar 1. Arrastra archivos o carpetas a la ventana 2. Se importar\u00e1n autom\u00e1ticamente</p>"},{"location":"referencia/faq/#puedo-organizar-mis-comics-en-subcarpetas","title":"\u00bfPuedo organizar mis comics en subcarpetas?","text":"<p>S\u00ed, Babelcomics4 respeta tu organizaci\u00f3n de carpetas y escanea recursivamente. Ejemplos de organizaci\u00f3n:</p> <pre><code>Comics/\n\u251c\u2500\u2500 DC/\n\u2502   \u251c\u2500\u2500 Batman/\n\u2502   \u2502   \u251c\u2500\u2500 Batman_001.cbz\n\u2502   \u2502   \u2514\u2500\u2500 Batman_002.cbz\n\u2502   \u2514\u2500\u2500 Superman/\n\u251c\u2500\u2500 Marvel/\n\u2502   \u251c\u2500\u2500 Spider-Man/\n\u2502   \u2514\u2500\u2500 X-Men/\n\u2514\u2500\u2500 Independent/\n    \u251c\u2500\u2500 Image/\n    \u2514\u2500\u2500 Dark_Horse/\n</code></pre>"},{"location":"referencia/faq/#que-significan-los-colores-de-los-thumbnails","title":"\u00bfQu\u00e9 significan los colores de los thumbnails?","text":"<p>Los thumbnails usan efectos visuales para mostrar el estado:</p> <ul> <li>\ud83c\udf08 Color normal: Comic catalogado con ComicVine</li> <li>\u26ab Escala de grises: Comic sin catalogar</li> <li>\ud83d\udd34 Desaturado: Comic en papelera</li> <li>\u2b50 Con estrellas: Overlay de calidad (1-5 estrellas)</li> </ul>"},{"location":"referencia/faq/#como-califico-mis-comics","title":"\u00bfC\u00f3mo califico mis comics?","text":"<p>Puedes calificar comics de varias formas:</p> <p>M\u00e9todo 1: Click en estrellas - Click en las estrellas del thumbnail - Calificaci\u00f3n de 1-5 estrellas</p> <p>M\u00e9todo 2: Vista de detalle - Abre el comic en vista detallada - Ajusta la calificaci\u00f3n en el panel lateral</p> <p>M\u00e9todo 3: Edici\u00f3n en lote - Selecciona m\u00faltiples comics - Click derecho \u2192 Cambiar Calidad</p>"},{"location":"referencia/faq/#busqueda-y-filtros","title":"\ud83d\udd0d B\u00fasqueda y Filtros","text":""},{"location":"referencia/faq/#como-busco-comics-especificos","title":"\u00bfC\u00f3mo busco comics espec\u00edficos?","text":"<p>Babelcomics4 ofrece m\u00faltiples m\u00e9todos de b\u00fasqueda:</p> <p>B\u00fasqueda b\u00e1sica: - Escribe en la barra de b\u00fasqueda - Busca en t\u00edtulos, archivos, editoriales</p> <p>B\u00fasqueda avanzada: - Usa operadores: <code>batman AND year:2018</code> - Filtros por campo: <code>publisher:\"DC Comics\"</code> - Rangos: <code>quality:4..5</code></p> <p>Filtros visuales: - Panel de filtros lateral - Filtros r\u00e1pidos en la barra superior - Filtros guardados personalizados</p>"},{"location":"referencia/faq/#puedo-guardar-mis-busquedas-favoritas","title":"\u00bfPuedo guardar mis b\u00fasquedas favoritas?","text":"<p>S\u00ed, puedes crear filtros guardados:</p> <ol> <li>Configura tus filtros deseados</li> <li>Click en \ud83d\udcbe Guardar Filtro</li> <li>Asigna nombre y descripci\u00f3n</li> <li>Accede desde el panel lateral</li> </ol> <p>Ejemplo de filtros \u00fatiles: - \"DC Alta Calidad\": DC Comics con 4-5 estrellas - \"Sin Catalogar\": Comics pendientes de catalogaci\u00f3n - \"Agregados Hoy\": Comics importados recientemente</p>"},{"location":"referencia/faq/#como-filtro-por-editorial-o-ano","title":"\u00bfC\u00f3mo filtro por editorial o a\u00f1o?","text":"<p>Por editorial: - Panel de filtros \u2192 Editorial - Selecciona checkboxes de editoriales deseadas - O busca: <code>publisher:\"Marvel Comics\"</code></p> <p>Por a\u00f1o: - Panel de filtros \u2192 Rango de A\u00f1os - Ajusta deslizadores de a\u00f1o inicio/fin - O busca: <code>year:2018..2023</code></p> <p>Por d\u00e9cada: - Usa presets r\u00e1pidos: \"2020s\", \"2010s\", etc. - O filtros personalizados por rango</p>"},{"location":"referencia/faq/#comicvine","title":"\ud83c\udf10 ComicVine","text":""},{"location":"referencia/faq/#que-es-comicvine-y-por-que-lo-necesito","title":"\u00bfQu\u00e9 es ComicVine y por qu\u00e9 lo necesito?","text":"<p>ComicVine es la base de datos de comics m\u00e1s completa del mundo, propiedad de GameSpot. Proporciona:</p> <ul> <li>Metadatos detallados de comics</li> <li>Informaci\u00f3n de vol\u00famenes y series</li> <li>Portadas de alta calidad</li> <li>Equipos creativos y personajes</li> <li>Fechas de publicaci\u00f3n precisas</li> </ul> <p>Beneficios de la integraci\u00f3n: - Catalogaci\u00f3n autom\u00e1tica - Informaci\u00f3n rica y precisa - Portadas profesionales - Organizaci\u00f3n por vol\u00famenes</p>"},{"location":"referencia/faq/#por-que-algunos-comics-no-se-catalogan-automaticamente","title":"\u00bfPor qu\u00e9 algunos comics no se catalogan autom\u00e1ticamente?","text":"<p>Varios factores pueden impedir la catalogaci\u00f3n autom\u00e1tica:</p> <p>Problemas de nomenclatura: - Nombres de archivo poco claros - Falta de informaci\u00f3n de n\u00famero/a\u00f1o - Caracteres especiales problem\u00e1ticos</p> <p>Limitaciones de ComicVine: - Comics muy antiguos o raros - Editoriales independientes peque\u00f1as - Publicaciones no oficiales</p> <p>Configuraci\u00f3n restrictiva: - Umbral de confianza muy alto - Filtros de editorial restrictivos</p> <p>Soluciones: 1. Renombrar archivos con formato est\u00e1ndar 2. Catalogaci\u00f3n manual desde b\u00fasqueda 3. Ajustar umbral de confianza 4. Mejorar nombres de series</p>"},{"location":"referencia/faq/#como-obtengo-una-api-key-de-comicvine","title":"\u00bfC\u00f3mo obtengo una API Key de ComicVine?","text":"<p>Paso a paso: 1. Ve a comicvine.gamespot.com 2. Registrarse (gratuito) 3. Ve a tu perfil de usuario 4. Click en API en el men\u00fa 5. Solicitar API Key 6. Espera aprobaci\u00f3n (24-48 horas) 7. Copia la key a Babelcomics4</p> <p>En Babelcomics4: 1. Preferencias \u2192 ComicVine 2. Pega tu API Key 3. Guardar y reiniciar</p>"},{"location":"referencia/faq/#hay-limites-en-el-uso-de-comicvine","title":"\u00bfHay l\u00edmites en el uso de ComicVine?","text":"<p>S\u00ed, ComicVine tiene l\u00edmites de uso:</p> <ul> <li>200 peticiones por hora (l\u00edmite est\u00e1ndar)</li> <li>1 petici\u00f3n cada 3 segundos (rate limiting)</li> <li>Sin uso comercial sin permiso expl\u00edcito</li> </ul> <p>Babelcomics4 gestiona esto autom\u00e1ticamente: - Rate limiting integrado - Cache de respuestas - Procesamientos en lote - Delays configurables</p>"},{"location":"referencia/faq/#puedo-usar-babelcomics4-sin-comicvine","title":"\u00bfPuedo usar Babelcomics4 sin ComicVine?","text":"<p>S\u00ed, puedes usar Babelcomics4 sin ComicVine, pero con limitaciones:</p> <p>Funcionalidades disponibles sin ComicVine: - \u2705 Importar y organizar comics - \u2705 B\u00fasqueda por nombre de archivo - \u2705 Calificaci\u00f3n manual - \u2705 Thumbnails b\u00e1sicos - \u2705 Filtros por tama\u00f1o/formato</p> <p>Funcionalidades que requieren ComicVine: - \u274c Catalogaci\u00f3n autom\u00e1tica - \u274c Metadatos ricos (sinopsis, fechas) - \u274c Organizaci\u00f3n por vol\u00famenes - \u274c Informaci\u00f3n de equipos creativos - \u274c Portadas oficiales</p>"},{"location":"referencia/faq/#configuracion-y-personalizacion","title":"\u2699\ufe0f Configuraci\u00f3n y Personalizaci\u00f3n","text":""},{"location":"referencia/faq/#donde-se-almacenan-mis-datos","title":"\u00bfD\u00f3nde se almacenan mis datos?","text":"<p>Babelcomics4 almacena datos en ubicaciones est\u00e1ndar del sistema:</p> <p>Linux: <pre><code>~/.config/babelcomics4/          # Configuraci\u00f3n\n~/.local/share/babelcomics4/     # Datos de aplicaci\u00f3n\n\u251c\u2500\u2500 database/babelcomics.db      # Base de datos principal\n\u251c\u2500\u2500 thumbnails/                  # Cache de thumbnails\n\u251c\u2500\u2500 covers/                      # Portadas descargadas\n\u2514\u2500\u2500 logs/                        # Archivos de log\n</code></pre></p> <p>Windows: <pre><code>%APPDATA%\\Babelcomics4\\          # Configuraci\u00f3n\n%LOCALAPPDATA%\\Babelcomics4\\     # Datos de aplicaci\u00f3n\n</code></pre></p> <p>macOS: <pre><code>~/Library/Preferences/com.babelcomics4/        # Configuraci\u00f3n\n~/Library/Application Support/Babelcomics4/    # Datos\n</code></pre></p>"},{"location":"referencia/faq/#puedo-cambiar-el-tamano-de-los-thumbnails","title":"\u00bfPuedo cambiar el tama\u00f1o de los thumbnails?","text":"<p>S\u00ed, puedes personalizar los thumbnails:</p> <p>En Preferencias \u2192 Thumbnails: - Tama\u00f1o: Peque\u00f1o, Mediano, Grande, Extra Grande - Calidad: Econ\u00f3mica, Balanceada, Alta - Efectos: Escala de grises, overlays, bordes</p> <p>Configuraci\u00f3n avanzada en config.json: <pre><code>{\n  \"thumbnails\": {\n    \"size\": \"large\",\n    \"quality\": \"high\",\n    \"cache_size_limit\": \"2GB\",\n    \"effects\": {\n      \"uncataloged_grayscale\": true,\n      \"quality_overlay\": true\n    }\n  }\n}\n</code></pre></p>"},{"location":"referencia/faq/#como-hago-backup-de-mi-coleccion","title":"\u00bfC\u00f3mo hago backup de mi colecci\u00f3n?","text":"<p>Backup autom\u00e1tico (recomendado): 1. Preferencias \u2192 Base de Datos 2. Activar Backup Autom\u00e1tico 3. Configurar frecuencia (diaria/semanal)</p> <p>Backup manual: <pre><code># Backup completo\ncp -r ~/.local/share/babelcomics4/ ~/backup_babelcomics4/\n\n# Solo base de datos\ncp ~/.local/share/babelcomics4/database/babelcomics.db ~/backup_db.db\n\n# Desde la aplicaci\u00f3n\nbabelcomics4 --backup\n</code></pre></p> <p>Restaurar backup: <pre><code># Restaurar completo\ncp -r ~/backup_babelcomics4/ ~/.local/share/babelcomics4/\n\n# Solo base de datos\ncp ~/backup_db.db ~/.local/share/babelcomics4/database/babelcomics.db\n</code></pre></p>"},{"location":"referencia/faq/#puedo-usar-babelcomics4-en-multiples-dispositivos","title":"\u00bfPuedo usar Babelcomics4 en m\u00faltiples dispositivos?","text":"<p>S\u00ed, hay varias estrategias:</p> <p>Opci\u00f3n 1: Sincronizaci\u00f3n de configuraci\u00f3n - Exportar/importar configuraci\u00f3n - Compartir archivo <code>config.json</code></p> <p>Opci\u00f3n 2: Base de datos compartida - Base de datos en almacenamiento de red (NAS) - Configurar ruta personalizada de BD</p> <p>Opci\u00f3n 3: Directorio compartido - Comics en almacenamiento de red - Cada dispositivo con su propia BD</p> <p>Configuraci\u00f3n para red: <pre><code>{\n  \"database\": {\n    \"path\": \"/shared/babelcomics/database.db\"\n  },\n  \"directories\": {\n    \"comics_paths\": [\"/shared/comics/\"]\n  }\n}\n</code></pre></p>"},{"location":"referencia/faq/#problemas-tecnicos","title":"\ud83d\udd27 Problemas T\u00e9cnicos","text":""},{"location":"referencia/faq/#la-aplicacion-va-lenta-que-puedo-hacer","title":"La aplicaci\u00f3n va lenta, \u00bfqu\u00e9 puedo hacer?","text":"<p>Diagn\u00f3stico r\u00e1pido: <pre><code># Ejecutar diagn\u00f3stico autom\u00e1tico\nbabelcomics4 --diagnose\n\n# Verificar recursos del sistema\nhtop  # Linux\ntaskmgr  # Windows\n</code></pre></p> <p>Optimizaciones comunes:</p> <p>1. Limpiar cache de thumbnails: <pre><code>rm -rf ~/.local/share/babelcomics4/thumbnails/*\n</code></pre></p> <p>2. Optimizar base de datos: <pre><code>babelcomics4 --vacuum-db\n</code></pre></p> <p>3. Reducir calidad de thumbnails: <pre><code>{\n  \"thumbnails\": {\n    \"quality\": \"economy\",\n    \"size\": \"small\"\n  }\n}\n</code></pre></p> <p>4. Limitar tama\u00f1o de colecci\u00f3n mostrada: <pre><code>{\n  \"interface\": {\n    \"items_per_page\": 25,\n    \"lazy_loading\": true\n  }\n}\n</code></pre></p>"},{"location":"referencia/faq/#por-que-faltan-thumbnails","title":"\u00bfPor qu\u00e9 faltan thumbnails?","text":"<p>Causas comunes: - Archivos corruptos o inaccesibles - Falta de permisos de escritura - Cache lleno o corrupto - Formato de archivo no soportado</p> <p>Soluciones: <pre><code># Regenerar thumbnails faltantes\nbabelcomics4 --regenerate-thumbnails\n\n# Limpiar cache corrupto\nrm -rf ~/.local/share/babelcomics4/thumbnails/*\n\n# Verificar permisos\nchmod 755 ~/.local/share/babelcomics4/thumbnails/\n\n# Verificar archivos corruptos\nbabelcomics4 --verify-files\n</code></pre></p>"},{"location":"referencia/faq/#error-base-de-datos-bloqueada","title":"Error: \"Base de datos bloqueada\"","text":"<p>Causas: - M\u00faltiples instancias ejecut\u00e1ndose - Cierre abrupto anterior - Problemas de permisos</p> <p>Soluciones: <pre><code># 1. Cerrar todas las instancias\npkill babelcomics4\n\n# 2. Eliminar archivos de bloqueo\nrm ~/.local/share/babelcomics4/database/*.lock\n\n# 3. Verificar integridad\nsqlite3 ~/.local/share/babelcomics4/database/babelcomics.db \"PRAGMA integrity_check;\"\n\n# 4. Si hay corrupci\u00f3n\nbabelcomics4 --repair-database\n</code></pre></p>"},{"location":"referencia/faq/#no-puedo-conectar-con-comicvine","title":"No puedo conectar con ComicVine","text":"<p>Verificaciones: 1. Conectividad de red: <pre><code>ping comicvine.gamespot.com\ncurl -I https://comicvine.gamespot.com\n</code></pre></p> <ol> <li> <p>API Key v\u00e1lida: <pre><code># Probar API Key\ncurl \"https://comicvine.gamespot.com/api/volumes/?api_key=TU_API_KEY&amp;format=json&amp;limit=1\"\n</code></pre></p> </li> <li> <p>Configuraci\u00f3n de proxy: <pre><code>{\n  \"network\": {\n    \"proxy\": \"http://proxy.empresa.com:8080\",\n    \"timeout\": 30\n  }\n}\n</code></pre></p> </li> <li> <p>Rate limiting: <pre><code>{\n  \"comicvine\": {\n    \"request_delay\": 2.0,\n    \"requests_per_hour\": 100\n  }\n}\n</code></pre></p> </li> </ol>"},{"location":"referencia/faq/#funcionalidades-avanzadas","title":"\ud83d\ude80 Funcionalidades Avanzadas","text":""},{"location":"referencia/faq/#puedo-personalizar-la-interfaz","title":"\u00bfPuedo personalizar la interfaz?","text":"<p>S\u00ed, Babelcomics4 ofrece varias opciones de personalizaci\u00f3n:</p> <p>Temas: - Autom\u00e1tico (sigue el sistema) - Claro - Oscuro - Personalizado (CSS)</p> <p>Dise\u00f1o: - Tama\u00f1o de tarjetas - Densidad de informaci\u00f3n - Orden de columnas - Paneles colapsables</p> <p>Accesibilidad: - Soporte para lectores de pantalla - Navegaci\u00f3n por teclado - Contraste alto - Tama\u00f1os de fuente ajustables</p>"},{"location":"referencia/faq/#hay-atajos-de-teclado","title":"\u00bfHay atajos de teclado?","text":"<p>S\u00ed, Babelcomics4 incluye atajos de teclado completos:</p> <p>Navegaci\u00f3n: - <code>Ctrl+F</code>: Buscar - <code>Ctrl+1/2/3</code>: Cambiar vistas - <code>F5</code>: Actualizar/Escanear - <code>Escape</code>: Limpiar b\u00fasqueda</p> <p>Gesti\u00f3n: - <code>Ctrl+A</code>: Seleccionar todo - <code>Ctrl+D</code>: Deseleccionar - <code>Delete</code>: Mover a papelera - <code>Ctrl+Z</code>: Deshacer</p> <p>ComicVine: - <code>Ctrl+U</code>: Actualizar desde ComicVine - <code>Ctrl+Shift+C</code>: Catalogar seleccionados</p> <p>Personalizables: <pre><code>{\n  \"shortcuts\": {\n    \"search\": \"Ctrl+F\",\n    \"catalog\": \"Ctrl+Shift+C\",\n    \"quality_up\": \"Plus\",\n    \"quality_down\": \"Minus\"\n  }\n}\n</code></pre></p>"},{"location":"referencia/faq/#puedo-exportar-mi-catalogo","title":"\u00bfPuedo exportar mi cat\u00e1logo?","text":"<p>S\u00ed, Babelcomics4 permite exportar datos en varios formatos:</p> <p>Formatos disponibles: - CSV: Para hojas de c\u00e1lculo - JSON: Para otros programas - XML: Para ComicBookDB - HTML: Para web personal</p> <p>Ejemplo de exportaci\u00f3n: <pre><code># Exportar toda la colecci\u00f3n\nbabelcomics4 --export-csv ~/mi_coleccion.csv\n\n# Exportar solo DC Comics\nbabelcomics4 --export-csv ~/dc_comics.csv --filter publisher:\"DC Comics\"\n\n# Exportar con metadatos completos\nbabelcomics4 --export-json ~/coleccion_completa.json --include-metadata\n</code></pre></p>"},{"location":"referencia/faq/#hay-plugins-o-extensiones","title":"\u00bfHay plugins o extensiones?","text":"<p>Actualmente Babelcomics4 no tiene un sistema de plugins formal, pero es extensible:</p> <p>Extensibilidad actual: - Scripts personalizados - Configuraci\u00f3n avanzada JSON - Integraci\u00f3n con herramientas externas</p> <p>Extensiones planificadas: - Sistema de plugins Python - Hooks para eventos - Temas personalizados - Integraciones con servicios</p>"},{"location":"referencia/faq/#soporte-y-comunidad","title":"\ud83d\udcde Soporte y Comunidad","text":""},{"location":"referencia/faq/#donde-puedo-obtener-ayuda","title":"\u00bfD\u00f3nde puedo obtener ayuda?","text":"<p>Recursos oficiales: - \ud83d\udcda Documentaci\u00f3n: Esta misma documentaci\u00f3n - \ud83d\udc1b Reportar bugs: GitHub Issues - \ud83d\udcac Comunidad: Foro de usuarios - \ud83d\udca1 Sugerencias: GitHub Discussions</p> <p>Informaci\u00f3n \u00fatil para soporte: <pre><code># Informaci\u00f3n del sistema\nbabelcomics4 --version\nbabelcomics4 --system-info\n\n# Logs de diagn\u00f3stico\nbabelcomics4 --collect-logs\n\n# Estado de la aplicaci\u00f3n\nbabelcomics4 --diagnose\n</code></pre></p>"},{"location":"referencia/faq/#como-contribuyo-al-proyecto","title":"\u00bfC\u00f3mo contribuyo al proyecto?","text":"<p>\u00a1Las contribuciones son bienvenidas!</p> <p>Formas de contribuir: - \ud83d\udc1b Reportar bugs y problemas - \ud83d\udca1 Sugerir nuevas funcionalidades - \ud83d\udcdd Mejorar documentaci\u00f3n - \ud83c\udf0d Traducir a otros idiomas - \ud83d\udcbb Contribuir c\u00f3digo</p> <p>Para desarrolladores: 1. Fork del repositorio 2. Crear rama de feature 3. Implementar cambios 4. Tests y documentaci\u00f3n 5. Pull request</p>"},{"location":"referencia/faq/#habra-mas-funcionalidades","title":"\u00bfHabr\u00e1 m\u00e1s funcionalidades?","text":"<p>S\u00ed, Babelcomics4 est\u00e1 en desarrollo activo. Funcionalidades planificadas:</p> <p>Pr\u00f3xima versi\u00f3n (4.1): - Soporte para EPUB - Modo de lectura integrado - Sincronizaci\u00f3n en la nube - Sistema de plugins</p> <p>Futuro (4.x): - Integraci\u00f3n con m\u00e1s APIs - Modo servidor web - Aplicaci\u00f3n m\u00f3vil compa\u00f1era - AI para catalogaci\u00f3n</p> <p>Roadmap p\u00fablico: - GitHub Projects - Discusiones de la comunidad - Encuestas de funcionalidades</p> <p>\u00bfNo encuentras tu pregunta? \ud83d\udc49 Contacto y Soporte</p>"},{"location":"referencia/troubleshooting/","title":"Troubleshooting","text":"<p>Esta gu\u00eda te ayudar\u00e1 a resolver los problemas m\u00e1s comunes que puedes encontrar al usar Babelcomics4, desde errores de instalaci\u00f3n hasta problemas de rendimiento y configuraci\u00f3n.</p>"},{"location":"referencia/troubleshooting/#problemas-comunes","title":"\ud83d\udea8 Problemas Comunes","text":""},{"location":"referencia/troubleshooting/#problemas-de-instalacion","title":"Problemas de Instalaci\u00f3n","text":""},{"location":"referencia/troubleshooting/#error-no-se-pueden-instalar-las-dependencias","title":"Error: No se pueden instalar las dependencias","text":"<pre><code># Error t\u00edpico\nERROR: Could not install packages due to an EnvironmentError\n\n# Soluciones\n# 1. Actualizar pip\npython -m pip install --upgrade pip\n\n# 2. Instalar con usuario actual\npip install --user babelcomics4\n\n# 3. Usar entorno virtual\npython -m venv babelcomics_env\nsource babelcomics_env/bin/activate  # Linux/macOS\nbabelcomics_env\\Scripts\\activate     # Windows\npip install babelcomics4\n\n# 4. Instalar dependencias del sistema (Ubuntu/Debian)\nsudo apt update\nsudo apt install python3-dev python3-pip python3-gi python3-gi-cairo gir1.2-gtk-4.0 gir1.2-adwaita-1\n\n# 5. Instalar dependencias del sistema (Fedora)\nsudo dnf install python3-devel python3-pip python3-gobject gtk4-devel libadwaita-devel\n\n# 6. Instalar dependencias del sistema (Arch)\nsudo pacman -S python-pip python-gobject gtk4 libadwaita\n</code></pre>"},{"location":"referencia/troubleshooting/#error-gtk4-no-encontrado","title":"Error: GTK4 no encontrado","text":"<pre><code># Error\nImportError: cannot import name 'Gtk' from 'gi.repository'\n\n# Verificar instalaci\u00f3n de GTK4\npkg-config --modversion gtk4\n\n# Si no est\u00e1 instalado (Ubuntu/Debian)\nsudo apt install libgtk-4-dev libadwaita-1-dev\n\n# Si no est\u00e1 instalado (Fedora)\nsudo dnf install gtk4-devel libadwaita-devel\n\n# Si no est\u00e1 instalado (macOS con Homebrew)\nbrew install gtk4 libadwaita\n\n# Verificar PyGObject\npython -c \"from gi.repository import Gtk; print(Gtk._version)\"\n</code></pre>"},{"location":"referencia/troubleshooting/#error-base-de-datos-no-accesible","title":"Error: Base de datos no accesible","text":"<pre><code># Error\nsqlite3.OperationalError: unable to open database file\n\n# Verificar permisos del directorio\nls -la ~/.local/share/babelcomics4/\n\n# Crear directorio si no existe\nmkdir -p ~/.local/share/babelcomics4/database/\n\n# Verificar permisos de escritura\ntouch ~/.local/share/babelcomics4/database/test.db\nrm ~/.local/share/babelcomics4/database/test.db\n\n# Si hay problemas de permisos\nchmod 755 ~/.local/share/babelcomics4/\nchmod 644 ~/.local/share/babelcomics4/database/\n</code></pre>"},{"location":"referencia/troubleshooting/#problemas-de-rendimiento","title":"Problemas de Rendimiento","text":""},{"location":"referencia/troubleshooting/#la-aplicacion-se-ejecuta-lentamente","title":"La aplicaci\u00f3n se ejecuta lentamente","text":"<pre><code># Diagn\u00f3stico de rendimiento\ndef diagnose_performance():\n    \"\"\"Diagnosticar problemas de rendimiento\"\"\"\n\n    issues = []\n\n    # 1. Verificar tama\u00f1o de base de datos\n    db_size = get_database_size()\n    if db_size &gt; 500_000_000:  # 500MB\n        issues.append(\"Base de datos muy grande (&gt;500MB)\")\n\n    # 2. Verificar n\u00famero de comics\n    comic_count = get_comic_count()\n    if comic_count &gt; 50_000:\n        issues.append(f\"Colecci\u00f3n muy grande ({comic_count:,} comics)\")\n\n    # 3. Verificar cache de thumbnails\n    cache_size = get_thumbnail_cache_size()\n    if cache_size &gt; 2_000_000_000:  # 2GB\n        issues.append(\"Cache de thumbnails muy grande (&gt;2GB)\")\n\n    # 4. Verificar memoria disponible\n    available_memory = get_available_memory()\n    if available_memory &lt; 1_000_000_000:  # 1GB\n        issues.append(\"Poca memoria disponible (&lt;1GB)\")\n\n    return issues\n\n# Soluciones de rendimiento\ndef optimize_performance():\n    \"\"\"Optimizar rendimiento de la aplicaci\u00f3n\"\"\"\n\n    # 1. Limpiar cache de thumbnails\n    clean_thumbnail_cache()\n\n    # 2. Vacuum de base de datos\n    vacuum_database()\n\n    # 3. Reindexar base de datos\n    reindex_database()\n\n    # 4. Limpiar logs antiguos\n    clean_old_logs()\n\n    # 5. Optimizar configuraci\u00f3n\n    optimize_configuration()\n</code></pre>"},{"location":"referencia/troubleshooting/#problemas-con-thumbnails","title":"Problemas con thumbnails","text":"<pre><code># Regenerar thumbnails corruptos\nbabelcomics4 --regenerate-thumbnails\n\n# Limpiar cache de thumbnails\nrm -rf ~/.local/share/babelcomics4/thumbnails/*\n\n# Verificar espacio en disco\ndf -h ~/.local/share/babelcomics4/\n\n# Optimizar configuraci\u00f3n de thumbnails\n# En config.json:\n{\n  \"thumbnails\": {\n    \"quality\": \"economy\",  # Reducir calidad\n    \"cache_size_limit\": \"500MB\",  # Limitar cache\n    \"lazy_loading\": true  # Carga bajo demanda\n  }\n}\n</code></pre>"},{"location":"referencia/troubleshooting/#problemas-con-comicvine","title":"Problemas con ComicVine","text":""},{"location":"referencia/troubleshooting/#error-api-key-invalida","title":"Error: API Key inv\u00e1lida","text":"<pre><code># Verificar configuraci\u00f3n de API\ndef check_comicvine_config():\n    \"\"\"Verificar configuraci\u00f3n de ComicVine\"\"\"\n\n    config = ConfigurationManager()\n    api_key = config.get('comicvine.api_key')\n\n    if not api_key:\n        print(\"\u274c API Key no configurada\")\n        print(\"Soluci\u00f3n: Configurar API Key en Preferencias\")\n        return False\n\n    # Probar conexi\u00f3n\n    client = ComicVineClient(api_key)\n    try:\n        test_result = client.search_volumes(\"Batman\", limit=1)\n        if test_result:\n            print(\"\u2705 API Key v\u00e1lida y funcionando\")\n            return True\n        else:\n            print(\"\u274c API Key inv\u00e1lida o problema de conexi\u00f3n\")\n            return False\n    except Exception as e:\n        print(f\"\u274c Error de conexi\u00f3n: {e}\")\n        return False\n\n# Soluciones para problemas de ComicVine\ndef fix_comicvine_issues():\n    \"\"\"Solucionar problemas comunes de ComicVine\"\"\"\n\n    # 1. Verificar l\u00edmites de rate\n    print(\"Verificando l\u00edmites de rate...\")\n\n    # 2. Limpiar cache de API\n    print(\"Limpiando cache de API...\")\n\n    # 3. Reintentar peticiones fallidas\n    print(\"Reintentando peticiones fallidas...\")\n\n    # 4. Verificar conectividad de red\n    print(\"Verificando conectividad...\")\n</code></pre>"},{"location":"referencia/troubleshooting/#error-rate-limit-excedido","title":"Error: Rate limit excedido","text":"<pre><code># Error t\u00edpico\nComicVine API error: Rate limit exceeded\n\n# Soluciones en config.json:\n{\n  \"comicvine\": {\n    \"request_delay\": 2.0,        # Aumentar delay\n    \"requests_per_hour\": 150,    # Reducir l\u00edmite\n    \"batch_size\": 25             # Reducir tama\u00f1o de lote\n  }\n}\n\n# Monitorear uso de API\ntail -f ~/.local/share/babelcomics4/logs/comicvine.log\n</code></pre>"},{"location":"referencia/troubleshooting/#problemas-de-base-de-datos","title":"Problemas de Base de Datos","text":""},{"location":"referencia/troubleshooting/#error-base-de-datos-corrupta","title":"Error: Base de datos corrupta","text":"<pre><code>-- Verificar integridad\nPRAGMA integrity_check;\n\n-- Si hay corrupci\u00f3n, intentar reparar\nPRAGMA quick_check;\n\n-- Backup antes de reparar\ncp ~/.local/share/babelcomics4/database/babelcomics.db \\\n   ~/.local/share/babelcomics4/database/babelcomics_backup.db\n\n-- Vacuum para optimizar\nVACUUM;\n\n-- Reindexar\nREINDEX;\n</code></pre> <pre><code># Script de reparaci\u00f3n de base de datos\ndef repair_database():\n    \"\"\"Reparar base de datos corrupta\"\"\"\n\n    import sqlite3\n    import shutil\n    from datetime import datetime\n\n    db_path = \"~/.local/share/babelcomics4/database/babelcomics.db\"\n    backup_path = f\"~/.local/share/babelcomics4/database/backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.db\"\n\n    # 1. Crear backup\n    shutil.copy2(db_path, backup_path)\n    print(f\"Backup creado: {backup_path}\")\n\n    # 2. Intentar reparaci\u00f3n\n    try:\n        conn = sqlite3.connect(db_path)\n\n        # Verificar integridad\n        result = conn.execute(\"PRAGMA integrity_check\").fetchone()\n        if result[0] != \"ok\":\n            print(f\"\u274c Base de datos corrupta: {result[0]}\")\n\n            # Intentar exportar/importar datos\n            export_and_reimport_database(conn)\n        else:\n            print(\"\u2705 Base de datos \u00edntegra\")\n\n        # Optimizar\n        conn.execute(\"VACUUM\")\n        conn.execute(\"REINDEX\")\n        conn.close()\n\n    except Exception as e:\n        print(f\"\u274c Error reparando base de datos: {e}\")\n        print(f\"Restaurando backup desde: {backup_path}\")\n        shutil.copy2(backup_path, db_path)\n</code></pre>"},{"location":"referencia/troubleshooting/#problemas-de-migracion","title":"Problemas de migraci\u00f3n","text":"<pre><code># Verificar versi\u00f3n de esquema\ndef check_schema_version():\n    \"\"\"Verificar versi\u00f3n del esquema de base de datos\"\"\"\n\n    try:\n        conn = sqlite3.connect(db_path)\n\n        # Verificar tabla de versiones\n        result = conn.execute(\"\"\"\n            SELECT name FROM sqlite_master\n            WHERE type='table' AND name='alembic_version'\n        \"\"\").fetchone()\n\n        if result:\n            version = conn.execute(\"SELECT version_num FROM alembic_version\").fetchone()\n            print(f\"Versi\u00f3n de esquema: {version[0] if version else 'Unknown'}\")\n        else:\n            print(\"\u274c Tabla de versiones no encontrada\")\n\n        conn.close()\n\n    except Exception as e:\n        print(f\"\u274c Error verificando esquema: {e}\")\n\n# Aplicar migraciones manualmente\ndef manual_migration():\n    \"\"\"Aplicar migraciones manualmente\"\"\"\n\n    # Backup autom\u00e1tico\n    create_database_backup()\n\n    # Aplicar migraciones\n    from alembic import command\n    from alembic.config import Config\n\n    alembic_cfg = Config(\"alembic.ini\")\n\n    try:\n        command.upgrade(alembic_cfg, \"head\")\n        print(\"\u2705 Migraciones aplicadas exitosamente\")\n    except Exception as e:\n        print(f\"\u274c Error en migraci\u00f3n: {e}\")\n        restore_database_backup()\n</code></pre>"},{"location":"referencia/troubleshooting/#herramientas-de-diagnostico","title":"\ud83d\udd27 Herramientas de Diagn\u00f3stico","text":""},{"location":"referencia/troubleshooting/#script-de-diagnostico-automatico","title":"Script de Diagn\u00f3stico Autom\u00e1tico","text":""},{"location":"referencia/troubleshooting/#diagnosticpy","title":"diagnostic.py","text":"<pre><code>#!/usr/bin/env python3\n\"\"\"\nScript de diagn\u00f3stico autom\u00e1tico para Babelcomics4\n\"\"\"\n\nimport os\nimport sys\nimport json\nimport sqlite3\nimport platform\nimport subprocess\nfrom pathlib import Path\nfrom datetime import datetime\n\nclass Babelcomics4Diagnostic:\n    \"\"\"Herramienta de diagn\u00f3stico para Babelcomics4\"\"\"\n\n    def __init__(self):\n        self.config_dir = self._get_config_dir()\n        self.data_dir = self._get_data_dir()\n        self.issues = []\n        self.warnings = []\n        self.info = []\n\n    def run_full_diagnostic(self):\n        \"\"\"Ejecutar diagn\u00f3stico completo\"\"\"\n        print(\"\ud83d\udd0d Ejecutando diagn\u00f3stico de Babelcomics4...\")\n        print(\"=\" * 50)\n\n        self.check_system_requirements()\n        self.check_python_environment()\n        self.check_configuration()\n        self.check_database()\n        self.check_file_permissions()\n        self.check_disk_space()\n        self.check_network_connectivity()\n\n        self.print_summary()\n\n        if self.issues:\n            print(\"\\n\ud83d\udd27 Ejecutar reparaciones autom\u00e1ticas? (y/n): \", end=\"\")\n            if input().lower() == 'y':\n                self.auto_repair()\n\n    def check_system_requirements(self):\n        \"\"\"Verificar requisitos del sistema\"\"\"\n        print(\"\\n\ud83d\udccb Verificando requisitos del sistema...\")\n\n        # Versi\u00f3n de Python\n        python_version = sys.version_info\n        if python_version &lt; (3, 9):\n            self.issues.append(f\"Python {python_version.major}.{python_version.minor} es muy antiguo (m\u00ednimo: 3.9)\")\n        else:\n            self.info.append(f\"\u2705 Python {python_version.major}.{python_version.minor}.{python_version.micro}\")\n\n        # Sistema operativo\n        os_info = platform.platform()\n        self.info.append(f\"\ud83d\udcbb Sistema: {os_info}\")\n\n        # Arquitectura\n        arch = platform.machine()\n        self.info.append(f\"\ud83c\udfd7\ufe0f Arquitectura: {arch}\")\n\n        # Verificar GTK4\n        try:\n            from gi.repository import Gtk\n            gtk_version = f\"{Gtk.get_major_version()}.{Gtk.get_minor_version()}.{Gtk.get_micro_version()}\"\n            self.info.append(f\"\u2705 GTK {gtk_version}\")\n        except ImportError:\n            self.issues.append(\"GTK4 no est\u00e1 instalado o no es accesible\")\n\n        # Verificar libadwaita\n        try:\n            from gi.repository import Adw\n            self.info.append(\"\u2705 libadwaita disponible\")\n        except ImportError:\n            self.warnings.append(\"libadwaita no disponible (interfaz limitada)\")\n\n    def check_python_environment(self):\n        \"\"\"Verificar entorno de Python\"\"\"\n        print(\"\ud83d\udc0d Verificando entorno de Python...\")\n\n        # Verificar dependencias cr\u00edticas\n        critical_deps = [\n            'sqlalchemy',\n            'requests',\n            'pillow',\n            'gi'\n        ]\n\n        for dep in critical_deps:\n            try:\n                __import__(dep)\n                self.info.append(f\"\u2705 {dep}\")\n            except ImportError:\n                self.issues.append(f\"Dependencia faltante: {dep}\")\n\n        # Verificar versiones de dependencias\n        try:\n            import sqlalchemy\n            if sqlalchemy.__version__ &lt; \"2.0\":\n                self.warnings.append(f\"SQLAlchemy {sqlalchemy.__version__} es antigua (recomendado: 2.0+)\")\n        except:\n            pass\n\n    def check_configuration(self):\n        \"\"\"Verificar configuraci\u00f3n\"\"\"\n        print(\"\u2699\ufe0f Verificando configuraci\u00f3n...\")\n\n        config_file = self.config_dir / \"config.json\"\n\n        if not config_file.exists():\n            self.warnings.append(\"Archivo de configuraci\u00f3n no existe (se crear\u00e1 autom\u00e1ticamente)\")\n            return\n\n        try:\n            with open(config_file, 'r') as f:\n                config = json.load(f)\n\n            # Verificar estructura b\u00e1sica\n            required_sections = ['application', 'directories', 'comicvine']\n            for section in required_sections:\n                if section not in config:\n                    self.warnings.append(f\"Secci\u00f3n de configuraci\u00f3n faltante: {section}\")\n\n            # Verificar directorios de comics\n            comics_paths = config.get('directories', {}).get('comics_paths', [])\n            if not comics_paths:\n                self.warnings.append(\"No hay directorios de comics configurados\")\n            else:\n                for path in comics_paths:\n                    if not os.path.exists(os.path.expanduser(path)):\n                        self.warnings.append(f\"Directorio de comics no existe: {path}\")\n\n            # Verificar API de ComicVine\n            api_key = config.get('comicvine', {}).get('api_key', '')\n            if not api_key:\n                self.warnings.append(\"API Key de ComicVine no configurada\")\n\n            self.info.append(\"\u2705 Configuraci\u00f3n cargada correctamente\")\n\n        except json.JSONDecodeError:\n            self.issues.append(\"Archivo de configuraci\u00f3n corrupto\")\n        except Exception as e:\n            self.issues.append(f\"Error leyendo configuraci\u00f3n: {e}\")\n\n    def check_database(self):\n        \"\"\"Verificar base de datos\"\"\"\n        print(\"\ud83d\uddc4\ufe0f Verificando base de datos...\")\n\n        db_path = self.data_dir / \"database\" / \"babelcomics.db\"\n\n        if not db_path.exists():\n            self.info.append(\"Base de datos no existe (se crear\u00e1 autom\u00e1ticamente)\")\n            return\n\n        try:\n            conn = sqlite3.connect(db_path)\n\n            # Verificar integridad\n            result = conn.execute(\"PRAGMA integrity_check\").fetchone()\n            if result[0] != \"ok\":\n                self.issues.append(f\"Base de datos corrupta: {result[0]}\")\n            else:\n                self.info.append(\"\u2705 Integridad de base de datos OK\")\n\n            # Verificar tama\u00f1o\n            db_size = os.path.getsize(db_path)\n            self.info.append(f\"\ud83d\udcca Tama\u00f1o de base de datos: {db_size / 1024 / 1024:.1f} MB\")\n\n            # Contar registros\n            comic_count = conn.execute(\"SELECT COUNT(*) FROM comicbooks\").fetchone()[0]\n            self.info.append(f\"\ud83d\udcda Comics en base de datos: {comic_count:,}\")\n\n            conn.close()\n\n        except sqlite3.Error as e:\n            self.issues.append(f\"Error de base de datos: {e}\")\n\n    def check_file_permissions(self):\n        \"\"\"Verificar permisos de archivos\"\"\"\n        print(\"\ud83d\udd10 Verificando permisos...\")\n\n        # Verificar permisos de directorios\n        dirs_to_check = [\n            self.config_dir,\n            self.data_dir,\n            self.data_dir / \"database\",\n            self.data_dir / \"thumbnails\",\n            self.data_dir / \"logs\"\n        ]\n\n        for directory in dirs_to_check:\n            if directory.exists():\n                if not os.access(directory, os.W_OK):\n                    self.issues.append(f\"Sin permisos de escritura: {directory}\")\n                else:\n                    self.info.append(f\"\u2705 Permisos OK: {directory.name}\")\n            else:\n                try:\n                    directory.mkdir(parents=True, exist_ok=True)\n                    self.info.append(f\"\u2705 Directorio creado: {directory}\")\n                except PermissionError:\n                    self.issues.append(f\"No se puede crear directorio: {directory}\")\n\n    def check_disk_space(self):\n        \"\"\"Verificar espacio en disco\"\"\"\n        print(\"\ud83d\udcbe Verificando espacio en disco...\")\n\n        try:\n            if platform.system() == \"Windows\":\n                import shutil\n                total, used, free = shutil.disk_usage(self.data_dir)\n            else:\n                statvfs = os.statvfs(self.data_dir)\n                free = statvfs.f_frsize * statvfs.f_bavail\n                total = statvfs.f_frsize * statvfs.f_blocks\n\n            free_gb = free / (1024**3)\n            total_gb = total / (1024**3)\n\n            self.info.append(f\"\ud83d\udcbd Espacio libre: {free_gb:.1f} GB de {total_gb:.1f} GB\")\n\n            if free_gb &lt; 1:\n                self.issues.append(\"Espacio en disco muy bajo (&lt;1GB)\")\n            elif free_gb &lt; 5:\n                self.warnings.append(\"Espacio en disco bajo (&lt;5GB)\")\n\n        except Exception as e:\n            self.warnings.append(f\"No se pudo verificar espacio en disco: {e}\")\n\n    def check_network_connectivity(self):\n        \"\"\"Verificar conectividad de red\"\"\"\n        print(\"\ud83c\udf10 Verificando conectividad...\")\n\n        try:\n            import requests\n\n            # Probar conexi\u00f3n a ComicVine\n            response = requests.get(\"https://comicvine.gamespot.com\", timeout=10)\n            if response.status_code == 200:\n                self.info.append(\"\u2705 Conectividad a ComicVine OK\")\n            else:\n                self.warnings.append(f\"ComicVine responde con c\u00f3digo: {response.status_code}\")\n\n        except requests.exceptions.RequestException as e:\n            self.warnings.append(f\"Problema de conectividad: {e}\")\n        except ImportError:\n            self.warnings.append(\"M\u00f3dulo requests no disponible\")\n\n    def print_summary(self):\n        \"\"\"Imprimir resumen del diagn\u00f3stico\"\"\"\n        print(\"\\n\" + \"=\" * 50)\n        print(\"\ud83d\udcca RESUMEN DEL DIAGN\u00d3STICO\")\n        print(\"=\" * 50)\n\n        if self.issues:\n            print(f\"\\n\u274c PROBLEMAS CR\u00cdTICOS ({len(self.issues)}):\")\n            for issue in self.issues:\n                print(f\"   \u2022 {issue}\")\n\n        if self.warnings:\n            print(f\"\\n\u26a0\ufe0f ADVERTENCIAS ({len(self.warnings)}):\")\n            for warning in self.warnings:\n                print(f\"   \u2022 {warning}\")\n\n        if self.info:\n            print(f\"\\n\u2705 INFORMACI\u00d3N ({len(self.info)}):\")\n            for info_item in self.info:\n                print(f\"   \u2022 {info_item}\")\n\n        # Estado general\n        if not self.issues:\n            if not self.warnings:\n                print(\"\\n\ud83c\udf89 \u00a1Todo funciona perfectamente!\")\n            else:\n                print(\"\\n\ud83d\udc4d Sistema funcional con algunas advertencias\")\n        else:\n            print(f\"\\n\ud83d\udd27 Se encontraron {len(self.issues)} problemas que requieren atenci\u00f3n\")\n\n    def auto_repair(self):\n        \"\"\"Reparaciones autom\u00e1ticas\"\"\"\n        print(\"\\n\ud83d\udd27 Ejecutando reparaciones autom\u00e1ticas...\")\n\n        # Crear directorios faltantes\n        for directory in [self.config_dir, self.data_dir]:\n            if not directory.exists():\n                try:\n                    directory.mkdir(parents=True, exist_ok=True)\n                    print(f\"\u2705 Directorio creado: {directory}\")\n                except Exception as e:\n                    print(f\"\u274c Error creando {directory}: {e}\")\n\n        # Reparar configuraci\u00f3n\n        config_file = self.config_dir / \"config.json\"\n        if not config_file.exists():\n            self._create_default_config()\n\n        # Limpiar cache si hay problemas de espacio\n        if any(\"espacio\" in issue.lower() for issue in self.issues):\n            self._clean_cache()\n\n        print(\"\ud83c\udfaf Reparaciones completadas\")\n\n    def _get_config_dir(self):\n        \"\"\"Obtener directorio de configuraci\u00f3n\"\"\"\n        if platform.system() == \"Windows\":\n            return Path(os.path.expandvars(\"%APPDATA%\")) / \"Babelcomics4\"\n        elif platform.system() == \"Darwin\":\n            return Path.home() / \"Library\" / \"Preferences\" / \"com.babelcomics4\"\n        else:\n            return Path.home() / \".config\" / \"babelcomics4\"\n\n    def _get_data_dir(self):\n        \"\"\"Obtener directorio de datos\"\"\"\n        if platform.system() == \"Windows\":\n            return Path(os.path.expandvars(\"%LOCALAPPDATA%\")) / \"Babelcomics4\"\n        elif platform.system() == \"Darwin\":\n            return Path.home() / \"Library\" / \"Application Support\" / \"Babelcomics4\"\n        else:\n            return Path.home() / \".local\" / \"share\" / \"babelcomics4\"\n\nif __name__ == \"__main__\":\n    diagnostic = Babelcomics4Diagnostic()\n    diagnostic.run_full_diagnostic()\n</code></pre>"},{"location":"referencia/troubleshooting/#recoleccion-de-logs","title":"Recolecci\u00f3n de Logs","text":""},{"location":"referencia/troubleshooting/#log-collector","title":"Log Collector","text":"<pre><code>def collect_diagnostic_logs():\n    \"\"\"Recolectar logs para diagn\u00f3stico\"\"\"\n\n    import zipfile\n    from datetime import datetime, timedelta\n\n    log_dir = Path.home() / \".local\" / \"share\" / \"babelcomics4\" / \"logs\"\n    output_file = f\"babelcomics4_logs_{datetime.now().strftime('%Y%m%d_%H%M%S')}.zip\"\n\n    with zipfile.ZipFile(output_file, 'w') as zip_file:\n        # Logs de aplicaci\u00f3n\n        for log_file in log_dir.glob(\"*.log\"):\n            zip_file.write(log_file, f\"logs/{log_file.name}\")\n\n        # Configuraci\u00f3n (sin datos sensibles)\n        config_file = Path.home() / \".config\" / \"babelcomics4\" / \"config.json\"\n        if config_file.exists():\n            # Censurar API keys antes de incluir\n            with open(config_file, 'r') as f:\n                config = json.load(f)\n\n            if 'comicvine' in config and 'api_key' in config['comicvine']:\n                config['comicvine']['api_key'] = '***CENSORED***'\n\n            zip_file.writestr(\"config.json\", json.dumps(config, indent=2))\n\n        # Informaci\u00f3n del sistema\n        system_info = {\n            'platform': platform.platform(),\n            'python_version': sys.version,\n            'timestamp': datetime.now().isoformat()\n        }\n        zip_file.writestr(\"system_info.json\", json.dumps(system_info, indent=2))\n\n    print(f\"\ud83d\udce6 Logs recolectados en: {output_file}\")\n    return output_file\n</code></pre>"},{"location":"referencia/troubleshooting/#obtener-ayuda","title":"\ud83d\udcde Obtener Ayuda","text":""},{"location":"referencia/troubleshooting/#recursos-de-soporte","title":"Recursos de Soporte","text":""},{"location":"referencia/troubleshooting/#documentacion-y-comunidad","title":"Documentaci\u00f3n y Comunidad","text":"<ul> <li>\ud83d\udcda Documentaci\u00f3n: docs.babelcomics.com</li> <li>\ud83d\udc1b Reportar bugs: github.com/babelcomics4/issues</li> <li>\ud83d\udcac Foro de usuarios: forum.babelcomics.com</li> <li>\ud83d\udca1 Solicitar features: github.com/babelcomics4/discussions</li> </ul>"},{"location":"referencia/troubleshooting/#informacion-para-reportes-de-bugs","title":"Informaci\u00f3n para Reportes de Bugs","text":"<p>Cuando reportes un problema, incluye:</p> <ol> <li>Versi\u00f3n de Babelcomics4: <code>babelcomics4 --version</code></li> <li>Sistema operativo: <code>uname -a</code> (Linux/macOS) o <code>systeminfo</code> (Windows)</li> <li>Versi\u00f3n de Python: <code>python --version</code></li> <li>Logs relevantes: Usar el script de recolecci\u00f3n de logs</li> <li>Pasos para reproducir: Descripci\u00f3n detallada</li> <li>Comportamiento esperado vs actual</li> </ol>"},{"location":"referencia/troubleshooting/#template-para-issues","title":"Template para Issues","text":"<pre><code>## Descripci\u00f3n del Problema\n[Descripci\u00f3n clara y concisa del problema]\n\n## Pasos para Reproducir\n1. Ir a '...'\n2. Hacer click en '....'\n3. Ejecutar '....'\n4. Ver error\n\n## Comportamiento Esperado\n[Qu\u00e9 esperabas que pasara]\n\n## Comportamiento Actual\n[Qu\u00e9 pas\u00f3 realmente]\n\n## Informaci\u00f3n del Sistema\n- Babelcomics4 versi\u00f3n: [ej. 4.0.1]\n- OS: [ej. Ubuntu 22.04, Windows 11, macOS 13]\n- Python: [ej. 3.11.2]\n\n## Logs Adicionales\n[Adjuntar archivo de logs o pegar logs relevantes]\n\n## Capturas de Pantalla\n[Si aplica, a\u00f1adir capturas de pantalla]\n</code></pre> <p>\u00bfTienes m\u00e1s preguntas? \ud83d\udc49 FAQ</p>"},{"location":"usuario/comicvine/","title":"Integraci\u00f3n ComicVine","text":"<p>Babelcomics4 incluye integraci\u00f3n completa con la API de ComicVine para automatizar la catalogaci\u00f3n y obtener metadata rica de tu colecci\u00f3n de comics.</p>"},{"location":"usuario/comicvine/#que-es-comicvine","title":"\ud83c\udf10 \u00bfQu\u00e9 es ComicVine?","text":"<p>ComicVine es la base de datos de comics m\u00e1s completa del mundo, mantenida por GameSpot. Incluye:</p> <ul> <li>\ud83d\udcda Vol\u00famenes: Series completas con informaci\u00f3n detallada</li> <li>\ud83d\udcd6 Issues: N\u00fameros individuales con metadata espec\u00edfica</li> <li>\ud83c\udfe2 Publishers: Informaci\u00f3n de editoriales</li> <li>\ud83d\udc65 Personajes: Base de datos de personajes</li> <li>\ud83d\uddbc\ufe0f Im\u00e1genes: Portadas y artwork oficial</li> </ul>"},{"location":"usuario/comicvine/#configuracion-de-api","title":"\ud83d\udd11 Configuraci\u00f3n de API","text":""},{"location":"usuario/comicvine/#obtener-api-key","title":"Obtener API Key","text":"<ol> <li>Crear cuenta en ComicVine</li> <li>Ir a Profile \u2192 API Key</li> <li>Generar nueva clave de API</li> <li>Copiar la clave para configurar en Babelcomics4</li> </ol>"},{"location":"usuario/comicvine/#configurar-en-babelcomics4","title":"Configurar en Babelcomics4","text":""},{"location":"usuario/comicvine/#metodo-1-variable-de-entorno","title":"M\u00e9todo 1: Variable de Entorno","text":"<pre><code># Agregar a ~/.bashrc o ~/.zshrc\nexport COMICVINE_API_KEY=\"tu-clave-de-api-aqui\"\n\n# Recargar terminal\nsource ~/.bashrc\n</code></pre>"},{"location":"usuario/comicvine/#metodo-2-archivo-de-configuracion","title":"M\u00e9todo 2: Archivo de Configuraci\u00f3n","text":"<pre><code># helpers/config.py\nCOMICVINE_API_KEY = \"tu-clave-de-api-aqui\"\n</code></pre>"},{"location":"usuario/comicvine/#metodo-3-ui-de-la-aplicacion-futuro","title":"M\u00e9todo 3: UI de la Aplicaci\u00f3n (Futuro)","text":"<pre><code>\u250c\u2500\u2500\u2500 Configuraci\u00f3n ComicVine \u2500\u2500\u2500\u2510\n\u2502 API Key: [******************] \u2502\n\u2502          [Validar Conexi\u00f3n]   \u2502\n\u2502                               \u2502\n\u2502 \u2705 Conexi\u00f3n exitosa           \u2502\n\u2502 L\u00edmite: 200 req/hora          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"usuario/comicvine/#cliente-comicvine","title":"\ud83d\udce1 Cliente ComicVine","text":""},{"location":"usuario/comicvine/#arquitectura-del-cliente","title":"Arquitectura del Cliente","text":"<pre><code># helpers/comicvine_client.py\nclass ComicVineClient:\n    def __init__(self):\n        self.api_key = os.getenv('COMICVINE_API_KEY')\n        self.base_url = 'https://comicvine.gamespot.com/api'\n        self.rate_limit = 200  # requests per hour\n\n    def search_volumes(self, query):\n        \"\"\"Buscar vol\u00famenes por nombre\"\"\"\n\n    def get_volume_details(self, volume_id):\n        \"\"\"Obtener detalles completos de un volumen\"\"\"\n\n    def get_volume_issues(self, volume_id):\n        \"\"\"Obtener todos los issues de un volumen\"\"\"\n\n    def download_image(self, image_url, local_path):\n        \"\"\"Descargar imagen desde ComicVine\"\"\"\n</code></pre>"},{"location":"usuario/comicvine/#limites-de-api","title":"L\u00edmites de API","text":"<pre><code>\u250c\u2500\u2500\u2500 L\u00edmites ComicVine \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \u2022 200 requests/hora           \u2502\n\u2502 \u2022 1 request/segundo m\u00e1ximo    \u2502\n\u2502 \u2022 Timeout: 30 segundos        \u2502\n\u2502 \u2022 Retry autom\u00e1tico: 3 veces   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"usuario/comicvine/#actualizacion-de-volumenes","title":"\ud83d\udd04 Actualizaci\u00f3n de Vol\u00famenes","text":""},{"location":"usuario/comicvine/#flujo-de-actualizacion","title":"Flujo de Actualizaci\u00f3n","text":"<pre><code>graph TB\n    A[Seleccionar Volumen] --&gt; B[Bot\u00f3n Actualizar ComicVine]\n    B --&gt; C[Buscar en API]\n    C --&gt; D[Obtener Issues Nuevos]\n    D --&gt; E[Descargar Metadata]\n    E --&gt; F[Descargar Im\u00e1genes]\n    F --&gt; G[Actualizar BD]\n    G --&gt; H[Refrescar UI]\n</code></pre>"},{"location":"usuario/comicvine/#boton-de-actualizacion","title":"Bot\u00f3n de Actualizaci\u00f3n","text":"<p>En la p\u00e1gina de detalle de cada volumen:</p> <pre><code>\u250c\u2500\u2500\u2500 Acciones del Volumen \u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [\ud83d\udd04 Actualizar ComicVine]     \u2502\n\u2502                               \u2502\n\u2502 \u2022 Buscar nuevos issues        \u2502\n\u2502 \u2022 Actualizar metadata         \u2502\n\u2502 \u2022 Descargar portadas          \u2502\n\u2502 \u2022 Sincronizar informaci\u00f3n     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"usuario/comicvine/#proceso-de-actualizacion","title":"Proceso de Actualizaci\u00f3n","text":""},{"location":"usuario/comicvine/#1-busqueda-en-comicvine","title":"1. B\u00fasqueda en ComicVine","text":"<pre><code>def update_volume_from_comicvine(volume):\n    \"\"\"Actualizar volumen desde ComicVine\"\"\"\n\n    # 1. Buscar por ID de ComicVine\n    if volume.id_comicvine:\n        volume_data = client.get_volume_details(volume.id_comicvine)\n    else:\n        # 2. Buscar por nombre si no hay ID\n        results = client.search_volumes(volume.nombre)\n        volume_data = results[0]  # Mejor coincidencia\n\n    # 3. Obtener lista de issues\n    issues = client.get_volume_issues(volume_data['id'])\n\n    return volume_data, issues\n</code></pre>"},{"location":"usuario/comicvine/#2-creacionactualizacion-de-issues","title":"2. Creaci\u00f3n/Actualizaci\u00f3n de Issues","text":"<pre><code>for issue_data in issues:\n    # Verificar si el issue ya existe\n    existing = session.query(ComicbookInfo).filter_by(\n        id_volume=volume.id_volume,\n        numero=issue_data['issue_number']\n    ).first()\n\n    if existing:\n        # Actualizar issue existente con datos de ComicVine\n        existing.comicvine_id = issue_data['id']\n        existing.url_api_detalle = issue_data['api_detail_url']\n        existing.url_sitio_web = issue_data['site_detail_url']\n        if not existing.titulo:\n            existing.titulo = issue_data['name']\n        if not existing.resumen:\n            existing.resumen = issue_data['description']\n    else:\n        # Crear nuevo issue\n        new_issue = ComicbookInfo(\n            titulo=issue_data['name'],\n            numero=issue_data['issue_number'],\n            fecha_tapa=parse_date(issue_data['cover_date']),\n            resumen=issue_data['description'],\n            comicvine_id=issue_data['id'],\n            url_api_detalle=issue_data['api_detail_url'],\n            url_sitio_web=issue_data['site_detail_url'],\n            id_volume=volume.id_volume\n        )\n        session.add(new_issue)\n</code></pre>"},{"location":"usuario/comicvine/#3-descarga-de-multiples-portadas","title":"3. Descarga de M\u00faltiples Portadas","text":"<pre><code>def create_issue_cover_records(issue, issue_data):\n    \"\"\"Crear registros de portadas para un issue (principal + associated_images)\"\"\"\n\n    covers_created = 0\n\n    # 1. Portada principal desde el campo 'image'\n    main_image = issue_data.get('image', {})\n    if main_image and main_image.get('medium_url'):\n        main_cover = ComicbookInfoCover(\n            id_comicbook_info=issue.id_comicbook_info,\n            url_imagen=main_image['medium_url'],\n            tipo_portada='principal'\n        )\n        session.add(main_cover)\n        covers_created += 1\n\n    # 2. Portadas variantes desde 'associated_images'\n    associated_images = issue_data.get('associated_images', [])\n    for idx, img in enumerate(associated_images):\n        if img.get('medium_url'):\n            variant_cover = ComicbookInfoCover(\n                id_comicbook_info=issue.id_comicbook_info,\n                url_imagen=img['medium_url'],\n                tipo_portada=f'variant_{idx + 1}'\n            )\n            session.add(variant_cover)\n            covers_created += 1\n\n    return covers_created\n\ndef download_covers_in_background(issues, callback):\n    \"\"\"Descargar todas las portadas en segundo plano\"\"\"\n\n    def download_worker():\n        with ThreadPoolExecutor(max_workers=5) as executor:\n            futures = []\n\n            for issue in issues:\n                # Descargar todas las portadas del issue\n                for cover in issue.portadas:\n                    if cover.url_imagen:\n                        future = executor.submit(\n                            download_single_cover,\n                            cover.url_imagen,\n                            issue.id_comicbook_info,\n                            cover.tipo_portada\n                        )\n                        futures.append(future)\n\n            # Esperar a que terminen todas las descargas\n            for future in futures:\n                future.result()\n\n        # Callback en el hilo principal\n        GLib.idle_add(callback)\n\n    # Ejecutar en hilo separado\n    Thread(target=download_worker).start()\n</code></pre>"},{"location":"usuario/comicvine/#gestion-de-imagenes","title":"\ud83d\uddbc\ufe0f Gesti\u00f3n de Im\u00e1genes","text":""},{"location":"usuario/comicvine/#estructura-de-directorios","title":"Estructura de Directorios","text":"<pre><code>data/thumbnails/\n\u251c\u2500\u2500 volumes/                      # Portadas de vol\u00famenes\n\u2502   \u251c\u2500\u2500 12345.jpg                # volume_id.jpg\n\u2502   \u2514\u2500\u2500 67890.jpg\n\u251c\u2500\u2500 comicbook_info/              # Portadas de issues (ACTUALIZADO)\n\u2502   \u251c\u2500\u2500 Superman_12345/          # volumen_nombre_id\n\u2502   \u2502   \u251c\u2500\u2500 cover_main.jpg       # Portada principal\n\u2502   \u2502   \u251c\u2500\u2500 cover_variant_1.jpg  # Portada variante 1\n\u2502   \u2502   \u251c\u2500\u2500 cover_variant_2.jpg  # Portada variante 2\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u2514\u2500\u2500 Batman_67890/\n\u2502       \u251c\u2500\u2500 cover_main.jpg\n\u2502       \u2514\u2500\u2500 cover_variant_1.jpg\n\u251c\u2500\u2500 comicinfo/                   # Thumbnails para carrusel\n\u2502   \u251c\u2500\u2500 issue_111701.jpg         # issue_id.jpg (cache)\n\u2502   \u2514\u2500\u2500 issue_114181.jpg\n\u2514\u2500\u2500 comics/                      # Thumbnails de archivos\n    \u251c\u2500\u2500 1.jpg                    # comic_id.jpg\n    \u2514\u2500\u2500 2.jpg\n</code></pre>"},{"location":"usuario/comicvine/#nuevas-funcionalidades","title":"\ud83c\udd95 Nuevas Funcionalidades","text":""},{"location":"usuario/comicvine/#multiples-portadas-por-issue","title":"M\u00faltiples Portadas por Issue","text":"<ul> <li>Portada Principal: Del campo <code>image</code> de ComicVine</li> <li>Portadas Variantes: Del campo <code>associated_images</code></li> <li>Carrusel de Portadas: Navegaci\u00f3n entre portadas en la UI</li> <li>B\u00fasqueda Robusta: Encuentra archivos con patrones alternativos</li> </ul>"},{"location":"usuario/comicvine/#navegacion-mejorada","title":"Navegaci\u00f3n Mejorada","text":"<pre><code>Volume Details \u2192 ComicbookInfo Details \u2192 Physical Comics View\n     \u2191               \u2191 (Carousel)           \u2191\n   Metadata      Multiple Covers      Archivos F\u00edsicos\n</code></pre>"},{"location":"usuario/comicvine/#generacion-de-rutas","title":"Generaci\u00f3n de Rutas","text":"<pre><code>def get_cover_destination_path(volume, issue):\n    \"\"\"Generar ruta de destino para portada de issue\"\"\"\n\n    # Limpiar nombre del volumen\n    clean_name = clean_volume_name(volume.nombre)\n\n    # Crear directorio del volumen\n    volume_dir = f\"{clean_name}_{volume.id_volume}\"\n\n    # Ruta completa\n    return os.path.join(\n        \"data/thumbnails/comicbookinfo_issues\",\n        volume_dir,\n        f\"{issue.id_comicbook_info}-{issue.numero}.jpg\"\n    )\n</code></pre>"},{"location":"usuario/comicvine/#descarga-con-reintentos","title":"Descarga con Reintentos","text":"<pre><code>def download_image_with_retry(url, destination, max_retries=3):\n    \"\"\"Descargar imagen con reintentos autom\u00e1ticos\"\"\"\n\n    for attempt in range(max_retries):\n        try:\n            response = requests.get(url, timeout=30)\n            response.raise_for_status()\n\n            # Crear directorio si no existe\n            os.makedirs(os.path.dirname(destination), exist_ok=True)\n\n            # Guardar imagen\n            with open(destination, 'wb') as f:\n                f.write(response.content)\n\n            return True\n\n        except Exception as e:\n            print(f\"Intento {attempt + 1} fallido: {e}\")\n            if attempt == max_retries - 1:\n                return False\n            time.sleep(2 ** attempt)  # Backoff exponencial\n\n    return False\n</code></pre>"},{"location":"usuario/comicvine/#busqueda-y-asociacion","title":"\ud83d\udd0d B\u00fasqueda y Asociaci\u00f3n","text":""},{"location":"usuario/comicvine/#busqueda-inteligente","title":"B\u00fasqueda Inteligente","text":""},{"location":"usuario/comicvine/#por-nombre-de-archivo","title":"Por Nombre de Archivo","text":"<pre><code>def smart_search_by_filename(filename):\n    \"\"\"B\u00fasqueda inteligente basada en nombre de archivo\"\"\"\n\n    # Extraer informaci\u00f3n del nombre\n    patterns = [\n        r\"(.+?)[-_](\\d+)\",              # Serie-Numero\n        r\"(.+?)\\s+#(\\d+)\",              # Serie #Numero\n        r\"(.+?)\\s+(\\d+)\",               # Serie Numero\n        r\"(.+?)\\.(\\d+)\",                # Serie.Numero\n    ]\n\n    for pattern in patterns:\n        match = re.match(pattern, filename)\n        if match:\n            serie, numero = match.groups()\n\n            # Buscar en ComicVine\n            results = client.search_volumes(serie)\n            return results, numero\n\n    return [], None\n</code></pre>"},{"location":"usuario/comicvine/#asociacion-automatica","title":"Asociaci\u00f3n Autom\u00e1tica","text":"<pre><code>def auto_associate_comic(comic_file):\n    \"\"\"Asociar autom\u00e1ticamente comic con ComicVine\"\"\"\n\n    # 1. Extraer informaci\u00f3n del nombre\n    volume_candidates, issue_number = smart_search_by_filename(\n        comic_file.filename\n    )\n\n    # 2. Filtrar por coincidencia\n    best_match = find_best_volume_match(volume_candidates, comic_file)\n\n    # 3. Buscar issue espec\u00edfico\n    if best_match and issue_number:\n        issues = client.get_volume_issues(best_match['id'])\n        issue_match = find_issue_by_number(issues, issue_number)\n\n        if issue_match:\n            # 4. Crear asociaci\u00f3n\n            return create_comicbook_info(issue_match, comic_file)\n\n    return None\n</code></pre>"},{"location":"usuario/comicvine/#seguimiento-de-progreso","title":"\ud83d\udcca Seguimiento de Progreso","text":""},{"location":"usuario/comicvine/#indicadores-visuales","title":"Indicadores Visuales","text":"<p>Durante la actualizaci\u00f3n:</p> <pre><code>\u250c\u2500\u2500\u2500 Actualizando desde ComicVine \u2500\u2500\u2510\n\u2502                                   \u2502\n\u2502 \ud83d\udd0d Buscando volumen...            \u2502\n\u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 100%        \u2502\n\u2502                                   \u2502\n\u2502 \ud83d\udcd6 Creando 15 issues nuevos...   \u2502\n\u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 50%         \u2502\n\u2502                                   \u2502\n\u2502 \ud83d\uddbc\ufe0f Descargando portadas...        \u2502\n\u2502 \u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 25%         \u2502\n\u2502                                   \u2502\n\u2502 [Cancelar] [Minimizar]           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"usuario/comicvine/#mensajes-de-estado","title":"Mensajes de Estado","text":"<pre><code># Ejemplos de mensajes durante actualizaci\u00f3n\nMESSAGES = {\n    'searching': \"\ud83d\udd0d Buscando en ComicVine...\",\n    'found_volume': \"\u2705 Volumen encontrado: {name}\",\n    'fetching_issues': \"\ud83d\udcd6 Obteniendo lista de issues...\",\n    'creating_issues': \"\u2795 Creando {count} issues nuevos...\",\n    'downloading_covers': \"\ud83d\uddbc\ufe0f Descargando {count} portadas...\",\n    'updating_db': \"\ud83d\udcbe Actualizando base de datos...\",\n    'complete': \"\u2705 Actualizaci\u00f3n completada\",\n    'error': \"\u274c Error: {message}\"\n}\n</code></pre>"},{"location":"usuario/comicvine/#casos-de-uso","title":"\ud83c\udfaf Casos de Uso","text":""},{"location":"usuario/comicvine/#1-volumen-nuevo","title":"1. Volumen Nuevo","text":"<pre><code># Agregar volumen manualmente desde ComicVine\nvolume_id = 12345\nvolume_data = client.get_volume_details(volume_id)\n\n# Crear volumen en BD\nnew_volume = Volume(\n    nombre=volume_data['name'],\n    anio_inicio=volume_data['start_year'],\n    cantidad_numeros=volume_data['count_of_issues'],\n    id_comicvine=volume_data['id']\n)\n\n# Crear todos los issues\nissues = client.get_volume_issues(volume_id)\nfor issue_data in issues:\n    create_issue_from_comicvine(issue_data, new_volume)\n</code></pre>"},{"location":"usuario/comicvine/#2-sincronizacion-periodica","title":"2. Sincronizaci\u00f3n Peri\u00f3dica","text":"<pre><code># Actualizar todos los vol\u00famenes con ID ComicVine\nvolumes_to_update = session.query(Volume).filter(\n    Volume.id_comicvine.isnot(None)\n).all()\n\nfor volume in volumes_to_update:\n    try:\n        update_volume_from_comicvine(volume)\n        print(f\"\u2705 {volume.nombre} actualizado\")\n    except Exception as e:\n        print(f\"\u274c Error en {volume.nombre}: {e}\")\n</code></pre>"},{"location":"usuario/comicvine/#3-catalogacion-masiva","title":"3. Catalogaci\u00f3n Masiva","text":"<pre><code># Asociar comics sin clasificar usando ComicVine\nunclassified = session.query(Comicbook).filter(\n    Comicbook.id_comicbook_info == ''\n).all()\n\nfor comic in unclassified:\n    association = auto_associate_comic(comic)\n    if association:\n        comic.id_comicbook_info = association.id_comicbook_info\n        print(f\"\u2705 {comic.filename} \u2192 {association.titulo}\")\n</code></pre>"},{"location":"usuario/comicvine/#manejo-de-errores","title":"\ud83d\udee1\ufe0f Manejo de Errores","text":""},{"location":"usuario/comicvine/#errores-comunes","title":"Errores Comunes","text":"<pre><code>class ComicVineError(Exception):\n    \"\"\"Errores espec\u00edficos de ComicVine\"\"\"\n    pass\n\nclass RateLimitError(ComicVineError):\n    \"\"\"L\u00edmite de requests excedido\"\"\"\n    pass\n\nclass APIKeyError(ComicVineError):\n    \"\"\"API key inv\u00e1lida o faltante\"\"\"\n    pass\n\nclass NetworkError(ComicVineError):\n    \"\"\"Error de conectividad\"\"\"\n    pass\n</code></pre>"},{"location":"usuario/comicvine/#estrategias-de-recuperacion","title":"Estrategias de Recuperaci\u00f3n","text":"<pre><code>def robust_api_call(func, *args, **kwargs):\n    \"\"\"Llamada robusta a la API con manejo de errores\"\"\"\n\n    max_retries = 3\n    backoff_factor = 2\n\n    for attempt in range(max_retries):\n        try:\n            return func(*args, **kwargs)\n\n        except RateLimitError:\n            # Esperar hasta el siguiente per\u00edodo\n            wait_time = 3600  # 1 hora\n            print(f\"L\u00edmite alcanzado, esperando {wait_time}s\")\n            time.sleep(wait_time)\n\n        except NetworkError:\n            # Reintento con backoff exponencial\n            wait_time = backoff_factor ** attempt\n            print(f\"Error de red, reintentando en {wait_time}s\")\n            time.sleep(wait_time)\n\n        except APIKeyError:\n            # Error no recuperable\n            print(\"API key inv\u00e1lida, verificar configuraci\u00f3n\")\n            break\n\n    raise ComicVineError(\"M\u00e1ximo de reintentos alcanzado\")\n</code></pre>"},{"location":"usuario/comicvine/#consejos-de-optimizacion","title":"\ud83d\udca1 Consejos de Optimizaci\u00f3n","text":""},{"location":"usuario/comicvine/#uso-eficiente-de-la-api","title":"Uso Eficiente de la API","text":"<ol> <li>Cache local: Almacenar respuestas para evitar requests duplicados</li> <li>Batch processing: Agrupar operaciones relacionadas</li> <li>Rate limiting: Respetar l\u00edmites de 200 req/hora</li> <li>Requests selectivos: Solo pedir datos necesarios</li> </ol>"},{"location":"usuario/comicvine/#mejores-practicas","title":"Mejores Pr\u00e1cticas","text":"<pre><code># \u2705 Bueno: Request espec\u00edfico\nresponse = client.get_volume_details(\n    volume_id,\n    fields=['name', 'start_year', 'issues']\n)\n\n# \u274c Malo: Request completo innecesario\nresponse = client.get_volume_details(volume_id)  # Todos los campos\n</code></pre> <p>\u00bfListo para dominar la b\u00fasqueda? \ud83d\udc49 Filtros y B\u00fasqueda</p>"},{"location":"usuario/filtros-busqueda/","title":"Filtros y B\u00fasqueda","text":"<p>El sistema de filtros y b\u00fasqueda de Babelcomics4 proporciona herramientas potentes para encontrar comics espec\u00edficos en tu colecci\u00f3n, utilizando m\u00faltiples criterios y combinaciones avanzadas.</p>"},{"location":"usuario/filtros-busqueda/#busqueda-basica","title":"\ud83d\udd0d B\u00fasqueda B\u00e1sica","text":""},{"location":"usuario/filtros-busqueda/#barra-de-busqueda-principal","title":"Barra de B\u00fasqueda Principal","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \ud83d\udd0d [Buscar en tu colecci\u00f3n...]            [\ud83d\udd0e] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>La b\u00fasqueda b\u00e1sica es instant\u00e1nea y busca en tiempo real mientras escribes.</p>"},{"location":"usuario/filtros-busqueda/#campos-de-busqueda","title":"Campos de B\u00fasqueda","text":""},{"location":"usuario/filtros-busqueda/#informacion-del-archivo","title":"Informaci\u00f3n del Archivo","text":"<pre><code># Nombre del archivo\nsuperman.cbz\nbatman_001\nwalking_dead\n\n# Ruta completa del archivo\n/Comics/DC/Batman/\n/home/user/Comics/Marvel/\n\n# Extensi\u00f3n de archivo\n.cbz\n.cbr\n.pdf\n</code></pre>"},{"location":"usuario/filtros-busqueda/#metadata-catalogada","title":"Metadata Catalogada","text":"<pre><code># T\u00edtulo del comic\n\"The Amazing Spider-Man\"\n\"Batman Rebirth\"\n\"Watchmen\"\n\n# Editorial\n\"DC Comics\"\n\"Marvel Comics\"\n\"Image Comics\"\n\n# Nombre del volumen\n\"Batman (2016)\"\n\"Spider-Man (2018)\"\n\"The Walking Dead (2003)\"\n\n# Descripci\u00f3n/Resumen\n\"dark knight\"\n\"web slinger\"\n\"zombie apocalypse\"\n</code></pre>"},{"location":"usuario/filtros-busqueda/#ejemplos-de-busqueda","title":"Ejemplos de B\u00fasqueda","text":""},{"location":"usuario/filtros-busqueda/#busquedas-simples","title":"B\u00fasquedas Simples","text":"<pre><code>Batman          \u2192 Todos los comics con \"Batman\"\nSpider-Man #1   \u2192 Issue #1 de cualquier Spider-Man\n2018           \u2192 Comics del a\u00f1o 2018\nDC Comics      \u2192 Todos los comics de DC\nrebirth        \u2192 Comics relacionados con \"Rebirth\"\n</code></pre>"},{"location":"usuario/filtros-busqueda/#busquedas-por-archivo","title":"B\u00fasquedas por Archivo","text":"<pre><code>.cbz           \u2192 Solo archivos CBZ\nbatman_001     \u2192 Archivo espec\u00edfico\n/DC/           \u2192 Comics en directorio DC\n45.2 MB        \u2192 Por tama\u00f1o de archivo\n</code></pre>"},{"location":"usuario/filtros-busqueda/#filtros-avanzados","title":"\ud83c\udf9b\ufe0f Filtros Avanzados","text":""},{"location":"usuario/filtros-busqueda/#panel-de-filtros","title":"Panel de Filtros","text":"<pre><code>\u250c\u2500\u2500\u2500 Filtros Avanzados \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                               \u2502\n\u2502 \ud83d\udcca Clasificaci\u00f3n:                            \u2502\n\u2502 \u25cb Todos los comics                           \u2502\n\u2502 \u25cb Solo clasificados                          \u2502\n\u2502 \u25cb Solo sin clasificar                        \u2502\n\u2502                                               \u2502\n\u2502 \u2b50 Calidad:                                  \u2502\n\u2502 M\u00ednima: [\u2b50] \u2500\u2500\u2500\u2500\u25cb\u2500\u2500\u2500\u2500 [\u2b50\u2b50\u2b50\u2b50\u2b50]         \u2502\n\u2502 M\u00e1xima: [\u2b50] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25cb [\u2b50\u2b50\u2b50\u2b50\u2b50]       \u2502\n\u2502                                               \u2502\n\u2502 \ud83c\udfe2 Editorial:                                \u2502\n\u2502 \u2611\ufe0f DC Comics         \u2611\ufe0f Marvel Comics        \u2502\n\u2502 \u2610 Image Comics      \u2610 Dark Horse            \u2502\n\u2502 \u2610 IDW Publishing    \u2610 Otras                  \u2502\n\u2502                                               \u2502\n\u2502 \ud83d\udcc5 Rango de A\u00f1os:                           \u2502\n\u2502 Desde: [2010] Hasta: [2024]                  \u2502\n\u2502                                               \u2502\n\u2502 \ud83d\udcc1 Estado de Archivo:                        \u2502\n\u2502 \u2611\ufe0f Archivos existentes                       \u2502\n\u2502 \u2610 Incluir elementos en papelera             \u2502\n\u2502 \u2610 Solo archivos corruptos                   \u2502\n\u2502                                               \u2502\n\u2502 \ud83d\udcbe Tama\u00f1o de Archivo:                        \u2502\n\u2502 M\u00edn: [10] MB  M\u00e1x: [200] MB                  \u2502\n\u2502                                               \u2502\n\u2502 [\ud83d\udd04 Aplicar] [\u274c Limpiar] [\ud83d\udcbe Guardar]      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"usuario/filtros-busqueda/#filtros-de-clasificacion","title":"Filtros de Clasificaci\u00f3n","text":""},{"location":"usuario/filtros-busqueda/#todos-los-comics","title":"Todos los Comics","text":"<ul> <li>Muestra toda la colecci\u00f3n</li> <li>Incluye clasificados y sin clasificar</li> <li>Vista completa de la biblioteca</li> </ul>"},{"location":"usuario/filtros-busqueda/#solo-clasificados","title":"Solo Clasificados","text":"<pre><code>Criterios:\n\u2705 Tienen metadata de ComicVine\n\u2705 T\u00edtulo, editorial y volumen definidos\n\u2705 Thumbnail en color\n\u2705 Informaci\u00f3n completa disponible\n\nVisualizaci\u00f3n:\n\ud83d\uddbc\ufe0f [Thumbnail Color]\n\ud83d\udcd6 Superman #1 - The Man of Steel\n\ud83d\udcc1 DC Comics | Superman (2018)\n\u2b50\u2b50\u2b50\u2b50\u2b50 | \ud83d\udcc5 2018-07-04\n</code></pre>"},{"location":"usuario/filtros-busqueda/#solo-sin-clasificar","title":"Solo Sin Clasificar","text":"<pre><code>Criterios:\n\u274c Sin metadata de ComicVine\n\u274c Solo informaci\u00f3n del archivo\n\u274c Thumbnail en escala de grises\n\u274c Pendiente de catalogaci\u00f3n\n\nVisualizaci\u00f3n:\n\ud83d\uddbc\ufe0f [Thumbnail Gris]\n\ud83d\udcc1 superman_001_unknown.cbz\n\ud83d\udcbe 45.2 MB | \ud83d\udcc5 2024-03-15\n\u2b50 Sin calificar | \ud83c\udff7\ufe0f Sin catalogar\n</code></pre>"},{"location":"usuario/filtros-busqueda/#filtros-de-calidad","title":"Filtros de Calidad","text":""},{"location":"usuario/filtros-busqueda/#sistema-de-calidad-por-estrellas","title":"Sistema de Calidad por Estrellas","text":"<pre><code>\u2b50     = 1 estrella  - Calidad muy baja\n\u2b50\u2b50   = 2 estrellas - Calidad baja\n\u2b50\u2b50\u2b50 = 3 estrellas - Calidad media\n\u2b50\u2b50\u2b50\u2b50 = 4 estrellas - Calidad buena\n\u2b50\u2b50\u2b50\u2b50\u2b50 = 5 estrellas - Calidad excelente\n</code></pre>"},{"location":"usuario/filtros-busqueda/#configuracion-de-rangos","title":"Configuraci\u00f3n de Rangos","text":"<pre><code># Ejemplo: Solo comics de alta calidad\nquality_filter = {\n    'min_quality': 4,  # \u2b50\u2b50\u2b50\u2b50\n    'max_quality': 5   # \u2b50\u2b50\u2b50\u2b50\u2b50\n}\n\n# Ejemplo: Identificar comics de baja calidad para mejora\nquality_filter = {\n    'min_quality': 1,  # \u2b50\n    'max_quality': 2   # \u2b50\u2b50\n}\n</code></pre>"},{"location":"usuario/filtros-busqueda/#filtros-por-editorial","title":"Filtros por Editorial","text":""},{"location":"usuario/filtros-busqueda/#editoriales-principales","title":"Editoriales Principales","text":"<pre><code>\ud83e\udd87 DC Comics\n\u251c\u2500\u2500 Batman, Superman, Wonder Woman\n\u251c\u2500\u2500 Justice League, Teen Titans\n\u2514\u2500\u2500 Watchmen, Sandman, Vertigo\n\n\ud83d\udd77\ufe0f Marvel Comics\n\u251c\u2500\u2500 Spider-Man, X-Men, Avengers\n\u251c\u2500\u2500 Fantastic Four, Daredevil\n\u2514\u2500\u2500 Ultimate, Marvel MAX\n\n\ud83c\udf1f Image Comics\n\u251c\u2500\u2500 The Walking Dead, Saga\n\u251c\u2500\u2500 Invincible, Spawn\n\u2514\u2500\u2500 Titles independientes\n\n\ud83d\udc34 Dark Horse Comics\n\u251c\u2500\u2500 Hellboy, Sin City\n\u251c\u2500\u2500 Star Wars (legado)\n\u2514\u2500\u2500 Comics licenciados\n\n\ud83d\udcda Otras Editoriales\n\u251c\u2500\u2500 IDW Publishing\n\u251c\u2500\u2500 Boom! Studios\n\u251c\u2500\u2500 Dynamite Entertainment\n\u2514\u2500\u2500 Editoriales independientes\n</code></pre>"},{"location":"usuario/filtros-busqueda/#seleccion-multiple","title":"Selecci\u00f3n M\u00faltiple","text":"<pre><code># Filtrar m\u00faltiples editoriales\neditorial_filter = [\n    'DC Comics',\n    'Marvel Comics',\n    'Image Comics'\n]\n\n# Excluir editoriales espec\u00edficas\nexclude_publishers = [\n    'Publisher Unknown',\n    'Sin Editorial'\n]\n</code></pre>"},{"location":"usuario/filtros-busqueda/#filtros-temporales","title":"Filtros Temporales","text":""},{"location":"usuario/filtros-busqueda/#por-ano-de-publicacion","title":"Por A\u00f1o de Publicaci\u00f3n","text":"<pre><code>\u250c\u2500\u2500\u2500 Filtro por A\u00f1o \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                               \u2502\n\u2502 \ud83d\udcc5 A\u00f1o de Tapa:                              \u2502\n\u2502 Desde: [2010] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Hasta: [2024]  \u2502\n\u2502                                               \u2502\n\u2502 \ud83c\udfaf Presets R\u00e1pidos:                          \u2502\n\u2502 [2020s] [2010s] [2000s] [1990s] [Cl\u00e1sicos]   \u2502\n\u2502                                               \u2502\n\u2502 \ud83d\udcca Distribuci\u00f3n por D\u00e9cada:                  \u2502\n\u2502 2020-2024: \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 234 comics (22.3%)      \u2502\n\u2502 2010-2019: \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 445 comics (42.4%)    \u2502\n\u2502 2000-2009: \u2588\u2588\u2588\u2588 189 comics (18.0%)          \u2502\n\u2502 1990-1999: \u2588\u2588 98 comics (9.3%)              \u2502\n\u2502 Anteriores: \u2588\u2588 84 comics (8.0%)              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"usuario/filtros-busqueda/#filtros-de-fecha-especiales","title":"Filtros de Fecha Especiales","text":"<pre><code># Comics de la Era Moderna (1985+)\nyear_range: [1985, 2024]\n\n# Comics de la Era de Plata (1956-1970)\nyear_range: [1956, 1970]\n\n# Comics de la Era de Oro (1938-1956)\nyear_range: [1938, 1956]\n\n# Solo comics actuales (\u00faltimos 2 a\u00f1os)\nyear_range: [2022, 2024]\n\n# Comics cl\u00e1sicos (antes de 2000)\nyear_range: [1938, 1999]\n</code></pre>"},{"location":"usuario/filtros-busqueda/#filtros-de-estado-de-archivo","title":"Filtros de Estado de Archivo","text":""},{"location":"usuario/filtros-busqueda/#estados-disponibles","title":"Estados Disponibles","text":"<pre><code>\u2705 Archivos Existentes\n\u251c\u2500\u2500 Archivo presente en disco\n\u251c\u2500\u2500 Accesible y legible\n\u2514\u2500\u2500 Thumbnail generado\n\n\ud83d\uddd1\ufe0f En Papelera\n\u251c\u2500\u2500 Marcado como eliminado\n\u251c\u2500\u2500 Oculto en vista normal\n\u2514\u2500\u2500 Recuperable\n\n\ud83d\udc94 Archivos Corruptos\n\u251c\u2500\u2500 No se puede abrir\n\u251c\u2500\u2500 Formato inv\u00e1lido\n\u2514\u2500\u2500 Requiere atenci\u00f3n\n\n\ud83d\udd17 Enlaces Rotos\n\u251c\u2500\u2500 Archivo movido/eliminado\n\u251c\u2500\u2500 Ruta incorrecta\n\u2514\u2500\u2500 Requiere reubicaci\u00f3n\n</code></pre>"},{"location":"usuario/filtros-busqueda/#casos-de-uso","title":"Casos de Uso","text":"<pre><code># Solo mostrar archivos v\u00e1lidos (vista normal)\nfile_status_filter = {\n    'include_existing': True,\n    'include_trash': False,\n    'include_corrupted': False\n}\n\n# Gesti\u00f3n de papelera\ntrash_management_filter = {\n    'include_existing': False,\n    'include_trash': True,\n    'include_corrupted': False\n}\n\n# Mantenimiento de colecci\u00f3n\nmaintenance_filter = {\n    'include_existing': True,\n    'include_trash': True,\n    'include_corrupted': True\n}\n</code></pre>"},{"location":"usuario/filtros-busqueda/#filtros-especializados","title":"\ud83d\udd27 Filtros Especializados","text":""},{"location":"usuario/filtros-busqueda/#filtros-de-volumen","title":"Filtros de Volumen","text":""},{"location":"usuario/filtros-busqueda/#completitud-de-coleccion","title":"Completitud de Colecci\u00f3n","text":"<pre><code>\u250c\u2500\u2500\u2500 Filtros de Volumen \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                               \u2502\n\u2502 \ud83d\udcca Completitud de Volumen:                   \u2502\n\u2502 \u25cb Vol\u00famenes completos (100%)                 \u2502\n\u2502 \u25cb Casi completos (80-99%)                    \u2502\n\u2502 \u25cb En progreso (20-79%)                       \u2502\n\u2502 \u25cb Iniciados (1-19%)                          \u2502\n\u2502 \u25cb Sin issues (0%)                            \u2502\n\u2502                                               \u2502\n\u2502 \ud83d\udcda Tipo de Volumen:                          \u2502\n\u2502 \u2611\ufe0f Series regulares                          \u2502\n\u2502 \u2611\ufe0f Mini-series                               \u2502\n\u2502 \u2610 One-shots                                  \u2502\n\u2502 \u2610 Graphic novels                             \u2502\n\u2502 \u2610 Trade paperbacks                           \u2502\n\u2502                                               \u2502\n\u2502 \ud83d\udcc5 Estado del Volumen:                       \u2502\n\u2502 \u2611\ufe0f En publicaci\u00f3n                            \u2502\n\u2502 \u2611\ufe0f Finalizados                               \u2502\n\u2502 \u2610 Cancelados                                 \u2502\n\u2502 \u2610 En pausa                                   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"usuario/filtros-busqueda/#filtros-de-tamano-de-archivo","title":"Filtros de Tama\u00f1o de Archivo","text":""},{"location":"usuario/filtros-busqueda/#rangos-de-tamano","title":"Rangos de Tama\u00f1o","text":"<pre><code># Archivos peque\u00f1os (comics web/digital)\nsize_filter = {\n    'min_size_mb': 0,\n    'max_size_mb': 30\n}\n\n# Archivos medianos (calidad est\u00e1ndar)\nsize_filter = {\n    'min_size_mb': 30,\n    'max_size_mb': 80\n}\n\n# Archivos grandes (alta calidad/resoluci\u00f3n)\nsize_filter = {\n    'min_size_mb': 80,\n    'max_size_mb': 200\n}\n\n# Archivos muy grandes (ultra-alta calidad)\nsize_filter = {\n    'min_size_mb': 200,\n    'max_size_mb': 1000\n}\n</code></pre>"},{"location":"usuario/filtros-busqueda/#analisis-de-tamano","title":"An\u00e1lisis de Tama\u00f1o","text":"<pre><code>\u250c\u2500\u2500\u2500 Distribuci\u00f3n por Tama\u00f1o \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                               \u2502\n\u2502 \ud83d\udcca An\u00e1lisis de Tama\u00f1os de Archivo:           \u2502\n\u2502                                               \u2502\n\u2502 0-30 MB:   \u2588\u2588\u2588\u2588 234 archivos (22.3%)         \u2502\n\u2502 30-50 MB:  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 445 archivos (42.4%)     \u2502\n\u2502 50-80 MB:  \u2588\u2588\u2588\u2588 189 archivos (18.0%)         \u2502\n\u2502 80-150 MB: \u2588\u2588 98 archivos (9.3%)             \u2502\n\u2502 150+ MB:   \u2588\u2588 84 archivos (8.0%)             \u2502\n\u2502                                               \u2502\n\u2502 \ud83d\udcc8 Tama\u00f1o Promedio: 52.4 MB                  \u2502\n\u2502 \ud83d\udcca Tama\u00f1o Total: 54.8 GB                     \u2502\n\u2502 \ud83c\udfaf Calidad vs Tama\u00f1o: Correlaci\u00f3n 0.78       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"usuario/filtros-busqueda/#busqueda-avanzada","title":"\ud83d\udd0d B\u00fasqueda Avanzada","text":""},{"location":"usuario/filtros-busqueda/#operadores-de-busqueda","title":"Operadores de B\u00fasqueda","text":""},{"location":"usuario/filtros-busqueda/#operadores-basicos","title":"Operadores B\u00e1sicos","text":"<pre><code># B\u00fasqueda exacta\n\"Batman Rebirth\"     \u2192 Frase exacta\nbatman AND rebirth   \u2192 Ambos t\u00e9rminos presentes\nbatman OR superman   \u2192 Cualquiera de los t\u00e9rminos\nbatman NOT year:2016 \u2192 Batman excluyendo 2016\n</code></pre>"},{"location":"usuario/filtros-busqueda/#operadores-de-campo","title":"Operadores de Campo","text":"<pre><code># B\u00fasqueda por campo espec\u00edfico\ntitle:\"The Amazing Spider-Man\"\npublisher:\"DC Comics\"\nyear:2018\nquality:5\nvolume:\"Batman (2016)\"\nissue:1\nfile:batman_001.cbz\n</code></pre>"},{"location":"usuario/filtros-busqueda/#operadores-de-rango","title":"Operadores de Rango","text":"<pre><code># Rangos num\u00e9ricos\nyear:2010..2020      \u2192 A\u00f1os entre 2010 y 2020\nquality:4..5         \u2192 Calidad 4 o 5 estrellas\nsize:50..100         \u2192 Tama\u00f1o entre 50-100 MB\nissue:1..12          \u2192 Issues del 1 al 12\n</code></pre>"},{"location":"usuario/filtros-busqueda/#comodines","title":"Comodines","text":"<pre><code># Wildcards\nbatman*              \u2192 Comienza con \"batman\"\n*man                 \u2192 Termina con \"man\"\n*spider*             \u2192 Contiene \"spider\"\nbat?man              \u2192 ? representa un car\u00e1cter\n</code></pre>"},{"location":"usuario/filtros-busqueda/#busquedas-predefinidas","title":"B\u00fasquedas Predefinidas","text":""},{"location":"usuario/filtros-busqueda/#consultas-rapidas","title":"Consultas R\u00e1pidas","text":"<pre><code>\u250c\u2500\u2500\u2500 B\u00fasquedas Predefinidas \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                               \u2502\n\u2502 \ud83d\udd0d Consultas Populares:                      \u2502\n\u2502 [\ud83c\udd95 Agregados Recientemente]                  \u2502\n\u2502 [\u2b50 Alta Calidad (4-5 \u2b50)]                   \u2502\n\u2502 [\u274c Sin Catalogar]                           \u2502\n\u2502 [\ud83d\udd0d Issues Faltantes]                        \u2502\n\u2502 [\ud83d\uddd1\ufe0f En Papelera]                            \u2502\n\u2502                                               \u2502\n\u2502 \ud83d\udcda Por Editorial:                            \u2502\n\u2502 [\ud83e\udd87 DC Comics]     [\ud83d\udd77\ufe0f Marvel Comics]        \u2502\n\u2502 [\ud83c\udf1f Image Comics]  [\ud83d\udc34 Dark Horse]           \u2502\n\u2502                                               \u2502\n\u2502 \ud83d\udcc5 Por \u00c9poca:                                \u2502\n\u2502 [\ud83d\udcf1 Modernos (2010+)] [\ud83c\udfdb\ufe0f Cl\u00e1sicos (Pre-2000)] \u2502\n\u2502 [\ud83d\udd25 Era Actual (2020+)] [\ud83d\udc8e Era de Oro]      \u2502\n\u2502                                               \u2502\n\u2502 \ud83c\udfaf Mantenimiento:                            \u2502\n\u2502 [\ud83d\udc94 Archivos Corruptos] [\ud83d\udd17 Enlaces Rotos]   \u2502\n\u2502 [\ud83d\udcca Duplicados] [\ud83d\udccf Archivos Grandes]        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"usuario/filtros-busqueda/#busqueda-inteligente","title":"B\u00fasqueda Inteligente","text":""},{"location":"usuario/filtros-busqueda/#sugerencias-automaticas","title":"Sugerencias Autom\u00e1ticas","text":"<pre><code>class SearchSuggestionEngine:\n    \"\"\"Motor de sugerencias de b\u00fasqueda\"\"\"\n\n    def get_suggestions(self, query):\n        \"\"\"Obtener sugerencias basadas en consulta parcial\"\"\"\n\n        suggestions = []\n\n        # 1. Sugerencias de t\u00edtulos\n        title_matches = self.search_titles(query)\n        suggestions.extend(title_matches[:5])\n\n        # 2. Sugerencias de editoriales\n        publisher_matches = self.search_publishers(query)\n        suggestions.extend(publisher_matches[:3])\n\n        # 3. Sugerencias de vol\u00famenes\n        volume_matches = self.search_volumes(query)\n        suggestions.extend(volume_matches[:5])\n\n        # 4. Sugerencias de archivos\n        file_matches = self.search_filenames(query)\n        suggestions.extend(file_matches[:3])\n\n        return suggestions[:10]  # Top 10 sugerencias\n</code></pre>"},{"location":"usuario/filtros-busqueda/#correccion-automatica","title":"Correcci\u00f3n Autom\u00e1tica","text":"<pre><code>def correct_search_query(query):\n    \"\"\"Corregir errores tipogr\u00e1ficos en b\u00fasquedas\"\"\"\n\n    corrections = {\n        'batman': ['batmam', 'barman', 'batsman'],\n        'spider-man': ['spiderman', 'spider man', 'spidre-man'],\n        'superman': ['supermam', 'super man', 'supreman'],\n        'dc comics': ['dc comic', 'dc', 'detective comics'],\n        'marvel': ['marel', 'marevl', 'marvel comics']\n    }\n\n    # Usar algoritmo de distancia Levenshtein\n    for correct, variants in corrections.items():\n        for variant in variants:\n            if calculate_similarity(query.lower(), variant) &gt; 0.8:\n                return correct\n\n    return query\n</code></pre>"},{"location":"usuario/filtros-busqueda/#resultados-de-busqueda","title":"\ud83d\udcca Resultados de B\u00fasqueda","text":""},{"location":"usuario/filtros-busqueda/#presentacion-de-resultados","title":"Presentaci\u00f3n de Resultados","text":""},{"location":"usuario/filtros-busqueda/#vista-de-grilla","title":"Vista de Grilla","text":"<pre><code>\u250c\u2500\u2500\u2500 Resultados: \"batman 2016\" (45 encontrados) \u2500\u2500\u2510\n\u2502                                                  \u2502\n\u2502 \ud83d\uddbc\ufe0f[Img] \ud83d\uddbc\ufe0f[Img] \ud83d\uddbc\ufe0f[Img] \ud83d\uddbc\ufe0f[Img] \ud83d\uddbc\ufe0f[Img]        \u2502\n\u2502 Batman#1  Batman#2  Batman#3  Batman#4  Batman#5  \u2502\n\u2502 \u2b50\u2b50\u2b50\u2b50\u2b50 \u2b50\u2b50\u2b50\u2b50   \u2b50\u2b50\u2b50    \u2b50\u2b50\u2b50\u2b50   \u2b50\u2b50\u2b50\u2b50\u2b50\u2502\n\u2502 45.2MB    42.8MB    Sin Cat.  41.5MB    43.1MB   \u2502\n\u2502                                                  \u2502\n\u2502 \ud83d\uddbc\ufe0f[Img] \ud83d\uddbc\ufe0f[Img] \ud83d\uddbc\ufe0f[Img] \ud83d\uddbc\ufe0f[Img] \ud83d\uddbc\ufe0f[Img]        \u2502\n\u2502 Batman#6  Batman#7  Batman#8  Batman#9  Batman#10 \u2502\n\u2502 \u2b50\u2b50\u2b50\u2b50   \u2b50\u2b50\u2b50\u2b50\u2b50  \u2b50\u2b50\u2b50\u2b50   \u2b50\u2b50\u2b50\u2b50   \u2b50\u2b50\u2b50\u2b50\u2b50\u2502\n\u2502 44.7MB    46.3MB    43.9MB    42.1MB    45.8MB   \u2502\n\u2502                                                  \u2502\n\u2502 \u25c0\ufe0f Anterior  [1] 2 3 4 5  Siguiente \u25b6\ufe0f          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"usuario/filtros-busqueda/#vista-de-lista","title":"Vista de Lista","text":"<pre><code>\u250c\u2500\u2500\u2500 Resultados: \"batman 2016\" (45 encontrados) \u2500\u2500\u2510\n\u2502                                                  \u2502\n\u2502 \u2705 Batman #1 - I Am Gotham                      \u2502\n\u2502    \ud83d\udcc1 batman_001_2016.cbz | \u2b50\u2b50\u2b50\u2b50\u2b50 | 45.2MB    \u2502\n\u2502    \ud83d\udcc5 2016-06-15 | \ud83c\udff7\ufe0f DC Comics                 \u2502\n\u2502                                                  \u2502\n\u2502 \u2705 Batman #2 - I Am Gotham                      \u2502\n\u2502    \ud83d\udcc1 batman_002_2016.cbz | \u2b50\u2b50\u2b50\u2b50 | 42.8MB      \u2502\n\u2502    \ud83d\udcc5 2016-07-06 | \ud83c\udff7\ufe0f DC Comics                 \u2502\n\u2502                                                  \u2502\n\u2502 \u274c Batman #3 - I Am Gotham                      \u2502\n\u2502    \ud83d\udcc1 batman_003_2016.cbz | Sin catalogar        \u2502\n\u2502    \ud83d\udcc5 2016-07-20 | \ud83c\udff7\ufe0f Sin editorial             \u2502\n\u2502                                                  \u2502\n\u2502 \u2705 Batman #4 - I Am Gotham                      \u2502\n\u2502    \ud83d\udcc1 batman_004_2016.cbz | \u2b50\u2b50\u2b50\u2b50 | 41.5MB      \u2502\n\u2502    \ud83d\udcc5 2016-08-03 | \ud83c\udff7\ufe0f DC Comics                 \u2502\n\u2502                                                  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"usuario/filtros-busqueda/#ordenamiento-de-resultados","title":"Ordenamiento de Resultados","text":""},{"location":"usuario/filtros-busqueda/#opciones-de-ordenamiento","title":"Opciones de Ordenamiento","text":"<pre><code>Ordenar por:\n\u25cb Relevancia (defecto)    \u25cb Fecha de agregado\n\u25cb T\u00edtulo A-Z              \u25cb T\u00edtulo Z-A\n\u25cb Calidad (mayor)         \u25cb Calidad (menor)\n\u25cb Tama\u00f1o (mayor)          \u25cb Tama\u00f1o (menor)\n\u25cb Fecha de tapa (nuevo)   \u25cb Fecha de tapa (antiguo)\n\u25cb Editorial               \u25cb N\u00famero de issue\n</code></pre>"},{"location":"usuario/filtros-busqueda/#algoritmo-de-relevancia","title":"Algoritmo de Relevancia","text":"<pre><code>def calculate_search_relevance(comic, query):\n    \"\"\"Calcular relevancia de resultado de b\u00fasqueda\"\"\"\n\n    relevance_score = 0.0\n\n    # 1. Coincidencia exacta en t\u00edtulo (peso: 40%)\n    if query.lower() in comic.title.lower():\n        relevance_score += 0.4\n\n    # 2. Coincidencia en nombre de archivo (peso: 20%)\n    if query.lower() in comic.filename.lower():\n        relevance_score += 0.2\n\n    # 3. Coincidencia en editorial (peso: 15%)\n    if query.lower() in comic.publisher.lower():\n        relevance_score += 0.15\n\n    # 4. Coincidencia en volumen (peso: 15%)\n    if query.lower() in comic.volume_name.lower():\n        relevance_score += 0.15\n\n    # 5. Coincidencia en descripci\u00f3n (peso: 10%)\n    if query.lower() in comic.description.lower():\n        relevance_score += 0.1\n\n    # Bonus por calidad alta\n    if comic.quality &gt;= 4:\n        relevance_score *= 1.1\n\n    # Penalty por comics sin catalogar\n    if not comic.is_cataloged:\n        relevance_score *= 0.8\n\n    return min(relevance_score, 1.0)\n</code></pre>"},{"location":"usuario/filtros-busqueda/#gestion-de-filtros","title":"\ud83d\udcbe Gesti\u00f3n de Filtros","text":""},{"location":"usuario/filtros-busqueda/#filtros-guardados","title":"Filtros Guardados","text":""},{"location":"usuario/filtros-busqueda/#crear-filtro-personalizado","title":"Crear Filtro Personalizado","text":"<pre><code>\u250c\u2500\u2500\u2500 Crear Filtro Personalizado \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                                  \u2502\n\u2502 \ud83d\udcdd Nombre: [Comics Alta Calidad DC         ]    \u2502\n\u2502                                                  \u2502\n\u2502 \ud83d\udd27 Configuraci\u00f3n:                               \u2502\n\u2502 \u251c\u2500\u2500 Editorial: DC Comics                        \u2502\n\u2502 \u251c\u2500\u2500 Calidad: 4-5 \u2b50                             \u2502\n\u2502 \u251c\u2500\u2500 A\u00f1o: 2010-2024                              \u2502\n\u2502 \u251c\u2500\u2500 Estado: Solo clasificados                   \u2502\n\u2502 \u2514\u2500\u2500 Tama\u00f1o: 40-150 MB                           \u2502\n\u2502                                                  \u2502\n\u2502 \ud83c\udfaf Vista Previa: 234 comics encontrados         \u2502\n\u2502                                                  \u2502\n\u2502 [\ud83d\udcbe Guardar Filtro] [\u274c Cancelar]               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"usuario/filtros-busqueda/#biblioteca-de-filtros","title":"Biblioteca de Filtros","text":"<pre><code>\u250c\u2500\u2500\u2500 Filtros Guardados \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                                   \u2502\n\u2502 \ud83d\udcda Mis Filtros:                                  \u2502\n\u2502                                                   \u2502\n\u2502 \u2b50 Comics Alta Calidad DC                        \u2502\n\u2502 \u251c\u2500\u2500 DC Comics, 4-5\u2b50, 2010-2024                  \u2502\n\u2502 \u251c\u2500\u2500 234 resultados                               \u2502\n\u2502 \u2514\u2500\u2500 [\u25b6\ufe0f Aplicar] [\u270f\ufe0f Editar] [\ud83d\uddd1\ufe0f Eliminar]        \u2502\n\u2502                                                   \u2502\n\u2502 \ud83d\udd77\ufe0f Marvel Modernos Completos                     \u2502\n\u2502 \u251c\u2500\u2500 Marvel, 2015+, Solo completos               \u2502\n\u2502 \u251c\u2500\u2500 89 resultados                                \u2502\n\u2502 \u2514\u2500\u2500 [\u25b6\ufe0f Aplicar] [\u270f\ufe0f Editar] [\ud83d\uddd1\ufe0f Eliminar]        \u2502\n\u2502                                                   \u2502\n\u2502 \ud83d\udd27 Comics Para Mantenimiento                     \u2502\n\u2502 \u251c\u2500\u2500 Sin catalogar, baja calidad                 \u2502\n\u2502 \u251c\u2500\u2500 167 resultados                               \u2502\n\u2502 \u2514\u2500\u2500 [\u25b6\ufe0f Aplicar] [\u270f\ufe0f Editar] [\ud83d\uddd1\ufe0f Eliminar]        \u2502\n\u2502                                                   \u2502\n\u2502 [\u2795 Crear Nuevo Filtro]                          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"usuario/filtros-busqueda/#filtros-inteligentes","title":"Filtros Inteligentes","text":""},{"location":"usuario/filtros-busqueda/#auto-filtros-por-comportamiento","title":"Auto-Filtros por Comportamiento","text":"<pre><code>class SmartFilterEngine:\n    \"\"\"Motor de filtros inteligentes\"\"\"\n\n    def suggest_filters_based_on_usage(self, user_behavior):\n        \"\"\"Sugerir filtros basados en uso\"\"\"\n\n        suggestions = []\n\n        # Analizar patrones de b\u00fasqueda\n        if user_behavior.searches_dc_frequently():\n            suggestions.append({\n                'name': 'Comics DC Frecuentes',\n                'filters': {'publisher': 'DC Comics'},\n                'reason': 'Buscas DC Comics frecuentemente'\n            })\n\n        # Analizar calidad preferida\n        avg_quality = user_behavior.get_average_opened_quality()\n        if avg_quality &gt;= 4:\n            suggestions.append({\n                'name': 'Solo Alta Calidad',\n                'filters': {'quality_min': 4},\n                'reason': 'Prefieres comics de alta calidad'\n            })\n\n        # Analizar per\u00edodo temporal preferido\n        preferred_years = user_behavior.get_preferred_year_range()\n        if preferred_years:\n            suggestions.append({\n                'name': f'Comics {preferred_years[0]}-{preferred_years[1]}',\n                'filters': {'year_range': preferred_years},\n                'reason': f'Lees principalmente comics de {preferred_years[0]}-{preferred_years[1]}'\n            })\n\n        return suggestions\n</code></pre>"},{"location":"usuario/filtros-busqueda/#filtros-contextuales","title":"Filtros Contextuales","text":"<pre><code>\u250c\u2500\u2500\u2500 Filtros Sugeridos \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                                   \u2502\n\u2502 \ud83e\udd16 Basado en tu actividad reciente:              \u2502\n\u2502                                                   \u2502\n\u2502 \ud83d\udca1 \"Solo Comics Modernos\"                        \u2502\n\u2502 \u251c\u2500\u2500 Lees principalmente comics 2015+             \u2502\n\u2502 \u251c\u2500\u2500 89% de tus lecturas son de esta era         \u2502\n\u2502 \u2514\u2500\u2500 [\u2705 Crear Filtro] [\u274c Ignorar]                \u2502\n\u2502                                                   \u2502\n\u2502 \ud83d\udca1 \"Marvel de Alta Calidad\"                      \u2502\n\u2502 \u251c\u2500\u2500 Prefieres Marvel con 4-5 \u2b50                  \u2502\n\u2502 \u251c\u2500\u2500 78% de tus favoritos son Marvel HQ          \u2502\n\u2502 \u2514\u2500\u2500 [\u2705 Crear Filtro] [\u274c Ignorar]                \u2502\n\u2502                                                   \u2502\n\u2502 \ud83d\udca1 \"Series Incompletas\"                          \u2502\n\u2502 \u251c\u2500\u2500 Tienes 12 vol\u00famenes &lt;50% completos          \u2502\n\u2502 \u251c\u2500\u2500 Te ayudar\u00e1 a priorizar adquisiciones        \u2502\n\u2502 \u2514\u2500\u2500 [\u2705 Crear Filtro] [\u274c Ignorar]                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"usuario/filtros-busqueda/#analisis-de-busquedas","title":"\ud83d\udcca An\u00e1lisis de B\u00fasquedas","text":""},{"location":"usuario/filtros-busqueda/#estadisticas-de-uso","title":"Estad\u00edsticas de Uso","text":"<pre><code>\u250c\u2500\u2500\u2500 Estad\u00edsticas de B\u00fasqueda \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                                   \u2502\n\u2502 \ud83d\udcca \u00daltimos 30 d\u00edas:                              \u2502\n\u2502                                                   \u2502\n\u2502 \ud83d\udd0d Total b\u00fasquedas: 234                          \u2502\n\u2502 \ud83d\udcc8 Promedio diario: 7.8                          \u2502\n\u2502 \u23f1\ufe0f Tiempo promedio: 2.3 seg                      \u2502\n\u2502 \ud83c\udfaf Tasa de \u00e9xito: 87.2%                          \u2502\n\u2502                                                   \u2502\n\u2502 \ud83d\udd1d T\u00e9rminos m\u00e1s buscados:                        \u2502\n\u2502 1. batman (47 b\u00fasquedas)                         \u2502\n\u2502 2. spider-man (32 b\u00fasquedas)                     \u2502\n\u2502 3. dc comics (28 b\u00fasquedas)                      \u2502\n\u2502 4. 2023 (21 b\u00fasquedas)                           \u2502\n\u2502 5. high quality (18 b\u00fasquedas)                   \u2502\n\u2502                                                   \u2502\n\u2502 \ud83c\udf9b\ufe0f Filtros m\u00e1s usados:                           \u2502\n\u2502 1. Solo clasificados (89%)                       \u2502\n\u2502 2. Calidad 4-5\u2b50 (67%)                           \u2502\n\u2502 3. DC + Marvel (54%)                             \u2502\n\u2502 4. \u00daltimos 5 a\u00f1os (43%)                          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"usuario/filtros-busqueda/#optimizacion-de-rendimiento","title":"Optimizaci\u00f3n de Rendimiento","text":"<pre><code>def optimize_search_performance():\n    \"\"\"Optimizar rendimiento del sistema de b\u00fasqueda\"\"\"\n\n    # 1. \u00cdndices de base de datos\n    database_indexes = [\n        \"CREATE INDEX idx_comics_title ON comicbooks(title)\",\n        \"CREATE INDEX idx_comics_filename ON comicbooks(filename)\",\n        \"CREATE INDEX idx_comics_publisher ON comicbooks(publisher)\",\n        \"CREATE INDEX idx_comics_quality ON comicbooks(quality)\",\n        \"CREATE INDEX idx_comics_year ON comicbooks(cover_date)\",\n        \"CREATE INDEX idx_comics_classification ON comicbooks(is_cataloged)\",\n        \"CREATE INDEX idx_comics_size ON comicbooks(file_size)\"\n    ]\n\n    # 2. Cache de b\u00fasquedas frecuentes\n    search_cache = {\n        'cache_size': 1000,\n        'ttl_seconds': 3600,  # 1 hora\n        'invalidate_on_change': True\n    }\n\n    # 3. B\u00fasqueda as\u00edncrona para grandes colecciones\n    async_search_config = {\n        'min_collection_size': 5000,\n        'batch_size': 500,\n        'max_concurrent_batches': 4\n    }\n</code></pre> <p>\u00bfQuieres saber m\u00e1s sobre el sistema de thumbnails? \ud83d\udc49 Thumbnails</p>"},{"location":"usuario/gestion-comics/","title":"Gesti\u00f3n de Comics","text":"<p>Esta gu\u00eda detalla c\u00f3mo importar, organizar y gestionar tu colecci\u00f3n de comics digitales en Babelcomics4.</p>"},{"location":"usuario/gestion-comics/#importacion-de-comics","title":"\ud83d\udce5 Importaci\u00f3n de Comics","text":""},{"location":"usuario/gestion-comics/#formatos-soportados","title":"Formatos Soportados","text":"<p>Babelcomics4 es compatible con los siguientes formatos:</p> <ul> <li>\ud83d\udcd7 CBZ: Comic Book ZIP (recomendado)</li> <li>\ud83d\udcd8 CBR: Comic Book RAR</li> <li>\ud83d\udcd9 PDF: Documentos PDF con comics</li> <li>\ud83d\uddbc\ufe0f Im\u00e1genes: JPG, PNG, WEBP (carpetas)</li> </ul>"},{"location":"usuario/gestion-comics/#metodos-de-importacion","title":"M\u00e9todos de Importaci\u00f3n","text":""},{"location":"usuario/gestion-comics/#1-importacion-automatica-por-escaneo","title":"1. Importaci\u00f3n Autom\u00e1tica por Escaneo","text":"<pre><code># Al iniciar la aplicaci\u00f3n\n# Babelcomics4 escanea autom\u00e1ticamente:\n./Comics/              # Directorio por defecto\n$COMICS_PATH/         # Variable de entorno\n~/Comics/             # Directorio home del usuario\n</code></pre>"},{"location":"usuario/gestion-comics/#2-importacion-manual","title":"2. Importaci\u00f3n Manual","text":"<ol> <li>Men\u00fa Archivo \u2192 Importar Comics</li> <li>Seleccionar directorio con tu colecci\u00f3n</li> <li>Confirmar escaneo recursivo</li> <li>Esperar procesamiento autom\u00e1tico</li> </ol>"},{"location":"usuario/gestion-comics/#3-arrastrar-y-soltar-futuro","title":"3. Arrastrar y Soltar (Futuro)","text":"<ul> <li>Arrastrar archivos desde el explorador</li> <li>Soltar en la ventana de Babelcomics4</li> <li>Procesamiento autom\u00e1tico</li> </ul>"},{"location":"usuario/gestion-comics/#proceso-de-importacion","title":"Proceso de Importaci\u00f3n","text":"<pre><code>graph TB\n    A[Escanear Directorios] --&gt; B[Detectar Archivos]\n    B --&gt; C[Validar Formato]\n    C --&gt; D[Extraer Metadata B\u00e1sica]\n    D --&gt; E[Generar Thumbnail]\n    E --&gt; F[Guardar en BD]\n    F --&gt; G[Mostrar en UI]\n</code></pre>"},{"location":"usuario/gestion-comics/#pasos-detallados","title":"Pasos Detallados","text":"<ol> <li>\ud83d\udd0d Escaneo: B\u00fasqueda recursiva de archivos</li> <li>\u2705 Validaci\u00f3n: Verificaci\u00f3n de formatos soportados</li> <li>\ud83d\udccb Metadata: Extracci\u00f3n de informaci\u00f3n b\u00e1sica:</li> <li>Nombre del archivo</li> <li>Ruta completa</li> <li>Tama\u00f1o del archivo</li> <li>Fecha de modificaci\u00f3n</li> <li>\ud83d\uddbc\ufe0f Thumbnail: Generaci\u00f3n de miniatura:</li> <li>Primera p\u00e1gina del comic</li> <li>Redimensionado autom\u00e1tico</li> <li>Cache para rendimiento</li> <li>\ud83d\udcbe Base de Datos: Almacenamiento en SQLite:</li> <li>Informaci\u00f3n del archivo</li> <li>Estado de clasificaci\u00f3n</li> <li>Metadatos b\u00e1sicos</li> </ol>"},{"location":"usuario/gestion-comics/#organizacion-de-comics","title":"\ud83d\udcda Organizaci\u00f3n de Comics","text":""},{"location":"usuario/gestion-comics/#estados-de-clasificacion","title":"Estados de Clasificaci\u00f3n","text":""},{"location":"usuario/gestion-comics/#comics-clasificados","title":"\ud83c\udf08 Comics Clasificados","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   \ud83d\uddbc\ufe0f Thumbnail  \u2502\n\u2502     (Color)     \u2502\n\u2502                 \u2502\n\u2502 \u2705 Superman #1  \u2502\n\u2502 \ud83d\udcc1 superman.cbz \u2502\n\u2502 \u2b50\u2b50\u2b50\u2b50\u2b50     \u2502\n\u2502 \ud83d\udcd6 DC Comics    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Caracter\u00edsticas: - Thumbnail en color - Metadata completa de ComicVine - Informaci\u00f3n de volumen y n\u00famero - Editorial y fecha de publicaci\u00f3n - Puntuaci\u00f3n de calidad</p>"},{"location":"usuario/gestion-comics/#comics-sin-clasificar","title":"\u26ab Comics Sin Clasificar","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   \ud83d\uddbc\ufe0f Thumbnail  \u2502\n\u2502  (Escala Grises)\u2502\n\u2502                 \u2502\n\u2502 \u274c comic001.cbz \u2502\n\u2502 \ud83d\udcc1 comic001.cbz \u2502\n\u2502 \u2b50 Sin calificar \u2502\n\u2502 \ud83d\udcd6 Sin catalogar\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Caracter\u00edsticas: - Thumbnail en escala de grises - Solo informaci\u00f3n del archivo - Pendiente de catalogaci\u00f3n - Sin metadata de ComicVine</p>"},{"location":"usuario/gestion-comics/#sistema-de-calidad","title":"Sistema de Calidad","text":""},{"location":"usuario/gestion-comics/#puntuacion-por-estrellas","title":"Puntuaci\u00f3n por Estrellas","text":"<pre><code>\u2b50     = 1 - Calidad muy baja\n\u2b50\u2b50   = 2 - Calidad baja\n\u2b50\u2b50\u2b50 = 3 - Calidad media\n\u2b50\u2b50\u2b50\u2b50 = 4 - Calidad buena\n\u2b50\u2b50\u2b50\u2b50\u2b50 = 5 - Calidad excelente\n</code></pre>"},{"location":"usuario/gestion-comics/#criterios-de-calidad","title":"Criterios de Calidad","text":"<ul> <li>Resoluci\u00f3n: Calidad de las im\u00e1genes</li> <li>Completitud: P\u00e1ginas faltantes</li> <li>Compresi\u00f3n: Nivel de compresi\u00f3n</li> <li>Origen: Fuente del escaneo</li> <li>Procesamiento: Limpieza y retoque</li> </ul>"},{"location":"usuario/gestion-comics/#herramientas-de-gestion","title":"\ud83d\udd27 Herramientas de Gesti\u00f3n","text":""},{"location":"usuario/gestion-comics/#edicion-individual","title":"Edici\u00f3n Individual","text":""},{"location":"usuario/gestion-comics/#informacion-basica","title":"Informaci\u00f3n B\u00e1sica","text":"<pre><code>\u250c\u2500\u2500\u2500 Informaci\u00f3n del Comic \u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 T\u00edtulo: [Superman #1        ] \u2502\n\u2502 Archivo: [superman_001.cbz  ] \u2502\n\u2502 Ruta: [/Comics/DC/superman/ ] \u2502\n\u2502 Tama\u00f1o: [45.2 MB           ] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u250c\u2500\u2500\u2500 Clasificaci\u00f3n \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Calidad: \u2b50\u2b50\u2b50\u2b50\u2b50         \u2502\n\u2502 Estado: \u2611\ufe0f Clasificado        \u2502\n\u2502 Papelera: \u2610 Eliminado        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"usuario/gestion-comics/#metadata-comicvine","title":"Metadata ComicVine","text":"<pre><code>\u250c\u2500\u2500\u2500 Informaci\u00f3n ComicVine \u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 ID Issue: [38686            ] \u2502\n\u2502 Volumen: [Superman (2018)   ] \u2502\n\u2502 N\u00famero: [1                  ] \u2502\n\u2502 Fecha: [2018-07-04         ] \u2502\n\u2502 Editorial: [DC Comics       ] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"usuario/gestion-comics/#acciones-en-lote-mejoradas","title":"\ud83c\udd95 Acciones en Lote Mejoradas","text":""},{"location":"usuario/gestion-comics/#multiseleccion-avanzada","title":"Multiselecci\u00f3n Avanzada","text":"<ol> <li>Activar modo selecci\u00f3n: Click en \ud83d\udcca</li> <li>Seleccionar comics individuales: Click en las cards deseadas</li> <li>Seleccionar todos los comics: Ctrl+A (NUEVO)</li> <li>Ejecutar acci\u00f3n: Desde men\u00fa contextual unificado</li> </ol>"},{"location":"usuario/gestion-comics/#metodos-de-seleccion","title":"M\u00e9todos de Selecci\u00f3n","text":"<pre><code>\u250c\u2500\u2500\u2500 M\u00e9todos de Selecci\u00f3n \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \ud83d\uddb1\ufe0f Click Individual: Selecci\u00f3n manual \u2502\n\u2502 \ud83d\udd17 Ctrl+Click: Agregar a selecci\u00f3n   \u2502\n\u2502 \ud83c\udf10 Ctrl+A: Seleccionar TODOS         \u2502\n\u2502 \u2b1c Shift+Click: Rango de selecci\u00f3n    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"usuario/gestion-comics/#context-menu-unificado","title":"Context Menu Unificado","text":"<pre><code>\u250c\u2500\u2500\u2500 Men\u00fa Contextual (1 o N items) \u2500\u2500\u2500\u2500\u2510\n\u2502 \ud83d\uddd1\ufe0f Enviar a Papelera                 \u2502\n\u2502 \ud83d\udccb Catalogar Comics                   \u2502\n\u2502 \u2b50 Cambiar Calidad                    \u2502\n\u2502 \ud83d\udcdd Editar Informaci\u00f3n                 \u2502\n\u2502 \ud83d\udd04 Actualizar ComicVine               \u2502\n\u2502 \ud83d\udcc1 Mover Archivos                     \u2502\n\u2502 \ud83c\udff7\ufe0f Aplicar Etiquetas                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"usuario/gestion-comics/#operaciones-bulk-optimizadas","title":"Operaciones Bulk Optimizadas","text":"<ul> <li>Procesamiento Unificado: Una sola funci\u00f3n maneja 1 o N elementos</li> <li>Transacciones Eficientes: Batch processing en base de datos</li> <li>Feedback Visual: Progreso en tiempo real para operaciones largas</li> </ul>"},{"location":"usuario/gestion-comics/#gestion-de-papelera","title":"Gesti\u00f3n de Papelera","text":""},{"location":"usuario/gestion-comics/#mover-a-papelera","title":"Mover a Papelera","text":"<pre><code># Los comics no se eliminan f\u00edsicamente\n# Solo se marcan como \"en_papelera = True\"\n# Permanecen en el disco pero ocultos en la UI\n</code></pre>"},{"location":"usuario/gestion-comics/#recuperar-de-papelera","title":"Recuperar de Papelera","text":"<ol> <li>Activar filtros avanzados</li> <li>Incluir elementos en papelera \u2611\ufe0f</li> <li>Seleccionar comics a recuperar</li> <li>Restaurar desde men\u00fa contextual</li> </ol>"},{"location":"usuario/gestion-comics/#sistema-de-thumbnails","title":"\ud83d\uddbc\ufe0f Sistema de Thumbnails","text":""},{"location":"usuario/gestion-comics/#generacion-automatica","title":"Generaci\u00f3n Autom\u00e1tica","text":""},{"location":"usuario/gestion-comics/#proceso-de-generacion","title":"Proceso de Generaci\u00f3n","text":"<pre><code>graph LR\n    A[Archivo Comic] --&gt; B[Extraer Primera P\u00e1gina]\n    B --&gt; C[Redimensionar]\n    C --&gt; D[Aplicar Efectos]\n    D --&gt; E[Guardar Cache]\n</code></pre>"},{"location":"usuario/gestion-comics/#parametros","title":"Par\u00e1metros","text":"<ul> <li>Tama\u00f1o: 200x300 px (proporci\u00f3n preservada)</li> <li>Formato: JPEG con compresi\u00f3n optimizada</li> <li>Cache: Almacenado en <code>data/thumbnails/comics/</code></li> </ul>"},{"location":"usuario/gestion-comics/#efectos-visuales","title":"Efectos Visuales","text":""},{"location":"usuario/gestion-comics/#escala-de-grises-automatica","title":"Escala de Grises Autom\u00e1tica","text":"<pre><code># Comics sin f\u00edsicos \u2192 Escala de grises\nif comic.cantidad_adquirida == 0:\n    thumbnail = convert_to_grayscale(thumbnail)\n\n# Comics con f\u00edsicos \u2192 Color normal\nelse:\n    thumbnail = original_thumbnail\n</code></pre>"},{"location":"usuario/gestion-comics/#procesamiento-con-pillow","title":"Procesamiento con Pillow","text":"<pre><code>def convert_to_grayscale(image):\n    \"\"\"Convierte imagen a escala de grises preservando calidad\"\"\"\n    # Convertir a RGB si es necesario\n    if image.mode in ('RGBA', 'LA'):\n        rgb_image = Image.new('RGB', image.size, (255, 255, 255))\n        rgb_image.paste(image, mask=image.split()[-1])\n    else:\n        rgb_image = image.convert('RGB')\n\n    # Aplicar escala de grises\n    grayscale = rgb_image.convert('L')\n    return grayscale.convert('RGB')\n</code></pre>"},{"location":"usuario/gestion-comics/#busqueda-y-filtrado","title":"\ud83d\udd0d B\u00fasqueda y Filtrado","text":""},{"location":"usuario/gestion-comics/#busqueda-basica","title":"B\u00fasqueda B\u00e1sica","text":"<pre><code>\ud83d\udd0d [Buscar en tu colecci\u00f3n...]\n</code></pre>"},{"location":"usuario/gestion-comics/#campos-de-busqueda","title":"Campos de B\u00fasqueda","text":"<ul> <li>Nombre del archivo: <code>superman.cbz</code></li> <li>Ruta completa: <code>/Comics/DC/superman/</code></li> <li>T\u00edtulo catalogado: <code>Superman #1</code></li> <li>Editorial: <code>DC Comics</code></li> <li>Volumen: <code>Superman (2018)</code></li> </ul>"},{"location":"usuario/gestion-comics/#filtros-avanzados","title":"Filtros Avanzados","text":""},{"location":"usuario/gestion-comics/#filtros-de-clasificacion","title":"Filtros de Clasificaci\u00f3n","text":"<pre><code>\u25cb Todos los comics        # Mostrar todos\n\u25cb Solo clasificados       # Solo con metadata ComicVine\n\u25cb Solo sin clasificar     # Solo archivos sin catalogar\n</code></pre>"},{"location":"usuario/gestion-comics/#filtros-de-calidad","title":"Filtros de Calidad","text":"<pre><code>Calidad m\u00ednima: [\u2b50] \u2500\u2500\u2500\u2500\u25cb\u2500\u2500\u2500\u2500 [\u2b50\u2b50\u2b50\u2b50\u2b50]\nCalidad m\u00e1xima: [\u2b50] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25cb [\u2b50\u2b50\u2b50\u2b50\u2b50]\n</code></pre>"},{"location":"usuario/gestion-comics/#filtros-de-estado","title":"Filtros de Estado","text":"<pre><code>\u2610 Incluir elementos en papelera\n\u2611\ufe0f Excluir archivos corruptos\n\u2611\ufe0f Solo archivos existentes\n</code></pre>"},{"location":"usuario/gestion-comics/#combinacion-de-filtros","title":"Combinaci\u00f3n de Filtros","text":"<pre><code># Ejemplo: Comics de alta calidad sin clasificar\n{\n    'classification': False,    # Sin clasificar\n    'quality_range': (4, 5),   # 4-5 estrellas\n    'exclude_trash': True      # No en papelera\n}\n</code></pre>"},{"location":"usuario/gestion-comics/#estadisticas-y-reportes","title":"\ud83d\udcca Estad\u00edsticas y Reportes","text":""},{"location":"usuario/gestion-comics/#informacion-de-coleccion","title":"Informaci\u00f3n de Colecci\u00f3n","text":"<pre><code>\u250c\u2500\u2500\u2500 Estad\u00edsticas Generales \u2500\u2500\u2500\u2500\u2510\n\u2502 Total de Comics: 1,247        \u2502\n\u2502 Clasificados: 892 (71.5%)     \u2502\n\u2502 Sin Clasificar: 355 (28.5%)   \u2502\n\u2502 En Papelera: 12 (1.0%)        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u250c\u2500\u2500\u2500 Distribuci\u00f3n por Calidad \u2500\u2500\u2510\n\u2502 \u2b50\u2b50\u2b50\u2b50\u2b50: 234 (18.8%)      \u2502\n\u2502 \u2b50\u2b50\u2b50\u2b50: 445 (35.7%)        \u2502\n\u2502 \u2b50\u2b50\u2b50: 312 (25.0%)          \u2502\n\u2502 \u2b50\u2b50: 178 (14.3%)            \u2502\n\u2502 \u2b50: 78 (6.3%)                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"usuario/gestion-comics/#distribucion-por-formato","title":"Distribuci\u00f3n por Formato","text":"<pre><code>\ud83d\udcd7 CBZ: 892 (71.5%)\n\ud83d\udcd8 CBR: 234 (18.8%)\n\ud83d\udcd9 PDF: 89 (7.1%)\n\ud83d\uddbc\ufe0f IMG: 32 (2.6%)\n</code></pre>"},{"location":"usuario/gestion-comics/#mantenimiento","title":"\ud83d\udee0\ufe0f Mantenimiento","text":""},{"location":"usuario/gestion-comics/#verificacion-de-integridad","title":"Verificaci\u00f3n de Integridad","text":"<pre><code># Verificar archivos faltantes\npython -c \"\nfrom db_manager import DatabaseManager\ndb = DatabaseManager()\ndb.verify_file_integrity()\n\"\n</code></pre>"},{"location":"usuario/gestion-comics/#regenerar-thumbnails","title":"Regenerar Thumbnails","text":"<pre><code># Forzar regeneraci\u00f3n de todas las miniaturas\npython -c \"\nfrom thumbnail_generator import ThumbnailGenerator\ngen = ThumbnailGenerator()\ngen.regenerate_all()\n\"\n</code></pre>"},{"location":"usuario/gestion-comics/#limpieza-de-cache","title":"Limpieza de Cache","text":"<pre><code># Limpiar thumbnails hu\u00e9rfanos\nrm -rf data/thumbnails/comics/*\n# Se regenerar\u00e1n autom\u00e1ticamente\n</code></pre>"},{"location":"usuario/gestion-comics/#consejos-y-mejores-practicas","title":"\ud83d\udca1 Consejos y Mejores Pr\u00e1cticas","text":""},{"location":"usuario/gestion-comics/#organizacion-de-archivos","title":"Organizaci\u00f3n de Archivos","text":"<pre><code>Comics/\n\u251c\u2500\u2500 DC/\n\u2502   \u251c\u2500\u2500 Batman/\n\u2502   \u2502   \u251c\u2500\u2500 Batman_001.cbz\n\u2502   \u2502   \u251c\u2500\u2500 Batman_002.cbz\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u2514\u2500\u2500 Superman/\n\u2502       \u251c\u2500\u2500 Superman_001.cbz\n\u2502       \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 Marvel/\n    \u251c\u2500\u2500 Spider-Man/\n    \u2514\u2500\u2500 X-Men/\n</code></pre>"},{"location":"usuario/gestion-comics/#nomenclatura-recomendada","title":"Nomenclatura Recomendada","text":"<pre><code># Formato sugerido\n[Editorial]_[Serie]_[N\u00famero]_[A\u00f1o].cbz\n\n# Ejemplos\nDC_Batman_001_2023.cbz\nMarvel_Spider-Man_015_2022.cbz\nImage_Walking_Dead_193_2019.cbz\n</code></pre>"},{"location":"usuario/gestion-comics/#flujo-de-trabajo-eficiente","title":"Flujo de Trabajo Eficiente","text":"<ol> <li>Organizar archivos en directorios l\u00f3gicos</li> <li>Importar a Babelcomics4 por lotes</li> <li>Clasificar con ComicVine usando filtros</li> <li>Revisar y ajustar metadata manualmente</li> <li>Mantener backup de la base de datos</li> </ol> <p>\u00bfListo para gestionar vol\u00famenes completos? \ud83d\udc49 Gesti\u00f3n de Vol\u00famenes</p>"},{"location":"usuario/gestion-volumenes/","title":"Gesti\u00f3n de Vol\u00famenes","text":"<p>La gesti\u00f3n de vol\u00famenes en Babelcomics4 permite organizar y administrar series completas de comics, proporcionando una vista integral de tu colecci\u00f3n a nivel de volumen y facilitando la catalogaci\u00f3n autom\u00e1tica con ComicVine.</p>"},{"location":"usuario/gestion-volumenes/#que-es-un-volumen","title":"\ud83d\udcda \u00bfQu\u00e9 es un Volumen?","text":""},{"location":"usuario/gestion-volumenes/#definicion","title":"Definici\u00f3n","text":"<p>Un volumen es una serie o colecci\u00f3n espec\u00edfica de comics que comparten:</p> <ul> <li>T\u00edtulo de la serie: Ej. \"Batman\", \"Spider-Man\", \"The Walking Dead\"</li> <li>Editorial: DC Comics, Marvel Comics, Image Comics, etc.</li> <li>Per\u00edodo de publicaci\u00f3n: A\u00f1os de inicio y fin</li> <li>Numeraci\u00f3n: Secuencia espec\u00edfica de issues</li> </ul>"},{"location":"usuario/gestion-volumenes/#ejemplos-de-volumenes","title":"Ejemplos de Vol\u00famenes","text":"<pre><code>\ud83d\udcd7 Batman (2016) - DC Comics\n   \u251c\u2500\u2500 Batman #1 (2016)\n   \u251c\u2500\u2500 Batman #2 (2016)\n   \u251c\u2500\u2500 Batman #3 (2016)\n   \u2514\u2500\u2500 ...\n\n\ud83d\udcd8 The Amazing Spider-Man (2018) - Marvel Comics\n   \u251c\u2500\u2500 The Amazing Spider-Man #1 (2018)\n   \u251c\u2500\u2500 The Amazing Spider-Man #2 (2018)\n   \u2514\u2500\u2500 ...\n\n\ud83d\udcd9 The Walking Dead (2003) - Image Comics\n   \u251c\u2500\u2500 The Walking Dead #1 (2003)\n   \u251c\u2500\u2500 The Walking Dead #2 (2003)\n   \u2514\u2500\u2500 ... hasta #193 (2019)\n</code></pre>"},{"location":"usuario/gestion-volumenes/#vista-de-volumenes","title":"\ud83d\udd0d Vista de Vol\u00famenes","text":""},{"location":"usuario/gestion-volumenes/#navegacion-principal","title":"Navegaci\u00f3n Principal","text":"<pre><code>\u250c\u2500\u2500\u2500 Lista de Vol\u00famenes \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                               \u2502\n\u2502 \ud83d\udcd7 Batman (2016) - DC Comics                 \u2502\n\u2502 \u251c\u2500\u2500 45/100 issues en colecci\u00f3n (45%)         \u2502\n\u2502 \u251c\u2500\u2500 \u00daltimo actualizado: 2024-03-15           \u2502\n\u2502 \u2514\u2500\u2500 [\ud83d\udd04 Actualizar ComicVine]                \u2502\n\u2502                                               \u2502\n\u2502 \ud83d\udcd8 Spider-Man (2018) - Marvel Comics         \u2502\n\u2502 \u251c\u2500\u2500 23/50 issues en colecci\u00f3n (46%)          \u2502\n\u2502 \u251c\u2500\u2500 Issues faltantes: #5, #12, #18-20        \u2502\n\u2502 \u2514\u2500\u2500 [\ud83d\udd04 Actualizar ComicVine]                \u2502\n\u2502                                               \u2502\n\u2502 \ud83d\udcd9 The Walking Dead (2003) - Image Comics    \u2502\n\u2502 \u251c\u2500\u2500 193/193 issues en colecci\u00f3n (100%) \u2705   \u2502\n\u2502 \u251c\u2500\u2500 \u2b50 Colecci\u00f3n completa                    \u2502\n\u2502 \u2514\u2500\u2500 [\ud83d\udd04 Actualizar ComicVine]                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"usuario/gestion-volumenes/#informacion-del-volumen","title":"Informaci\u00f3n del Volumen","text":""},{"location":"usuario/gestion-volumenes/#metadatos-basicos","title":"Metadatos B\u00e1sicos","text":"<pre><code>\u250c\u2500\u2500\u2500 Batman (2016) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                               \u2502\n\u2502 \ud83d\udcd6 Editorial: DC Comics                       \u2502\n\u2502 \ud83d\udcc5 Per\u00edodo: 2016 - 2021                      \u2502\n\u2502 \ud83d\udd22 Total Issues: 100                          \u2502\n\u2502 \ud83d\udcbe En Colecci\u00f3n: 45 (45%)                     \u2502\n\u2502 \ud83c\udff7\ufe0f ID ComicVine: 91273                       \u2502\n\u2502                                               \u2502\n\u2502 \ud83d\udcdd Descripci\u00f3n:                               \u2502\n\u2502 La serie principal de Batman que comenz\u00f3      \u2502\n\u2502 durante el evento DC Rebirth, escrita por     \u2502\n\u2502 Tom King y otros autores destacados.          \u2502\n\u2502                                               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"usuario/gestion-volumenes/#estadisticas-de-coleccion","title":"Estad\u00edsticas de Colecci\u00f3n","text":"<pre><code>\u250c\u2500\u2500\u2500 Estad\u00edsticas de Colecci\u00f3n \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                               \u2502\n\u2502 \ud83d\udcca Progreso: \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 45%        \u2502\n\u2502                                               \u2502\n\u2502 \u2705 Issues Catalogados: 42                    \u2502\n\u2502 \u274c Issues Sin Catalogar: 3                   \u2502\n\u2502 \ud83d\udd0d Issues Faltantes: 55                      \u2502\n\u2502 \ud83d\uddd1\ufe0f En Papelera: 0                           \u2502\n\u2502                                               \u2502\n\u2502 \u2b50 Calidad Promedio: \u2b50\u2b50\u2b50\u2b50 (4.2/5)        \u2502\n\u2502 \ud83d\udcc1 Tama\u00f1o Total: 2.3 GB                      \u2502\n\u2502                                               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"usuario/gestion-volumenes/#lista-de-issues-del-volumen","title":"\ud83d\udccb Lista de Issues del Volumen","text":""},{"location":"usuario/gestion-volumenes/#vista-detallada-de-issues","title":"Vista Detallada de Issues","text":"<pre><code>\u250c\u2500\u2500\u2500 Batman (2016) - Issues \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                               \u2502\n\u2502 #1  \u2705 Batman #1 - I Am Gotham               \u2502\n\u2502     \ud83d\udcc1 batman_001_2016.cbz | \u2b50\u2b50\u2b50\u2b50\u2b50       \u2502\n\u2502     \ud83d\udcc5 2016-06-15 | \ud83d\udcbe 45.2 MB                \u2502\n\u2502                                               \u2502\n\u2502 #2  \u2705 Batman #2 - I Am Gotham               \u2502\n\u2502     \ud83d\udcc1 batman_002_2016.cbz | \u2b50\u2b50\u2b50\u2b50         \u2502\n\u2502     \ud83d\udcc5 2016-07-06 | \ud83d\udcbe 42.8 MB                \u2502\n\u2502                                               \u2502\n\u2502 #3  \u274c Batman #3 - I Am Gotham               \u2502\n\u2502     \ud83d\udcc1 batman_003_2016.cbz | Sin catalogar    \u2502\n\u2502     \ud83d\udcc5 2016-07-20 | \ud83d\udcbe 41.5 MB                \u2502\n\u2502                                               \u2502\n\u2502 #4  \ud83d\udd0d Batman #4 - I Am Gotham               \u2502\n\u2502     Issue faltante en colecci\u00f3n               \u2502\n\u2502     \ud83d\udcc5 2016-08-03                             \u2502\n\u2502                                               \u2502\n\u2502 #5  \u2705 Batman #5 - I Am Gotham               \u2502\n\u2502     \ud83d\udcc1 batman_005_2016.cbz | \u2b50\u2b50\u2b50\u2b50\u2b50       \u2502\n\u2502     \ud83d\udcc5 2016-08-17 | \ud83d\udcbe 43.1 MB                \u2502\n\u2502                                               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\ud83d\udd27 Controles:\n[\ud83d\udce5 Importar Issues] [\ud83d\udd04 Actualizar ComicVine]\n[\u2b50 Cambiar Calidad] [\ud83d\uddd1\ufe0f Gestionar Papelera]\n</code></pre>"},{"location":"usuario/gestion-volumenes/#estados-de-issues","title":"Estados de Issues","text":""},{"location":"usuario/gestion-volumenes/#issue-catalogado","title":"\u2705 Issue Catalogado","text":"<pre><code>\u250c\u2500\u2500\u2500 Batman #1 (2016) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \ud83d\uddbc\ufe0f [Thumbnail Color]                         \u2502\n\u2502                                               \u2502\n\u2502 \ud83d\udcd6 T\u00edtulo: Batman #1 - I Am Gotham           \u2502\n\u2502 \ud83d\udcc1 Archivo: batman_001_2016.cbz              \u2502\n\u2502 \u2b50 Calidad: \u2b50\u2b50\u2b50\u2b50\u2b50 (5/5)                \u2502\n\u2502 \ud83d\udcc5 Fecha Tapa: 2016-06-15                    \u2502\n\u2502 \ud83d\udcbe Tama\u00f1o: 45.2 MB                           \u2502\n\u2502 \ud83c\udff7\ufe0f ComicVine ID: 38686                       \u2502\n\u2502                                               \u2502\n\u2502 \ud83d\udcdd Historia: \"I Am Gotham\" Part 1            \u2502\n\u2502 Two strange new heroes appear in Gotham...    \u2502\n\u2502                                               \u2502\n\u2502 \ud83d\udc65 Equipo Creativo:                          \u2502\n\u2502 \u270f\ufe0f Guionista: Tom King                       \u2502\n\u2502 \ud83c\udfa8 Dibujante: David Finch                    \u2502\n\u2502 \ud83d\udd8c\ufe0f Entintador: Matt Banning                  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"usuario/gestion-volumenes/#issue-sin-catalogar","title":"\u274c Issue Sin Catalogar","text":"<pre><code>\u250c\u2500\u2500\u2500 comic_batman_003.cbz \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \ud83d\uddbc\ufe0f [Thumbnail Escala Grises]                 \u2502\n\u2502                                               \u2502\n\u2502 \ud83d\udcc1 Archivo: comic_batman_003.cbz             \u2502\n\u2502 \u2b50 Calidad: Sin calificar                     \u2502\n\u2502 \ud83d\udcc5 Modificado: 2024-03-10                    \u2502\n\u2502 \ud83d\udcbe Tama\u00f1o: 41.5 MB                           \u2502\n\u2502 \ud83c\udff7\ufe0f Estado: Sin catalogar                     \u2502\n\u2502                                               \u2502\n\u2502 \ud83d\udd27 Acciones:                                 \u2502\n\u2502 [\ud83d\udd0d Buscar en ComicVine]                     \u2502\n\u2502 [\ud83d\udcdd Catalogar Manualmente]                   \u2502\n\u2502 [\u2b50 Asignar Calidad]                          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"usuario/gestion-volumenes/#issue-faltante","title":"\ud83d\udd0d Issue Faltante","text":"<pre><code>\u250c\u2500\u2500\u2500 Batman #4 (2016) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \ud83d\uddbc\ufe0f [Imagen de ComicVine]                     \u2502\n\u2502                                               \u2502\n\u2502 \ud83d\udcd6 T\u00edtulo: Batman #4 - I Am Gotham           \u2502\n\u2502 \ud83d\udcc5 Fecha Tapa: 2016-08-03                    \u2502\n\u2502 \ud83c\udff7\ufe0f ComicVine ID: 38689                       \u2502\n\u2502 \ud83d\udd0d Estado: No encontrado en colecci\u00f3n        \u2502\n\u2502                                               \u2502\n\u2502 \ud83d\udcdd Historia: \"I Am Gotham\" Part 4            \u2502\n\u2502 Batman teams up with Gotham and Gotham Girl  \u2502\n\u2502 to face a new threat to the city.            \u2502\n\u2502                                               \u2502\n\u2502 \ud83d\udd27 Acciones:                                 \u2502\n\u2502 [\ud83d\udce5 Marcar como Adquirido]                   \u2502\n\u2502 [\ud83d\udd0d Buscar en Archivos]                      \u2502\n\u2502 [\ud83d\uded2 A\u00f1adir a Lista de Deseos]                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"usuario/gestion-volumenes/#actualizacion-desde-comicvine","title":"\ud83d\udd04 Actualizaci\u00f3n desde ComicVine","text":""},{"location":"usuario/gestion-volumenes/#proceso-de-actualizacion","title":"Proceso de Actualizaci\u00f3n","text":""},{"location":"usuario/gestion-volumenes/#actualizacion-manual","title":"Actualizaci\u00f3n Manual","text":"<pre><code>def update_volume_from_comicvine(volume_id):\n    \"\"\"Actualizar volumen completo desde ComicVine\"\"\"\n\n    # 1. Obtener informaci\u00f3n actualizada del volumen\n    volume_data = comicvine_client.get_volume_details(volume_id)\n\n    # 2. Actualizar metadatos del volumen\n    update_volume_metadata(volume_data)\n\n    # 3. Obtener lista completa de issues\n    issues_list = comicvine_client.get_volume_issues(volume_id)\n\n    # 4. Sincronizar con issues en colecci\u00f3n\n    sync_issues_with_collection(issues_list)\n\n    # 5. Descargar portadas faltantes\n    download_missing_covers()\n\n    # 6. Actualizar estad\u00edsticas\n    update_collection_stats()\n</code></pre>"},{"location":"usuario/gestion-volumenes/#sincronizacion-de-issues","title":"Sincronizaci\u00f3n de Issues","text":"<pre><code>graph TB\n    A[Obtener Issues ComicVine] --&gt; B[Comparar con Colecci\u00f3n]\n    B --&gt; C{Issue Existe?}\n    C --&gt;|S\u00ed| D[Actualizar Metadata]\n    C --&gt;|No| E[Marcar como Faltante]\n    D --&gt; F[Verificar Portada]\n    E --&gt; F\n    F --&gt; G[Actualizar Base Datos]\n    G --&gt; H[Refrescar UI]\n</code></pre>"},{"location":"usuario/gestion-volumenes/#configuracion-de-actualizaciones","title":"Configuraci\u00f3n de Actualizaciones","text":""},{"location":"usuario/gestion-volumenes/#actualizacion-automatica","title":"Actualizaci\u00f3n Autom\u00e1tica","text":"<pre><code>\u250c\u2500\u2500\u2500 Configuraci\u00f3n Auto-Update \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                               \u2502\n\u2502 \u23f0 Frecuencia: [Semanal \u25bc]                   \u2502\n\u2502 \ud83d\udd50 Hora: [02:00] AM                          \u2502\n\u2502 \ud83d\udcc5 D\u00eda: [Domingo]                            \u2502\n\u2502                                               \u2502\n\u2502 \u2705 Actualizar metadata de vol\u00famenes          \u2502\n\u2502 \u2705 Sincronizar lista de issues               \u2502\n\u2502 \u2705 Descargar portadas nuevas                 \u2502\n\u2502 \u2610 Marcar issues faltantes como deseados      \u2502\n\u2502                                               \u2502\n\u2502 \ud83c\udf10 L\u00edmite API: [200] requests/hora           \u2502\n\u2502 \u23f1\ufe0f Delay entre requests: [500] ms            \u2502\n\u2502                                               \u2502\n\u2502 [\ud83d\udcbe Guardar Configuraci\u00f3n]                   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"usuario/gestion-volumenes/#historial-de-actualizaciones","title":"Historial de Actualizaciones","text":"<pre><code>\u250c\u2500\u2500\u2500 Historial de Actualizaciones \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                               \u2502\n\u2502 \ud83d\udcc5 2024-03-15 14:30 - Batman (2016)          \u2502\n\u2502 \u251c\u2500\u2500 \u2705 5 issues actualizados                 \u2502\n\u2502 \u251c\u2500\u2500 \ud83d\udce5 3 portadas descargadas                \u2502\n\u2502 \u2514\u2500\u2500 \ud83d\udd0d 2 issues faltantes detectados         \u2502\n\u2502                                               \u2502\n\u2502 \ud83d\udcc5 2024-03-14 18:45 - Spider-Man (2018)      \u2502\n\u2502 \u251c\u2500\u2500 \u2705 2 issues actualizados                 \u2502\n\u2502 \u251c\u2500\u2500 \u274c Error API timeout (reintentado)       \u2502\n\u2502 \u2514\u2500\u2500 \u2705 Actualizaci\u00f3n completada               \u2502\n\u2502                                               \u2502\n\u2502 \ud83d\udcc5 2024-03-13 12:20 - Walking Dead (2003)    \u2502\n\u2502 \u251c\u2500\u2500 \u2705 Volumen completo actualizado          \u2502\n\u2502 \u251c\u2500\u2500 \u2139\ufe0f Sin cambios detectados               \u2502\n\u2502 \u2514\u2500\u2500 \u2705 Verificaci\u00f3n completada               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"usuario/gestion-volumenes/#herramientas-de-gestion","title":"\ud83d\udee0\ufe0f Herramientas de Gesti\u00f3n","text":""},{"location":"usuario/gestion-volumenes/#analisis-de-coleccion","title":"An\u00e1lisis de Colecci\u00f3n","text":""},{"location":"usuario/gestion-volumenes/#completitud-de-volumenes","title":"Completitud de Vol\u00famenes","text":"<pre><code>def analyze_collection_completeness():\n    \"\"\"Analizar completitud de vol\u00famenes en colecci\u00f3n\"\"\"\n\n    volumes_stats = []\n\n    for volume in session.query(Volume).all():\n        total_issues = volume.cantidad_numeros\n        owned_issues = session.query(Comicbook).join(ComicbookInfo).filter(\n            ComicbookInfo.id_volume == volume.id_volume\n        ).count()\n\n        completeness = (owned_issues / total_issues) * 100 if total_issues &gt; 0 else 0\n\n        volumes_stats.append({\n            'volume': volume,\n            'total_issues': total_issues,\n            'owned_issues': owned_issues,\n            'completeness': completeness,\n            'missing_issues': total_issues - owned_issues\n        })\n\n    # Ordenar por completitud\n    return sorted(volumes_stats, key=lambda x: x['completeness'], reverse=True)\n</code></pre>"},{"location":"usuario/gestion-volumenes/#reporte-de-issues-faltantes","title":"Reporte de Issues Faltantes","text":"<pre><code>\u250c\u2500\u2500\u2500 Issues Faltantes por Volumen \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                               \u2502\n\u2502 \ud83d\udcd7 Batman (2016) - 55 faltantes (55%)        \u2502\n\u2502 \u251c\u2500\u2500 #4, #8, #12-15, #18, #20-25             \u2502\n\u2502 \u251c\u2500\u2500 #30-35, #40, #45-50, #55-60             \u2502\n\u2502 \u2514\u2500\u2500 #65-70, #75-80, #85-100                 \u2502\n\u2502                                               \u2502\n\u2502 \ud83d\udcd8 Spider-Man (2018) - 27 faltantes (54%)    \u2502\n\u2502 \u251c\u2500\u2500 #5, #8, #12, #18-20, #25                \u2502\n\u2502 \u251c\u2500\u2500 #30-35, #40, #45-50                     \u2502\n\u2502 \u2514\u2500\u2500 Volumen activo - Issues nuevos           \u2502\n\u2502                                               \u2502\n\u2502 \ud83d\udcd9 X-Men (2019) - 12 faltantes (24%)         \u2502\n\u2502 \u251c\u2500\u2500 #15, #18, #22-25, #30                   \u2502\n\u2502 \u251c\u2500\u2500 #35, #40, #42, #45                      \u2502\n\u2502 \u2514\u2500\u2500 Alta prioridad - Nearly complete         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\ud83c\udfaf Acciones Sugeridas:\n[\ud83d\uded2 Generar Lista de Compras] [\ud83d\udcca Exportar Reporte]\n[\u2b50 Priorizar por Calidad] [\ud83d\udcb0 Estimar Costo]\n</code></pre>"},{"location":"usuario/gestion-volumenes/#gestion-de-duplicados","title":"Gesti\u00f3n de Duplicados","text":""},{"location":"usuario/gestion-volumenes/#deteccion-de-duplicados","title":"Detecci\u00f3n de Duplicados","text":"<pre><code>def detect_duplicate_issues():\n    \"\"\"Detectar issues duplicados en la colecci\u00f3n\"\"\"\n\n    duplicates = session.query(\n        ComicbookInfo.id_volume,\n        ComicbookInfo.numero,\n        func.count(Comicbook.id_comicbook).label('count')\n    ).join(Comicbook).group_by(\n        ComicbookInfo.id_volume,\n        ComicbookInfo.numero\n    ).having(func.count(Comicbook.id_comicbook) &gt; 1).all()\n\n    duplicate_groups = []\n\n    for volume_id, issue_number, count in duplicates:\n        comics = session.query(Comicbook).join(ComicbookInfo).filter(\n            ComicbookInfo.id_volume == volume_id,\n            ComicbookInfo.numero == issue_number\n        ).all()\n\n        duplicate_groups.append({\n            'volume_id': volume_id,\n            'issue_number': issue_number,\n            'count': count,\n            'comics': comics\n        })\n\n    return duplicate_groups\n</code></pre>"},{"location":"usuario/gestion-volumenes/#resolucion-de-duplicados","title":"Resoluci\u00f3n de Duplicados","text":"<pre><code>\u250c\u2500\u2500\u2500 Duplicados Detectados \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                               \u2502\n\u2502 \ud83d\udcd7 Batman #15 (2016) - 2 copias             \u2502\n\u2502 \u251c\u2500\u2500 \ud83d\udcc1 batman_015_v1.cbz | \u2b50\u2b50\u2b50 | 42MB    \u2502\n\u2502 \u251c\u2500\u2500 \ud83d\udcc1 batman_015_v2.cbz | \u2b50\u2b50\u2b50\u2b50\u2b50 | 68MB\u2502\n\u2502 \u2514\u2500\u2500 \ud83c\udfaf Acci\u00f3n: Conservar v2, mover v1 a papelera \u2502\n\u2502                                               \u2502\n\u2502 \ud83d\udcd8 Spider-Man #8 (2018) - 3 copias          \u2502\n\u2502 \u251c\u2500\u2500 \ud83d\udcc1 spiderman_008_low.cbz | \u2b50\u2b50 | 25MB   \u2502\n\u2502 \u251c\u2500\u2500 \ud83d\udcc1 spiderman_008_med.cbz | \u2b50\u2b50\u2b50 | 35MB \u2502\n\u2502 \u251c\u2500\u2500 \ud83d\udcc1 spiderman_008_hq.cbz | \u2b50\u2b50\u2b50\u2b50\u2b50 | 55MB \u2502\n\u2502 \u2514\u2500\u2500 \ud83c\udfaf Acci\u00f3n: Conservar HQ, eliminar otros   \u2502\n\u2502                                               \u2502\n\u2502 [\ud83d\udd27 Resolver Autom\u00e1ticamente] [\ud83d\udcdd Manual]    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"usuario/gestion-volumenes/#estadisticas-de-volumenes","title":"\ud83d\udcca Estad\u00edsticas de Vol\u00famenes","text":""},{"location":"usuario/gestion-volumenes/#dashboard-de-volumenes","title":"Dashboard de Vol\u00famenes","text":"<pre><code>\u250c\u2500\u2500\u2500 Estad\u00edsticas de Colecci\u00f3n \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                               \u2502\n\u2502 \ud83d\udcda Total Vol\u00famenes: 45                       \u2502\n\u2502 \u2705 Completos (100%): 3 (6.7%)                \u2502\n\u2502 \ud83d\udd04 En Progreso (50-99%): 12 (26.7%)          \u2502\n\u2502 \ud83c\udd95 Iniciados (&lt;50%): 30 (66.7%)              \u2502\n\u2502                                               \u2502\n\u2502 \ud83d\udcca Completitud Promedio: 34.5%               \u2502\n\u2502 \ud83d\udcc8 Tendencia: +2.3% este mes                 \u2502\n\u2502                                               \u2502\n\u251c\u2500\u2500\u2500 Por Editorial \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 \ud83e\udd87 DC Comics: 18 vol\u00famenes (40%)             \u2502\n\u2502 \ud83d\udd77\ufe0f Marvel Comics: 15 vol\u00famenes (33.3%)        \u2502\n\u2502 \ud83c\udf1f Image Comics: 8 vol\u00famenes (17.8%)         \u2502\n\u2502 \ud83d\udcda Otros: 4 vol\u00famenes (8.9%)                 \u2502\n\u2502                                               \u2502\n\u251c\u2500\u2500\u2500 Por D\u00e9cada \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 2020s: 20 vol\u00famenes (44.4%) \ud83d\udcc8               \u2502\n\u2502 2010s: 15 vol\u00famenes (33.3%) \ud83d\udcca               \u2502\n\u2502 2000s: 8 vol\u00famenes (17.8%) \ud83d\udcc9                \u2502\n\u2502 1990s: 2 vol\u00famenes (4.4%) \ud83d\udcc9                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"usuario/gestion-volumenes/#metricas-de-calidad","title":"M\u00e9tricas de Calidad","text":"<pre><code>\u250c\u2500\u2500\u2500 Distribuci\u00f3n de Calidad \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                               \u2502\n\u2502 \u2b50\u2b50\u2b50\u2b50\u2b50 Excelente: 234 issues (22.3%)     \u2502\n\u2502 \u2b50\u2b50\u2b50\u2b50 Muy Buena: 412 issues (39.2%)       \u2502\n\u2502 \u2b50\u2b50\u2b50 Buena: 295 issues (28.1%)             \u2502\n\u2502 \u2b50\u2b50 Regular: 89 issues (8.5%)                \u2502\n\u2502 \u2b50 Baja: 21 issues (2.0%)                     \u2502\n\u2502                                               \u2502\n\u2502 \ud83d\udcca Calidad Promedio: 3.8/5 \u2b50\u2b50\u2b50\u2b50           \u2502\n\u2502 \ud83c\udfaf Meta de Calidad: 4.0/5                    \u2502\n\u2502 \ud83d\udcc8 Progreso: 95% hacia meta                  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"usuario/gestion-volumenes/#busqueda-y-filtrado-de-volumenes","title":"\ud83d\udd0d B\u00fasqueda y Filtrado de Vol\u00famenes","text":""},{"location":"usuario/gestion-volumenes/#filtros-avanzados","title":"Filtros Avanzados","text":"<pre><code>\u250c\u2500\u2500\u2500 Filtros de Vol\u00famenes \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                               \u2502\n\u2502 \ud83d\udd0d Buscar: [batman rebirth         ] \ud83d\udd0e      \u2502\n\u2502                                               \u2502\n\u2502 \ud83d\udcca Completitud:                               \u2502\n\u2502 \u2610 Completos (100%)                           \u2502\n\u2502 \u2611\ufe0f En progreso (1-99%)                       \u2502\n\u2502 \u2610 Sin issues (0%)                            \u2502\n\u2502                                               \u2502\n\u2502 \ud83c\udfe2 Editorial:                                \u2502\n\u2502 \u2611\ufe0f DC Comics         \u2611\ufe0f Marvel Comics        \u2502\n\u2502 \u2611\ufe0f Image Comics      \u2610 Dark Horse            \u2502\n\u2502 \u2610 IDW Publishing    \u2610 Otras                  \u2502\n\u2502                                               \u2502\n\u2502 \ud83d\udcc5 Per\u00edodo:                                  \u2502\n\u2502 Desde: [2010] Hasta: [2024]                  \u2502\n\u2502                                               \u2502\n\u2502 \ud83d\udcca Estado:                                   \u2502\n\u2502 \u2611\ufe0f Activos           \u2610 Finalizados           \u2502\n\u2502 \u2610 Cancelados         \u2610 En pausa              \u2502\n\u2502                                               \u2502\n\u2502 [\ud83d\udd04 Aplicar Filtros] [\u274c Limpiar]           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"usuario/gestion-volumenes/#ordenamiento","title":"Ordenamiento","text":"<pre><code>Ordenar por:\n\u25cb Nombre (A-Z)          \u25cb Nombre (Z-A)\n\u25cb Completitud (Mayor)   \u25cb Completitud (Menor)\n\u25cb Fecha Inicio (Nuevo)  \u25cb Fecha Inicio (Antiguo)\n\u25cb Editorial             \u25cb Issues en Colecci\u00f3n\n\u25cb \u00daltima Actualizaci\u00f3n  \u25cb Calidad Promedio\n</code></pre>"},{"location":"usuario/gestion-volumenes/#consejos-para-gestion-eficiente","title":"\ud83d\udca1 Consejos para Gesti\u00f3n Eficiente","text":""},{"location":"usuario/gestion-volumenes/#flujo-de-trabajo-recomendado","title":"Flujo de Trabajo Recomendado","text":""},{"location":"usuario/gestion-volumenes/#1-configuracion-inicial","title":"1. Configuraci\u00f3n Inicial","text":"<ol> <li>Importar colecci\u00f3n existente</li> <li>Configurar actualizaciones autom\u00e1ticas</li> <li>Establecer perfiles de catalogaci\u00f3n</li> <li>Definir estructura de directorios</li> </ol>"},{"location":"usuario/gestion-volumenes/#2-mantenimiento-regular","title":"2. Mantenimiento Regular","text":"<ol> <li>Revisar duplicados semanalmente</li> <li>Actualizar vol\u00famenes activos</li> <li>Catalogar issues sin clasificar</li> <li>Verificar integridad de archivos</li> </ol>"},{"location":"usuario/gestion-volumenes/#3-expansion-de-coleccion","title":"3. Expansi\u00f3n de Colecci\u00f3n","text":"<ol> <li>Identificar issues faltantes</li> <li>Priorizar por completitud o calidad</li> <li>Mantener listas de deseos</li> <li>Integrar nuevas adquisiciones</li> </ol>"},{"location":"usuario/gestion-volumenes/#mejores-practicas","title":"Mejores Pr\u00e1cticas","text":""},{"location":"usuario/gestion-volumenes/#organizacion-de-archivos","title":"Organizaci\u00f3n de Archivos","text":"<pre><code># Estructura recomendada\nComics/\n\u251c\u2500\u2500 DC_Comics/\n\u2502   \u251c\u2500\u2500 Batman_2016/\n\u2502   \u2502   \u251c\u2500\u2500 Batman_001_2016.cbz\n\u2502   \u2502   \u251c\u2500\u2500 Batman_002_2016.cbz\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u2514\u2500\u2500 Superman_2018/\n\u2502       \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 Marvel_Comics/\n\u2502   \u251c\u2500\u2500 Spider-Man_2018/\n\u2502   \u2514\u2500\u2500 X-Men_2019/\n\u2514\u2500\u2500 Image_Comics/\n    \u2514\u2500\u2500 Walking_Dead_2003/\n</code></pre>"},{"location":"usuario/gestion-volumenes/#nomenclatura-consistente","title":"Nomenclatura Consistente","text":"<pre><code># Formato sugerido para archivos\n[Serie]_[N\u00famero]_[A\u00f1o].cbz\n\n# Ejemplos\nBatman_001_2016.cbz\nAmazing_Spider-Man_001_2018.cbz\nWalking_Dead_001_2003.cbz\n</code></pre>"},{"location":"usuario/gestion-volumenes/#backup-y-recuperacion","title":"Backup y Recuperaci\u00f3n","text":"<pre><code># Backup regular de metadatos\nsqlite3 babelcomics.db \".backup backup_$(date +%Y%m%d).db\"\n\n# Backup de configuraci\u00f3n\ncp -r data/ backup_data_$(date +%Y%m%d)/\n\n# Verificaci\u00f3n de integridad\npython verify_collection.py --check-files --check-metadata\n</code></pre> <p>\u00bfListo para configurar filtros avanzados? \ud83d\udc49 Filtros y B\u00fasqueda</p>"},{"location":"usuario/instalacion/","title":"Instalaci\u00f3n","text":"<p>Esta gu\u00eda te ayudar\u00e1 a instalar y configurar Babelcomics4 en tu sistema.</p>"},{"location":"usuario/instalacion/#requisitos-del-sistema","title":"\ud83d\udccb Requisitos del Sistema","text":""},{"location":"usuario/instalacion/#requisitos-minimos","title":"Requisitos M\u00ednimos","text":"<ul> <li>Sistema Operativo: Linux (recomendado: Ubuntu 22.04+, Fedora 38+, Arch Linux)</li> <li>Python: 3.11 o superior (probado con Python 3.13)</li> <li>RAM: 2GB m\u00ednimo, 4GB recomendado</li> <li>Almacenamiento: 500MB para la aplicaci\u00f3n + espacio para tu colecci\u00f3n</li> <li>GTK4: Versi\u00f3n 4.6 o superior</li> </ul>"},{"location":"usuario/instalacion/#requisitos-de-desarrollo","title":"Requisitos de Desarrollo","text":"<ul> <li>Git: Para clonar el repositorio</li> <li>pip: Gestor de paquetes de Python</li> <li>venv: Para entornos virtuales</li> <li>GTK4 Development: Librer\u00edas de desarrollo de GTK4</li> </ul>"},{"location":"usuario/instalacion/#instalacion-en-ubuntudebian","title":"\ud83d\udd27 Instalaci\u00f3n en Ubuntu/Debian","text":""},{"location":"usuario/instalacion/#1-actualizar-el-sistema","title":"1. Actualizar el Sistema","text":"<pre><code>sudo apt update &amp;&amp; sudo apt upgrade -y\n</code></pre>"},{"location":"usuario/instalacion/#2-instalar-dependencias-del-sistema","title":"2. Instalar Dependencias del Sistema","text":"<pre><code># GTK4 y libadwaita\nsudo apt install libgtk-4-dev libadwaita-1-dev\n\n# Python y herramientas de desarrollo\nsudo apt install python3 python3-pip python3-venv python3-dev\n\n# Dependencias adicionales\nsudo apt install gobject-introspection libgirepository1.0-dev\n\n# Soporte para archivos RAR (opcional)\nsudo apt install unrar-free\n\n# ImageMagick (para procesamiento de iconos)\nsudo apt install imagemagick\n</code></pre>"},{"location":"usuario/instalacion/#3-clonar-el-repositorio","title":"3. Clonar el Repositorio","text":"<pre><code>cd ~/\ngit clone &lt;url-del-repositorio&gt; Babelcomics4\ncd Babelcomics4\n</code></pre>"},{"location":"usuario/instalacion/#4-crear-entorno-virtual","title":"4. Crear Entorno Virtual","text":"<pre><code>python3 -m venv .venv\nsource .venv/bin/activate\n</code></pre>"},{"location":"usuario/instalacion/#5-instalar-dependencias-python","title":"5. Instalar Dependencias Python","text":"<pre><code>pip install --upgrade pip\npip install -r requirements.txt\n</code></pre>"},{"location":"usuario/instalacion/#instalacion-en-fedora","title":"\ud83d\udd27 Instalaci\u00f3n en Fedora","text":""},{"location":"usuario/instalacion/#1-instalar-dependencias-del-sistema","title":"1. Instalar Dependencias del Sistema","text":"<pre><code># GTK4 y libadwaita\nsudo dnf install gtk4-devel libadwaita-devel\n\n# Python y herramientas\nsudo dnf install python3 python3-pip python3-devel\n\n# Dependencias adicionales\nsudo dnf install gobject-introspection-devel\n\n# Soporte RAR (opcional)\nsudo dnf install unrar\n\n# ImageMagick (para procesamiento de iconos)\nsudo dnf install ImageMagick\n</code></pre>"},{"location":"usuario/instalacion/#2-seguir-pasos-3-5-de-ubuntu","title":"2. Seguir pasos 3-5 de Ubuntu","text":""},{"location":"usuario/instalacion/#instalacion-en-arch-linux","title":"\ud83d\udd27 Instalaci\u00f3n en Arch Linux","text":""},{"location":"usuario/instalacion/#1-instalar-dependencias-del-sistema_1","title":"1. Instalar Dependencias del Sistema","text":"<pre><code># GTK4 y libadwaita\nsudo pacman -S gtk4 libadwaita\n\n# Python y herramientas\nsudo pacman -S python python-pip\n\n# Dependencias adicionales\nsudo pacman -S gobject-introspection\n\n# Soporte RAR (opcional)\nsudo pacman -S unrar\n\n# ImageMagick (para procesamiento de iconos)\nsudo pacman -S imagemagick\n</code></pre>"},{"location":"usuario/instalacion/#2-seguir-pasos-3-5-de-ubuntu_1","title":"2. Seguir pasos 3-5 de Ubuntu","text":""},{"location":"usuario/instalacion/#dependencias-python","title":"\ud83d\udce6 Dependencias Python","text":"<p>El archivo <code>requirements.txt</code> incluye todas las dependencias necesarias:</p> <pre><code># Base de datos y ORM\nsqlalchemy&gt;=2.0.0\nalembic&gt;=1.12.0\n\n# Interfaz gr\u00e1fica GTK4\npygobject&gt;=3.46.0\n\n# Procesamiento de im\u00e1genes\npillow&gt;=10.0.0\n\n# API ComicVine\nrequests&gt;=2.31.0\n\n# Compresi\u00f3n de archivos\nrarfile&gt;=4.0\n\n# Documentaci\u00f3n (opcional)\nmkdocs&gt;=1.5.0\nmkdocs-material&gt;=9.4.0\n</code></pre>"},{"location":"usuario/instalacion/#configuracion-inicial","title":"\u2699\ufe0f Configuraci\u00f3n Inicial","text":""},{"location":"usuario/instalacion/#script-de-setup-automatico-recomendado","title":"Script de Setup Autom\u00e1tico (Recomendado)","text":"<p>Babelcomics4 incluye un script de configuraci\u00f3n autom\u00e1tica que configura todo lo necesario:</p> <pre><code># Ejecutar script de setup\npython setup.py\n</code></pre> <p>El script autom\u00e1ticamente: - \u2705 Verifica dependencias del sistema - \u2705 Crea estructura de directorios necesarios - \u2705 Instala dependencias Python - \u2705 Configura la base de datos SQLite - \u2705 Instala iconos en el sistema (m\u00faltiples resoluciones) - \u2705 Crea entrada en el men\u00fa de aplicaciones - \u2705 Genera script de inicio ejecutable</p>"},{"location":"usuario/instalacion/#configuracion-manual-alternativa","title":"Configuraci\u00f3n Manual (Alternativa)","text":"<p>Si prefieres configurar manualmente:</p>"},{"location":"usuario/instalacion/#1-verificar-instalacion","title":"1. Verificar Instalaci\u00f3n","text":"<pre><code># Activar entorno virtual\nsource .venv/bin/activate\n\n# Verificar dependencias GTK4\npython -c \"import gi; gi.require_version('Gtk', '4.0'); from gi.repository import Gtk; print('GTK4 OK')\"\n\n# Verificar dependencias adicionales\npython -c \"import sqlalchemy, requests, PIL; print('Dependencias OK')\"\n</code></pre>"},{"location":"usuario/instalacion/#2-crear-directorios-necesarios","title":"2. Crear Directorios Necesarios","text":"<pre><code># Crear estructura de directorios\nmkdir -p data/thumbnails/{comics,volumes,publishers,comicbookinfo_issues}\nmkdir -p logs config backup\n</code></pre>"},{"location":"usuario/instalacion/#3-configurar-base-de-datos","title":"3. Configurar Base de Datos","text":"<pre><code># La base de datos se crea autom\u00e1ticamente en el primer inicio\n# Ubicaci\u00f3n: ./data/babelcomics.db\n</code></pre>"},{"location":"usuario/instalacion/#4-instalar-iconos-del-sistema","title":"4. Instalar Iconos del Sistema","text":"<pre><code># Crear directorios de iconos\nmkdir -p ~/.local/share/icons/hicolor/{48x48,64x64,128x128,256x256}/apps\n\n# Instalar iconos (requiere ImageMagick)\nmagick images/icon.png -resize 48x48 ~/.local/share/icons/hicolor/48x48/apps/babelcomics4.png\nmagick images/icon.png -resize 64x64 ~/.local/share/icons/hicolor/64x64/apps/babelcomics4.png\ncp images/icon.png ~/.local/share/icons/hicolor/128x128/apps/babelcomics4.png\ncp images/icon.png ~/.local/share/icons/hicolor/256x256/apps/babelcomics4.png\n\n# Actualizar cache de iconos\ngtk-update-icon-cache ~/.local/share/icons/hicolor/ || true\n</code></pre>"},{"location":"usuario/instalacion/#5-primer-inicio","title":"5. Primer Inicio","text":"<pre><code>python Babelcomic4.py\n</code></pre>"},{"location":"usuario/instalacion/#estructura-de-directorios","title":"\ud83d\uddc2\ufe0f Estructura de Directorios","text":"<p>Despu\u00e9s de la instalaci\u00f3n, tu proyecto tendr\u00e1 esta estructura:</p> <pre><code>Babelcomics4/\n\u251c\u2500\u2500 \ud83d\udcc4 Babelcomic4.py              # Aplicaci\u00f3n principal\n\u251c\u2500\u2500 \ud83d\udcc1 entidades/                  # Modelos de datos\n\u251c\u2500\u2500 \ud83d\udcc1 repositories/               # Capa de acceso a datos\n\u251c\u2500\u2500 \ud83d\udcc1 helpers/                    # Utilidades ComicVine\n\u251c\u2500\u2500 \ud83d\udcc1 data/                       # Base de datos y cache\n\u2502   \u251c\u2500\u2500 babelcomics.db            # Base de datos SQLite\n\u2502   \u2514\u2500\u2500 thumbnails/               # Cache de miniaturas\n\u2502       \u251c\u2500\u2500 comics/               # Thumbnails de archivos\n\u2502       \u251c\u2500\u2500 volumes/              # Portadas de vol\u00famenes\n\u2502       \u251c\u2500\u2500 publishers/           # Logos de editoriales\n\u2502       \u2514\u2500\u2500 comicbookinfo_issues/ # Portadas de issues\n\u251c\u2500\u2500 \ud83d\udcc1 images/                     # Recursos de interfaz\n\u2502   \u2514\u2500\u2500 icon.png                  # Icono de la aplicaci\u00f3n\n\u251c\u2500\u2500 \ud83d\udcc1 logs/                      # Archivos de registro\n\u251c\u2500\u2500 \ud83d\udcc1 config/                    # Configuraci\u00f3n personalizada\n\u251c\u2500\u2500 \ud83d\udcc1 backup/                    # Respaldos autom\u00e1ticos\n\u251c\u2500\u2500 \ud83d\udcc1 Documentacion/             # Documentaci\u00f3n MkDocs\n\u251c\u2500\u2500 \ud83d\udcc4 setup.py                   # Script de configuraci\u00f3n autom\u00e1tica\n\u251c\u2500\u2500 \ud83d\udcc4 babelcomics4.sh            # Script de inicio (generado por setup)\n\u251c\u2500\u2500 \ud83d\udcc4 requirements.txt           # Dependencias Python\n\u2514\u2500\u2500 \ud83d\udcc4 README.md                  # Informaci\u00f3n del proyecto\n</code></pre>"},{"location":"usuario/instalacion/#desarrollo","title":"\ud83d\udee0\ufe0f Desarrollo","text":""},{"location":"usuario/instalacion/#configurar-entorno-de-desarrollo","title":"Configurar Entorno de Desarrollo","text":"<pre><code># Instalar dependencias adicionales para desarrollo\npip install mkdocs mkdocs-material\n\n# Ejecutar documentaci\u00f3n en desarrollo\ncd Documentacion/Babelcomics4\nmkdocs serve\n</code></pre>"},{"location":"usuario/instalacion/#variables-de-entorno","title":"Variables de Entorno","text":"<pre><code># ComicVine API (opcional, pero recomendado)\nexport COMICVINE_API_KEY=\"tu-api-key-aqui\"\n\n# Directorio de comics (opcional)\nexport COMICS_PATH=\"/ruta/a/tus/comics\"\n</code></pre>"},{"location":"usuario/instalacion/#verificacion-de-la-instalacion","title":"\ud83d\udd0d Verificaci\u00f3n de la Instalaci\u00f3n","text":""},{"location":"usuario/instalacion/#test-basico","title":"Test B\u00e1sico","text":"<pre><code># Ejecutar aplicaci\u00f3n\npython Babelcomic4.py\n\n# Deber\u00edas ver:\n# \u2713 Pango disponible\n# \u2713 Todos los archivos requeridos encontrados\n# \u2713 Base de datos encontrada\n# \u2713 Aplicaci\u00f3n creada\n</code></pre>"},{"location":"usuario/instalacion/#test-de-comicvine-opcional","title":"Test de ComicVine (Opcional)","text":"<pre><code># Con API key configurada\npython -c \"\nfrom helpers.comicvine_client import ComicVineClient;\nclient = ComicVineClient();\nprint('ComicVine OK' if client else 'ComicVine Error')\n\"\n</code></pre>"},{"location":"usuario/instalacion/#solucion-de-problemas","title":"\u2757 Soluci\u00f3n de Problemas","text":""},{"location":"usuario/instalacion/#error-no-module-named-gi","title":"Error: No module named 'gi'","text":"<pre><code># Ubuntu/Debian\nsudo apt install python3-gi python3-gi-cairo gir1.2-gtk-4.0\n\n# Fedora\nsudo dnf install python3-gobject gtk4\n\n# Arch\nsudo pacman -S python-gobject gtk4\n</code></pre>"},{"location":"usuario/instalacion/#error-gtk4-not-found","title":"Error: GTK4 not found","text":"<pre><code># Verificar instalaci\u00f3n GTK4\npkg-config --modversion gtk4\n\n# Si no est\u00e1 instalado, instalar desde repositorios del sistema\n</code></pre>"},{"location":"usuario/instalacion/#error-permission-denied-al-ejecutar","title":"Error: Permission denied al ejecutar","text":"<pre><code># Dar permisos de ejecuci\u00f3n\nchmod +x Babelcomic4.py\n\n# O ejecutar con Python directamente\npython Babelcomic4.py\n</code></pre>"},{"location":"usuario/instalacion/#base-de-datos-bloqueada","title":"Base de datos bloqueada","text":"<pre><code># Verificar que no hay otra instancia ejecut\u00e1ndose\nps aux | grep Babelcomic4\n\n# Si es necesario, eliminar archivo de lock\nrm -f data/babelcomics.db.lock\n</code></pre>"},{"location":"usuario/instalacion/#siguientes-pasos","title":"\ud83c\udfaf Siguientes Pasos","text":"<p>Una vez completada la instalaci\u00f3n:</p> <ol> <li>Primeros Pasos: Aprende lo b\u00e1sico de la interfaz</li> <li>Gesti\u00f3n de Comics: Importa tu colecci\u00f3n</li> <li>ComicVine: Configura la integraci\u00f3n con ComicVine</li> <li>Filtros: Domina el sistema de b\u00fasqueda</li> </ol> <p>\u00bfProblemas con la instalaci\u00f3n? Consulta el Troubleshooting o las FAQ.</p>"},{"location":"usuario/primeros-pasos/","title":"Primeros Pasos","text":"<p>Esta gu\u00eda te llevar\u00e1 a trav\u00e9s de los conceptos b\u00e1sicos de Babelcomics4 y te ayudar\u00e1 a empezar a gestionar tu colecci\u00f3n de comics.</p>"},{"location":"usuario/primeros-pasos/#primer-inicio","title":"\ud83d\ude80 Primer Inicio","text":""},{"location":"usuario/primeros-pasos/#ejecutar-la-aplicacion","title":"Ejecutar la Aplicaci\u00f3n","text":"<pre><code># Activar entorno virtual\nsource .venv/bin/activate\n\n# Ejecutar Babelcomics4\npython Babelcomic4.py\n</code></pre>"},{"location":"usuario/primeros-pasos/#primera-ejecucion","title":"Primera Ejecuci\u00f3n","text":"<p>En el primer inicio, Babelcomics4:</p> <ol> <li>\u2705 Crea la base de datos autom\u00e1ticamente en <code>data/babelcomics.db</code></li> <li>\u2705 Inicializa las tablas necesarias con SQLAlchemy</li> <li>\u2705 Crea directorios de cache y thumbnails</li> <li>\u2705 Configura el entorno de trabajo</li> </ol> <pre><code>\ud83d\udd0d Verificando requisitos...\n\u2713 Pango disponible\n\u2713 Todos los archivos requeridos encontrados\n\u2713 Base de datos encontrada: data/babelcomics.db\n\u2713 Aplicaci\u00f3n creada\n</code></pre>"},{"location":"usuario/primeros-pasos/#interfaz-principal","title":"\ud83d\udda5\ufe0f Interfaz Principal","text":""},{"location":"usuario/primeros-pasos/#componentes-de-la-interfaz","title":"Componentes de la Interfaz","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [\u2261] Babelcomics4           \ud83d\udd0d Buscar...        [\u2699\ufe0f] [\ud83d\udcca]     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 [\ud83d\udcda Comics] [\ud83d\udcd6 Vol\u00famenes] [\ud83c\udfe2 Editoriales]                \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                                             \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2510              \u2502\n\u2502  \u2502 \ud83d\udcd7  \u2502  \u2502 \ud83d\udcd8  \u2502  \u2502 \ud83d\udcd9  \u2502  \u2502 \ud83d\udcd5  \u2502  \u2502 \ud83d\udcd4  \u2502              \u2502\n\u2502  \u2502Comic\u2502  \u2502Comic\u2502  \u2502Comic\u2502  \u2502Comic\u2502  \u2502Comic\u2502              \u2502\n\u2502  \u2502  1  \u2502  \u2502  2  \u2502  \u2502  3  \u2502  \u2502  4  \u2502  \u2502  5  \u2502              \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2518              \u2502\n\u2502                                                             \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2510              \u2502\n\u2502  \u2502 \ud83d\udcd7  \u2502  \u2502 \ud83d\udcd8  \u2502  \u2502 \ud83d\udcd9  \u2502  \u2502 \ud83d\udcd5  \u2502  \u2502 \ud83d\udcd4  \u2502              \u2502\n\u2502  \u2502Comic\u2502  \u2502Comic\u2502  \u2502Comic\u2502  \u2502Comic\u2502  \u2502Comic\u2502              \u2502\n\u2502  \u2502  6  \u2502  \u2502  7  \u2502  \u2502  8  \u2502  \u2502  9  \u2502  \u2502 10  \u2502              \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2518              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"usuario/primeros-pasos/#barra-superior","title":"Barra Superior","text":"<ul> <li>\ud83d\udd0d B\u00fasqueda: Campo de b\u00fasqueda en tiempo real</li> <li>\u2699\ufe0f Filtros: Acceso a filtros avanzados</li> <li>\ud83d\udcca Selecci\u00f3n: Modo de selecci\u00f3n m\u00faltiple</li> </ul>"},{"location":"usuario/primeros-pasos/#pestanas-de-navegacion","title":"Pesta\u00f1as de Navegaci\u00f3n","text":"<ul> <li>\ud83d\udcda Comics: Vista de comics individuales</li> <li>\ud83d\udcd6 Vol\u00famenes: Vista de series/vol\u00famenes</li> <li>\ud83c\udfe2 Editoriales: Vista de editoriales/publishers</li> </ul>"},{"location":"usuario/primeros-pasos/#vista-de-comics","title":"\ud83d\udcda Vista de Comics","text":""},{"location":"usuario/primeros-pasos/#informacion-de-las-cards","title":"Informaci\u00f3n de las Cards","text":"<p>Cada comic muestra:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   \ud83d\udcd7 Thumbnail  \u2502\n\u2502                 \u2502\n\u2502 T\u00edtulo del      \u2502\n\u2502 Comic           \u2502\n\u2502                 \u2502\n\u2502 \ud83d\udcc1 Archivo      \u2502\n\u2502 \u2b50 Calidad      \u2502\n\u2502 \ud83d\udd16 Estado       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <ul> <li>Thumbnail: Miniatura generada autom\u00e1ticamente</li> <li>T\u00edtulo: Nombre del archivo o t\u00edtulo catalogado</li> <li>Archivo: Ruta del archivo f\u00edsico</li> <li>Calidad: Puntuaci\u00f3n de 1-5 estrellas</li> <li>Estado: Clasificado \u2705 / Sin clasificar \u274c</li> </ul>"},{"location":"usuario/primeros-pasos/#estados-visuales","title":"Estados Visuales","text":"<ul> <li>\ud83c\udf08 Color: Comic catalogado con metadata</li> <li>\u26ab Escala de grises: Comic sin cat\u00e1logo f\u00edsico</li> <li>\ud83d\uddd1\ufe0f Papelera: Comic marcado como eliminado</li> </ul>"},{"location":"usuario/primeros-pasos/#interacciones","title":"Interacciones","text":"<ul> <li>Click simple: Seleccionar comic</li> <li>Doble click: Abrir detalles (futuro)</li> <li>Click derecho: Men\u00fa contextual</li> <li>Arrastrar: Selecci\u00f3n m\u00faltiple</li> </ul>"},{"location":"usuario/primeros-pasos/#vista-de-volumenes","title":"\ud83d\udcd6 Vista de Vol\u00famenes","text":""},{"location":"usuario/primeros-pasos/#informacion-de-volumenes","title":"Informaci\u00f3n de Vol\u00famenes","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  \ud83d\udcd6 Cover       \u2502\n\u2502                 \u2502\n\u2502 Nombre del      \u2502\n\u2502 Volumen         \u2502\n\u2502                 \u2502\n\u2502 \ud83d\udcc5 A\u00f1o          \u2502\n\u2502 \ud83d\udcca Completitud  \u2502\n\u2502 \ud83d\udd22 Issues       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <ul> <li>Cover: Portada oficial del volumen</li> <li>Nombre: T\u00edtulo oficial del volumen</li> <li>A\u00f1o: A\u00f1o de publicaci\u00f3n</li> <li>Completitud: Porcentaje de issues que posees</li> <li>Issues: Cantidad total de n\u00fameros</li> </ul>"},{"location":"usuario/primeros-pasos/#navegacion-a-detalle","title":"Navegaci\u00f3n a Detalle","text":"<p>Al hacer doble click en un volumen:</p> <ol> <li>Navegaci\u00f3n: Se abre la p\u00e1gina de detalle</li> <li>Lista de Issues: Todos los n\u00fameros del volumen</li> <li>Metadatos: Informaci\u00f3n completa de ComicVine</li> <li>Acciones: Bot\u00f3n de actualizaci\u00f3n ComicVine</li> </ol>"},{"location":"usuario/primeros-pasos/#sistema-de-busqueda","title":"\ud83d\udd0d Sistema de B\u00fasqueda","text":""},{"location":"usuario/primeros-pasos/#busqueda-basica","title":"B\u00fasqueda B\u00e1sica","text":"<pre><code>\ud83d\udd0d [Buscar comics, vol\u00famenes, editoriales...]\n</code></pre> <ul> <li>Tiempo real: Resultados mientras escribes</li> <li>Multi-campo: Busca en t\u00edtulos, archivos, metadatos</li> <li>Sensible a contexto: Seg\u00fan la pesta\u00f1a activa</li> </ul>"},{"location":"usuario/primeros-pasos/#ejemplos-de-busqueda","title":"Ejemplos de B\u00fasqueda","text":"<pre><code># Buscar por t\u00edtulo\nSuperman\n\n# Buscar por archivo\n.cbz\n\n# Buscar por editorial\nMarvel\n\n# Buscar por a\u00f1o\n2023\n</code></pre>"},{"location":"usuario/primeros-pasos/#filtros-avanzados","title":"\u2699\ufe0f Filtros Avanzados","text":""},{"location":"usuario/primeros-pasos/#acceder-a-filtros","title":"Acceder a Filtros","text":"<ol> <li>Click en el bot\u00f3n \u2699\ufe0f de la barra superior</li> <li>Se abre el di\u00e1logo de \"Filtros Avanzados\"</li> <li>Configurar criterios seg\u00fan la vista activa</li> </ol>"},{"location":"usuario/primeros-pasos/#filtros-para-comics","title":"Filtros para Comics","text":"<pre><code>\u250c\u2500\u2500\u2500 Estado de Clasificaci\u00f3n \u2500\u2500\u2500\u2510\n\u2502 \u25cb Todos los comics            \u2502\n\u2502 \u25cb Solo clasificados           \u2502\n\u2502 \u25cb Solo sin clasificar         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u250c\u2500\u2500\u2500 Calidad del Archivo \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 M\u00ednima: [0] \u2b50                \u2502\n\u2502 M\u00e1xima: [5] \u2b50                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u250c\u2500\u2500\u2500 Estado del Archivo \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \u2610 Incluir elementos en        \u2502\n\u2502   papelera                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"usuario/primeros-pasos/#filtros-para-volumenes","title":"Filtros para Vol\u00famenes","text":"<pre><code>\u250c\u2500\u2500\u2500 A\u00f1o de Publicaci\u00f3n \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Desde: [1900]                 \u2502\n\u2502 Hasta: [2024]                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u250c\u2500\u2500\u2500 Cantidad de N\u00fameros \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 M\u00ednimo: [0]                   \u2502\n\u2502 M\u00e1ximo: [1000]                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u250c\u2500\u2500\u2500 Estado de Colecci\u00f3n \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \u25bc Todos los vol\u00famenes         \u2502\n\u2502   Colecci\u00f3n completa (100%)   \u2502\n\u2502   Mayor\u00eda completa (&gt;75%)     \u2502\n\u2502   Parcialmente completa       \u2502\n\u2502   Pocos n\u00fameros (&lt;25%)        \u2502\n\u2502   Sin comics (0%)             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"usuario/primeros-pasos/#modo-seleccion","title":"\ud83d\udcca Modo Selecci\u00f3n","text":""},{"location":"usuario/primeros-pasos/#activar-seleccion-multiple","title":"Activar Selecci\u00f3n M\u00faltiple","text":"<ol> <li>Click en el bot\u00f3n \ud83d\udcca de la barra superior</li> <li>Las cards cambian a modo selecci\u00f3n</li> <li>Click en cards para seleccionar/deseleccionar</li> </ol>"},{"location":"usuario/primeros-pasos/#acciones-en-lote","title":"Acciones en Lote","text":"<pre><code>\u250c\u2500\u2500\u2500 Acciones Disponibles \u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \ud83d\uddd1\ufe0f Mover a Papelera          \u2502\n\u2502 \ud83d\udcdd Editar Metadatos           \u2502\n\u2502 \ud83d\udd04 Actualizar desde ComicVine \u2502\n\u2502 \ud83d\udcc1 Cambiar Ubicaci\u00f3n          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"usuario/primeros-pasos/#flujo-de-trabajo-basico","title":"\ud83c\udfaf Flujo de Trabajo B\u00e1sico","text":""},{"location":"usuario/primeros-pasos/#1-importar-comics","title":"1. Importar Comics","text":"<pre><code>graph LR\n    A[Agregar Comics] --&gt; B[Escaneo Autom\u00e1tico]\n    B --&gt; C[Generar Thumbnails]\n    C --&gt; D[Vista Principal]\n</code></pre>"},{"location":"usuario/primeros-pasos/#2-catalogar-con-comicvine","title":"2. Catalogar con ComicVine","text":"<pre><code>graph LR\n    A[Seleccionar Comic] --&gt; B[Buscar en ComicVine]\n    B --&gt; C[Asociar con Issue]\n    C --&gt; D[Descargar Metadata]\n    D --&gt; E[Actualizar BD]\n</code></pre>"},{"location":"usuario/primeros-pasos/#3-organizar-coleccion","title":"3. Organizar Colecci\u00f3n","text":"<pre><code>graph LR\n    A[Aplicar Filtros] --&gt; B[Buscar Comics]\n    B --&gt; C[Seleccionar M\u00faltiples]\n    C --&gt; D[Acciones en Lote]\n</code></pre>"},{"location":"usuario/primeros-pasos/#personalizacion","title":"\ud83c\udfa8 Personalizaci\u00f3n","text":""},{"location":"usuario/primeros-pasos/#temas","title":"Temas","text":"<ul> <li>Claro: Tema predeterminado</li> <li>Oscuro: Activaci\u00f3n autom\u00e1tica seg\u00fan sistema</li> <li>Adaptativo: Sigue configuraci\u00f3n del sistema</li> </ul>"},{"location":"usuario/primeros-pasos/#directorios","title":"Directorios","text":"<pre><code># Estructura de datos\ndata/\n\u251c\u2500\u2500 babelcomics.db          # Base de datos principal\n\u251c\u2500\u2500 thumbnails/             # Cache de miniaturas\n\u2502   \u251c\u2500\u2500 comics/            # Thumbnails de comics\n\u2502   \u251c\u2500\u2500 volumes/           # Thumbnails de vol\u00famenes\n\u2502   \u2514\u2500\u2500 comicbookinfo_issues/ # Thumbnails de issues\n\u2514\u2500\u2500 backups/               # Respaldos autom\u00e1ticos\n</code></pre>"},{"location":"usuario/primeros-pasos/#configuracion-inicial","title":"\ud83d\udd27 Configuraci\u00f3n Inicial","text":""},{"location":"usuario/primeros-pasos/#directorios-de-comics","title":"Directorios de Comics","text":"<p>Por defecto, Babelcomics4 busca comics en: - Directorio actual del proyecto - Directorios especificados en variables de entorno - Rutas configuradas en la aplicaci\u00f3n</p>"},{"location":"usuario/primeros-pasos/#api-comicvine-opcional","title":"API ComicVine (Opcional)","text":"<pre><code># Configurar API key\nexport COMICVINE_API_KEY=\"tu-clave-aqui\"\n\n# O configurar en la aplicaci\u00f3n\n</code></pre>"},{"location":"usuario/primeros-pasos/#estadisticas","title":"\ud83d\udcc8 Estad\u00edsticas","text":""},{"location":"usuario/primeros-pasos/#panel-de-informacion","title":"Panel de Informaci\u00f3n","text":"<p>La aplicaci\u00f3n te muestra: - Total de comics: Cantidad en tu colecci\u00f3n - Clasificados: Comics con metadata completa - Sin clasificar: Comics pendientes de catalogar - Vol\u00famenes: Series en tu colecci\u00f3n - Completitud: Porcentaje medio de colecciones</p>"},{"location":"usuario/primeros-pasos/#proximos-pasos","title":"\ud83c\udfaf Pr\u00f3ximos Pasos","text":"<p>Ahora que conoces lo b\u00e1sico:</p> <ol> <li>Gesti\u00f3n de Comics: Importa y organiza tu colecci\u00f3n</li> <li>Gesti\u00f3n de Vol\u00famenes: Trabaja con series completas</li> <li>Filtros y B\u00fasqueda: Encuentra comics espec\u00edficos</li> <li>Integraci\u00f3n ComicVine: Automatiza la catalogaci\u00f3n</li> </ol>"},{"location":"usuario/primeros-pasos/#consejos-utiles","title":"\ud83d\udca1 Consejos \u00datiles","text":""},{"location":"usuario/primeros-pasos/#atajos-de-teclado","title":"Atajos de Teclado","text":"<ul> <li>Ctrl+F: Enfocar b\u00fasqueda</li> <li>Escape: Salir de modo selecci\u00f3n</li> <li>Ctrl+A: Seleccionar todos (en modo selecci\u00f3n)</li> </ul>"},{"location":"usuario/primeros-pasos/#mejores-practicas","title":"Mejores Pr\u00e1cticas","text":"<ol> <li>Organiza archivos: Usa nombres descriptivos</li> <li>Usa ComicVine: Para metadata autom\u00e1tica</li> <li>Aplica filtros: Para encontrar comics espec\u00edficos</li> <li>Backup regular: Protege tu base de datos</li> </ol> <p>\u00bfListo para organizar tu colecci\u00f3n? \ud83d\udc49 Gesti\u00f3n de Comics</p>"}]}