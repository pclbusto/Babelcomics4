#!/usr/bin/env python3
"""
Di√°logo "Acerca de" para Babelcomics4
"""

import gi
gi.require_version('Gtk', '4.0')
gi.require_version('Adw', '1')

from gi.repository import Gtk, Adw
import os
import sys
from datetime import datetime

def create_about_window(parent_window=None):
    """Devuelve una Adw.AboutWindow configurada para Babelcomics4."""
    about = Adw.AboutWindow()

    if parent_window:
        about.set_transient_for(parent_window)
        about.set_modal(True)

    # Configuraci√≥n b√°sica
    about.set_application_name("Babelcomics4")
    about.set_application_icon("application-x-comic-book")
    about.set_version("1.0.0")
    about.set_comments("Gestor completo de colecci√≥n de comics digitales")

    # Informaci√≥n del desarrollador
    about.set_developer_name("Pedro")
    about.set_translator_credits("Pedro")

    # Enlaces
    about.set_website("https://github.com/pedro/babelcomics4")
    about.add_link("Documentaci√≥n", "https://github.com/pedro/babelcomics4/wiki")
    about.add_link("Reportar problemas", "https://github.com/pedro/babelcomics4/issues")

    # Secciones de cr√©ditos
    about.add_credit_section("Desarrollo", [
        "Pedro - Desarrollador Principal",
        "Claude - Asistente de Desarrollo IA"
    ])

    about.add_credit_section("Tecnolog√≠as", [
        "GTK4 - Toolkit de interfaz gr√°fica",
        "libadwaita - Componentes modernos de GNOME",
        "Python 3.13 - Lenguaje de programaci√≥n",
        "SQLAlchemy - ORM para base de datos",
        "Pillow (PIL) - Procesamiento de im√°genes",
        "ComicVine API - Base de datos de comics"
    ])

    about.add_credit_section("Formatos Soportados", [
        "CBZ - Comic Book ZIP",
        "CBR - Comic Book RAR",
        "PDF - Documentos PDF",
        "JPG, PNG, WEBP - Im√°genes"
    ])

    about.add_credit_section("Caracter√≠sticas", [
        "üîç Catalogaci√≥n autom√°tica con ComicVine",
        "üñºÔ∏è Generaci√≥n de thumbnails en tiempo real",
        "‚ö´ Efectos visuales (escala de grises)",
        "üîÑ Actualizaciones concurrentes de metadata",
        "üìä Filtros avanzados y b√∫squeda inteligente",
        "üóÉÔ∏è Base de datos SQLite robusta"
    ])

    # Informaci√≥n del sistema
    gtk_version = get_gtk_version()
    about.add_credit_section("Informaci√≥n del Sistema", [
        f"Python: {sys.version.split()[0]}",
        f"GTK: {gtk_version}",
        f"Plataforma: {sys.platform}",
        f"Directorio: {os.getcwd()}"
    ])

    # Licencia y copyright
    about.set_license(
        "Este programa es software libre: puedes redistribuirlo y/o modificarlo "
        "bajo los t√©rminos de la Licencia P√∫blica General de GNU tal y como est√° "
        "publicada por la Free Software Foundation, versi√≥n 3 de la Licencia."
    )
    about.set_copyright("¬© 2024 Pedro")

    return about

def get_gtk_version():
    """Obtener versi√≥n de GTK"""
    try:
        return f"{Gtk.get_major_version()}.{Gtk.get_minor_version()}.{Gtk.get_micro_version()}"
    except:
        return "4.0+"


def create_about_dialog(parent_window=None):
    """Funci√≥n de conveniencia para crear el di√°logo"""
    dialog = create_about_window(parent_window)
    return dialog

def show_about_dialog(parent_window=None):
    """Mostrar di√°logo Acerca de"""
    dialog = create_about_window(parent_window)
    dialog.present()

if __name__ == "__main__":
    # Test del di√°logo
    app = Adw.Application()

    def on_activate(app):
        window = Adw.ApplicationWindow(application=app)
        window.set_title("Test About Dialog")
        window.set_default_size(400, 300)

        # Bot√≥n para mostrar About
        button = Gtk.Button(label="Mostrar Acerca de")
        button.connect('clicked', lambda b: show_about_dialog(window))

        window.set_content(button)
        window.present()

    app.connect('activate', on_activate)
    app.run(sys.argv)